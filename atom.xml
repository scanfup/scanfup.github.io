<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>shix🍭</title>
  
  
  <link href="https://scanfup.github.io/atom.xml" rel="self"/>
  
  <link href="https://scanfup.github.io/"/>
  <updated>2025-02-18T05:53:08.668Z</updated>
  <id>https://scanfup.github.io/</id>
  
  <author>
    <name>shix</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://scanfup.github.io/posts/0.html"/>
    <id>https://scanfup.github.io/posts/0.html</id>
    <published>2025-02-18T00:57:04.152Z</published>
    <updated>2025-02-18T05:53:08.668Z</updated>
    
    <content type="html"><![CDATA[<h2 id="三层架构">三层架构</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218085900406.png" alt="image-20250218085900406"></p><p><strong>三层架构在项目文件中的分布</strong></p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218090001132.png" alt="image-20250218090001132"></p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218091624703.png" alt="image-20250218091624703"></p><p><strong>软件设计的原则，高内聚低耦合</strong></p><p>高内聚：软件中各个功能模块内部的功能联系紧密，每个模块的功能实现具体</p><p>低耦合：软件中各个层/模块之间的依赖，关联的程度低</p><h2 id="分层解耦的思想">分层解耦的思想</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218092534276.png" alt="image-20250218092534276"></p><h2 id="IOC-DI入门">IOC&amp;DI入门</h2><p>service层以及dao层的实现类，交给IOC容器管理</p><p>为controller及service注入运行时，依赖的对象</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218121431169.png" alt="image-20250218121431169"></p><p><strong>@RestController 主要用于开发 RESTful API，适用于需要返回 JSON 或 XML 格式数据的 Web 服务</strong></p><p><strong>Bean 是 Spring 框架的核心概念之一，它代表了由 Spring 容器管理的对象。通过声明式配置和依赖注入，可以轻松地管理和组织应用程序中的组件，提高代码的可维护性和灵活性。理解 Bean 的定义、作用域和生命周期对于开发高质量的 Spring 应用程序至关重要</strong></p><h2 id="bean的声明">bean的声明</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218133309268.png" alt="image-20250218133309268"></p><ul><li><p>声明bean的时候，可以通过value属性指定bean的名字，如果没有指定，默认为类名首字母小写</p></li><li><p>使用以上四个注解都可以声明bean，但是在springboot集成web开发中，声明控制器bean只能用@controller</p></li></ul><h2 id="bean组件扫描">bean组件扫描</h2><p>被组件扫描后才能进行生效</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218133918237.png" alt="image-20250218133918237"></p><p>所以java会默认扫描启动类所在包及其子包，但是如果bean在启动类所在包之外，那么该组件不能生效</p><h2 id="bean注入相同类型解决方案-DI">bean注入相同类型解决方案|DI</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218135154886.png" alt="image-20250218135154886"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;三层架构&quot;&gt;三层架构&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218085900406.png&quot; alt=&quot;image-2025021</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://scanfup.github.io/posts/0.html"/>
    <id>https://scanfup.github.io/posts/0.html</id>
    <published>2025-02-17T12:58:54.510Z</published>
    <updated>2025-02-17T13:57:48.966Z</updated>
    
    <content type="html"><![CDATA[<h2 id="请求响应">请求响应</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250217205935391.png" alt="image-20250217205935391"></p><h2 id="1-原始方式">1.原始方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数获取的原始方式</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/Param&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">Param</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="comment">//获取请求参数</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">ageS</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    <span class="comment">//将获取到的年龄转化为整形</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> Integer.parseInt(ageS);</span><br><span class="line">    <span class="comment">//打印控制台</span></span><br><span class="line">    System.out.println(<span class="string">&quot;name:&quot;</span> + name + <span class="string">&quot; age:&quot;</span> + age);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到成功接收</p><h2 id="2-springboot方法">2.springboot方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@RequestMapping(&quot;/Param&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">Param</span><span class="params">(String name,Integer age)</span> &#123;</span><br><span class="line">        <span class="comment">//获取请求参</span></span><br><span class="line">        System.out.println(<span class="string">&quot;name:&quot;</span> + name + <span class="string">&quot; age:&quot;</span> + age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也是正常返回ok</p><h2 id="3-参数名不一致（RequestsParam）">3.参数名不一致（RequestsParam）</h2><p>参数名不一致，使用@RequestsParam注解完成映射，那么请求参数名就要跟name的参数名一致，这里就是namelll</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@RequestMapping(&quot;/Param&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">Param</span><span class="params">(<span class="meta">@RequestParam(name=&quot;namelll&quot;)</span> String name,Integer age)</span> &#123;</span><br><span class="line">        <span class="comment">//获取请求参</span></span><br><span class="line">        System.out.println(<span class="string">&quot;name:&quot;</span> + name + <span class="string">&quot; age:&quot;</span> + age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250217214517811.png" alt="image-20250217214517811"></p><p>这里RequestParam里面可以加上参数required=false，加上的话也可以不用传入该参数，不加默认为true，参数不能为空</p><h2 id="2-实体参数">2.实体参数</h2><p>将请求参数封装到一个实体类对象中，请求参数名要与与实体类的属性名相同</p><h3 id="2-1-简单实体参数">2.1 简单实体参数</h3><p>User实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实体参数：简单实体对象</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/simplePojo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">simplePojo</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-复杂实体参数">2.2 复杂实体参数</h3><p>复杂实体对象指的是，在实体类中有一个或多个属性，也是实体对象类型的。</p><p>例如：User类中有一个Address类型的属性（Address是一个实体类）</p><p>User实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Address address; <span class="comment">//地址对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Address实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Controller方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实体参数：复杂实体对象</span></span><br><span class="line">     <span class="meta">@RequestMapping(&quot;/complexPojo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">complexPojo</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="3-JSON参数-RequestBody">3.JSON参数(@RequestBody)</h2><p>在前后端进行交互时，如果是比较复杂的参数，前后端通过会使用JSON格式的数据进行传输。</p><p>传递json格式的参数，在Controller中会使用实体类进行封装。</p><p>封装规则：JSON数据键名与形参对象属性名相同，定义POJO类型形参即可接收参数。需要使用 @RequestBody标识。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JSON参数</span></span><br><span class="line"> <span class="meta">@RequestMapping(&quot;/jsonParam&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">jsonParam</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>@RequestBody注解：将JSON数据映射到形参的实体类对象中（JSON中的key和实体类中的属性名保持一致）</p><h2 id="4-路径参数-PathVariable">4.路径参数(@PathVariable)</h2><p>传统的开发中请求参数是放在请求体(POST请求)传递或跟在URL后面传递(GET请求)。但在现在的开发中，经常还会直接在请求的URL中传递参数。</p><p>传统请求参数：<br><a href="http://localhost:8080/user?name=hs&amp;age=18">http://localhost:8080/user?name=hs&amp;age=18</a></p><p>直接在请求的URL中传递参数：<br><a href="http://localhost:8080/user/1">http://localhost:8080/user/1</a><br><a href="http://localhost:880/user/1/0">http://localhost:880/user/1/0</a></p><h3 id="4-1-单个路径参数">4.1 单个路径参数</h3><p>使用{xx}来标识该路径参数，需要使用@PathVariable获取路径参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//路径参数</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/pathParam/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">pathParam</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-传递多个路径参数">4.2 传递多个路径参数</h3><p>继续加/{xx}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多个路径参数</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/pathParam/&#123;id&#125;/&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">pathParam</span><span class="params">(<span class="meta">@PathVariable</span> Integer id,<span class="meta">@PathVariable</span> String name)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (id+<span class="string">&quot;,&quot;</span>+name);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="5-数组集合参数">5.数组集合参数</h2><p>数组集合参数的使用场景：在HTML的表单中，有一个表单项是支持多选的(复选框)，可以提交选择的多个值。</p><p>后端程序接收上述多个值的方式有两种：</p><p>1.数组</p><p>2.集合</p><h3 id="5-1-数组参数">5.1 数组参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/arrayParam&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">arrayParam</span><span class="params">(String[] hobby)</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> Arrays.toString(hobby);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>在前端请求时，有两种传递形式：</p><p>方式一： ?hobby=game&amp;hobby=java</p><p>方式二： ?hobby=game,java</p><h3 id="5-2-集合参数-RequestParam">5.2 集合参数(@RequestParam)</h3><p>默认情况下，请求中参数名相同的多个值，是封装到数组。如果要封装到集合，要使用@RequestParam绑定参数关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/listParam&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List <span class="title function_">listParam</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;String&gt; hobby)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hobby;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在前端请求时，有两种传递形式：</p><p>方式一： ?hobby=game&amp;hobby=java</p><p>方式二： ?hobby=game,java</p><h2 id="6-日期参数-DateTimeFormat">6.日期参数(@DateTimeFormat)</h2><p>在一些特殊的需求中，可能会涉及到日期类型数据的封装。</p><p>因为日期的格式多种多样，那么对于日期类型的参数在进行封装的时候，需要通过@DateTimeFormat注解，以及其pattern属性来设置日期的格式。</p><p>@DateTimeFormat注解的pattern属性中指定了哪种日期格式，前端的日期参数就必须按照指定的格式传递。</p><p>后端controller方法中，需要使用Date类型或LocalDateTime类型，来封装传递的参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//日期参数</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/dateParam&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> LocalDateTime <span class="title function_">dataParam</span><span class="params">(<span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span> LocalDateTime updateTime)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> updateTime;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="7-响应">7.响应</h2><h3 id="7-1-ResponseBody">7.1 @ResponseBody</h3><p>@ResponseBody注解：</p><p>类型：方法注解、类注解<br>位置：书写在Controller方法上或类上<br>作用：将方法返回值直接响应给浏览器<br>如果返回值类型是实体对象/集合，将会转换为JSON格式后在响应给浏览器<br>在类上添加的@RestController注解，是一个组合注解。@RestController = @Controller + @ResponseBody</p><p>@RestController源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span>   <span class="comment">//元注解（修饰注解的注解）</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span>  <span class="comment">//元注解</span></span><br><span class="line"><span class="meta">@Documented</span>    <span class="comment">//元注解</span></span><br><span class="line"><span class="meta">@Controller</span>   </span><br><span class="line"><span class="meta">@ResponseBody</span> </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RestController &#123;</span><br><span class="line">    <span class="meta">@AliasFor(</span></span><br><span class="line"><span class="meta">        annotation = Controller.class</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br></pre></td></tr></table></figure><p>类上有@RestController注解或@ResponseBody注解时：表示当前类下所有的方法返回值做为响应数据，方法的返回值，如果是一个POJO对象或集合时，会先转换为JSON格式，在响应给浏览器</p><h3 id="7-2-统一响应结果">7.2 统一响应结果</h3><p>统一的返回结果使用类来描述，在这个结果中包含：</p><p>响应状态码：当前请求是成功，还是失败<br>状态码信息：给页面的提示信息<br>返回的数据：给前端响应的数据（字符串、对象、集合）<br>定义在一个实体类Result来包含以上信息。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;<span class="comment">//响应码，1 代表成功; 0 代表失败</span></span><br><span class="line">    <span class="keyword">private</span> String msg;  <span class="comment">//响应码 描述字符串</span></span><br><span class="line">    <span class="keyword">private</span> Object data; <span class="comment">//返回的数据</span></span><br><span class="line"><span class="comment">//增删改 成功响应(不需要给前端返回数据)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">1</span>,<span class="string">&quot;success&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查询 成功响应(把查询结果做为返回数据响应给前端)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">(Object data)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">1</span>,<span class="string">&quot;success&quot;</span>,data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//失败响应</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">error</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">0</span>,msg,<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>改造Controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//响应统一格式的结果</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World ~&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">&quot;Hello World ~&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;请求响应&quot;&gt;请求响应&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250217205935391.png&quot; alt=&quot;image-2025021</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://scanfup.github.io/posts/0.html"/>
    <id>https://scanfup.github.io/posts/0.html</id>
    <published>2025-02-17T12:14:37.131Z</published>
    <updated>2025-02-18T08:00:00.075Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2025-2-17">2025-2-17</h2><p>所以为什么做一个项目要先写一个接口，就是写完接口就可以去写注解路径了，需要请求什么路径，请求这个 路径使用什么方法，使用这个方法要有什么数据什么类，这个类里面都有什么，生成getter和setter方法，以及同string方法，所以一个接口文档是包含了很多东西的</p><ol><li>每种方法的参数接收，请求响应</li></ol><p>关于这个员工数据案例，首先前端使用axios请求了一下数据，如果数据存在那么返回data，返回的data经过前端渲染展示出来表格，那么后端是如何处理这个数据的，首先，后端拿到html文件，开始i逻辑判断，如果为1，就更新为名字，这里面更改信息又用到了之前声明变量所使用的getter和setter方法</p><h2 id="2025-2-18-周二">2025-2-18 周二</h2><p>一个项目是怎么样落地的呢？首先要想好要做一个什么项目，然后去弄个出来每个页面，这个页面都要有什么功能，以及功能外又要什么数据库，每个都应该要提前设计好，这才是软件开发的前提，不设计好之后根本就没有头绪</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2025-2-17&quot;&gt;2025-2-17&lt;/h2&gt;
&lt;p&gt;所以为什么做一个项目要先写一个接口，就是写完接口就可以去写注解路径了，需要请求什么路径，请求这个 路径使用什么方法，使用这个方法要有什么数据什么类，这个类里面都有什么，生成getter和setter方法，以</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://scanfup.github.io/posts/0.html"/>
    <id>https://scanfup.github.io/posts/0.html</id>
    <published>2025-02-17T11:35:21.761Z</published>
    <updated>2025-02-17T11:41:21.300Z</updated>
    
    <content type="html"><![CDATA[<h1>什么是tomcat</h1><p>Tomcat 是由Apache软件基金会开发的一个开源的轻量级Web服务器，主要用于部署和运行Java Servlet和JavaServer Pages (JSP) 技术构建的Web应用。以下是关于Tomcat的一些关键点：</p><ul><li><strong>Java Web应用容器</strong>：Tomcat作为Servlet容器，实现了Java EE（现Jakarta EE）规范中的Servlet、JSP、WebSocket等技术标准。</li><li><strong>开源免费</strong>：它是完全免费的，并且源代码开放，允许开发者根据需要进行修改和定制。</li><li><strong>轻量级与高效性</strong>：相比其他全功能的应用服务器，Tomcat更为轻便，启动速度快，资源占用少。</li><li><strong>易于配置和管理</strong>：提供了简单的XML配置文件来设置各种参数，同时也支持图形界面工具来进行管理和监控。</li><li><strong>广泛使用</strong>：由于其稳定性和灵活性，在中小型网站以及企业级应用中被广泛应用。</li></ul><p>对于Java开发者来说，Tomcat是一个非常重要的工具，它为开发、测试和部署Java Web应用程序提供了必要的环境。</p><h2 id="目录">目录</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250217193648913.png" alt="image-20250217193648913"></p><h2 id="端口号">端口号</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250217194109266.png" alt="image-20250217194109266"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;什么是tomcat&lt;/h1&gt;
&lt;p&gt;Tomcat 是由Apache软件基金会开发的一个开源的轻量级Web服务器，主要用于部署和运行Java Servlet和JavaServer Pages (JSP) 技术构建的Web应用。以下是关于Tomcat的一些关键点：&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://scanfup.github.io/posts/0.html"/>
    <id>https://scanfup.github.io/posts/0.html</id>
    <published>2025-02-13T14:09:54.130Z</published>
    <updated>2025-02-13T14:55:31.530Z</updated>
    
    <content type="html"><![CDATA[<p>14px 显得小巧精致，15px 阅读时会轻松点。如果读者为老年人，字体可以适当放大。</p><p><a href="https://www.woshipm.com/operate/4407734.html">https://www.woshipm.com/operate/4407734.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;14px 显得小巧精致，15px 阅读时会轻松点。如果读者为老年人，字体可以适当放大。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.woshipm.com/operate/4407734.html&quot;&gt;https://www.woshipm.com/operate</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>一些在网上看到的建议</title>
    <link href="https://scanfup.github.io/posts/e8a7021a.html"/>
    <id>https://scanfup.github.io/posts/e8a7021a.html</id>
    <published>2025-02-05T16:00:00.000Z</published>
    <updated>2025-02-06T13:39:17.261Z</updated>
    
    <content type="html"><![CDATA[<p>渡有心人，送给年轻人！<br>人生最有价值的知识主次及比例<br>①预防人生意外事故、研究透彻各种不良习气危害并避之，学会休息，预防运动劳损，健体使身体稳固不易损伤的知识（60％）<br>②上好学，培养傍身技能，记住稀缺是精髓，社会正常运行必要的职业，刚需手艺，专研透了，也能养你一辈子（30％）<br>③怎么教育子女，做好社会角色分工（8％）<br>④乐器绘画舞蹈等（2％）<br>健康活着，持续健康活着，持续幸福健康活着；起步的迟没关系，只要跑的越久，就跑的越远<br>清醒的头脑，健全的四肢，充实的肠胃，是每天要核查和保持的<br>保持健康，生活便进可攻，退可守<br>警惕贪（对于喜好的过于偏执）、嗔（对于讨厌的反应过激）、痴（对不明事理表现贪与嗔的反应），一旦发作，让人失去驾驭人生大局的基本理智。<br>凡事三思:思危、思退、思变<br>这个社会需要有真实能力的人去做事<br>这个世界健康其实才是最稀缺的东西<br>只赚认知内的钱<br>其他<br>①最好一辈子不沾酒，醉酒、喝酒不爬高，醉了一定要找低矮床铺侧卧休息<br>②膝关节是人体最复杂的关节，一定不要损伤，因为最复杂，一旦损伤，修复也是最难的。安全使用膝盖的知识<br>③健身体成习惯，心平静，充分热身，量力而行，场地光线充足安全无障碍<br>④把健康比作1,一个人的事业、财富、金钱、地位、家庭等等，都是尾随在其后的0，有了1，后面的0才有意义，没有了健康这个1做支撑，即使他有数不尽的0，那终究还只是个0，健康不是一切，但没有健康就没有一切<br>⑤我们成长中，各种原因原生环境，思想上行为上多少都背负着那么一些歪理邪说成分，长大了，要懂得筛查找出，不然它就好比一颗雷，谁知道那天触发了它就炸了<br>⑥终生思考:这个世界的真实面貌是什么样的，事实是什么<br>⑦远离自私垃圾人，远离以权力背景压人的人，若不可避免，至少一定要思危，不对果断跑路<br>⑧身材: 体重/身高平方≤23kg/m²<br>推荐<br>叔本华的《人生的智慧》，梁应林《人生意外800鉴》，杨渝平《运动损伤那些事》 ，北泽杏子《讨厌!喝酒好可怕》 系列<br>预防疾病<br>病毒肝炎（疫苗）、艾滋病（洁身）、肺结核（健身营养）、膝关节半月板撕裂（软骨损伤不可再生）、椎间盘突出、老人股骨头骨折（老人死亡骨折）尘肺（呼衰）脊髓损伤、脑梗偏瘫（4小时内溶栓）生活不能自理，狂犬病（致死）<br>出门看天气防雷电溺水、高空坠物、车祸、踩空、滑倒、火灾 、拌倒<br>健康是为了生命充分绽放<br>有些错失误就一次机会</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;渡有心人，送给年轻人！&lt;br&gt;
人生最有价值的知识主次及比例&lt;br&gt;
①预防人生意外事故、研究透彻各种不良习气危害并避之，学会休息，预防运动劳损，健体使身体稳固不易损伤的知识（60％）&lt;br&gt;
②上好学，培养傍身技能，记住稀缺是精髓，社会正常运行必要的职业，刚需手艺，专研透</summary>
      
    
    
    
    <category term="杂七杂八" scheme="https://scanfup.github.io/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
    
    
    <category term="杂七杂八" scheme="https://scanfup.github.io/tags/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://scanfup.github.io/posts/0.html"/>
    <id>https://scanfup.github.io/posts/0.html</id>
    <published>2025-02-04T09:58:31.202Z</published>
    <updated>2025-02-04T13:40:08.866Z</updated>
    
    <content type="html"><![CDATA[<p>首先，git clone下来的项目要npm install下载依赖，如果是vue项目，运行通常npm run serve或者npm run dev</p><h1>vue速通一下</h1><blockquote><ol><li>使用vite创建项目（较快）</li></ol><p><code>npm create vite</code></p></blockquote><h2 id="配置文件">配置文件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">src/  </span><br><span class="line">├── assets/               # 存放静态资源，如图片、字体、视频等  </span><br><span class="line">├── components/           # 公共组件  </span><br><span class="line">├── views/                # 页面组件  </span><br><span class="line">├── router/               # 路由配置  </span><br><span class="line">├── store/                # 状态管理（<span class="title class_">Vuex</span> 或 <span class="title class_">Pinia</span>）</span><br><span class="line">├── api/                  # 后端 <span class="variable constant_">API</span> 请求  </span><br><span class="line">├── utils/                # 工具函数  </span><br><span class="line">├── assets/               # 样式文件，字体、图片等  </span><br><span class="line">└── <span class="title class_">App</span>.<span class="property">vue</span>               # 根组件</span><br></pre></td></tr></table></figure><p>vite.config.js：项目的配置文件，基于vite的配置</p><p>package.json：项目包文件，核心依赖项变成了vue3，vite</p><p>main.js入口文件，createApp创建Vue实例，吃实话vue应用，配置全局插件，引入根组件</p><p><strong>main.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line"><span class="comment">//原始new Vue()创建一个应用实例 =升级=&gt; createApp() 将创建实例进行了封装,保证每个实例的独立封闭性</span></span><br></pre></td></tr></table></figure><h2 id="基础语法">基础语法</h2><p>setup：通过setup选项提供一种新的组件内部结构，以更模块化的方式组织代码</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250204200309324.png" alt="image-20250204200309324"></p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250204200629245.png" alt="image-20250204200629245"></p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250204200422732.png" alt="image-20250204200422732"></p><p>指令</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">指令属性</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;htmlContent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;htmlContent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">渲染属性</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;item in 5&quot;</span>&gt;</span>这是内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;false&quot;</span>&gt;</span>标签内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">属性指令</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span>这是内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span>这是内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">事件指令</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;output&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;output&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">表单指令 v-model可是实现数据双向绑定</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;inputValue&quot;</span>&gt;</span><span class="comment">&lt;!-- 可以更改内部数据从而改变页面反应 --!&gt;   </span></span><br><span class="line"><span class="comment">&lt;p v-text=&quot;inputValue&quot;&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="comment">修饰符</span></span><br><span class="line"><span class="comment">&lt;input type=&quot;text&quot; v-model.trim=&quot;inputValue&quot;&gt;trim可以实现清除数据</span></span><br></pre></td></tr></table></figure><h2 id="组件开发">组件开发</h2><p>Vue CLI 是一个基于Vue.js进行快速项目搭建的工具。它是一个全局安装的npm包，为Vue.js应用程序快速创建项目模板</p><h2 id="vuex">vuex</h2><p>vuex是一个专门为vue.js应用程序开发的状态管理工具</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250204211539447.png" alt="image-20250204211539447"></p><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。以下是对 Vuex 的详细介绍：<br>核心概念</p><p>state：用于存储应用的所有状态数据，是一个普通的 JavaScript 对象。可以将其看作是一个“数据仓库”，包含了组件之间共享的数据。例如在一个电商应用中，购物车中的商品列表就可以存储在 state 中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    <span class="attr">cartItems</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>组件中获取 state 数据的方式：在 Vue 组件中，可以通过 this.$store.state 来访问 state 中的数据。如果使用计算属性，代码会更加简洁和易读：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">computed</span>: &#123;</span><br><span class="line">        <span class="title function_">cartItems</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">cartItems</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mutations：唯一可以修改 state 的地方，是一些纯函数。每个 mutation 都有一个字符串的事件类型和一个回调函数，回调函数接收 state 作为第一个参数。这种设计保证了状态变化的可预测性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="title function_">ADD_TO_CART</span>(<span class="params">state, item</span>) &#123;</span><br><span class="line">        state.<span class="property">cartItems</span>.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">触发 mutations 的方式：在组件中通过 <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;mutationType&#x27;</span>, payload) 来触发，例如：</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">addItemToCart</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> newItem = &#123; <span class="attr">name</span>: <span class="string">&#x27;Product 1&#x27;</span>, <span class="attr">price</span>: <span class="number">10</span> &#125;;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;ADD_TO_CART&#x27;</span>, newItem);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>actions：用于处理异步操作，如发送网络请求等。actions 可以触发 mutations 来间接修改 state。它也有一个上下文对象，包含了 state、commit 等属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">fetchCartItems</span>(<span class="params">&#123; commit &#125;</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://api.example.com/cart-items&#x27;</span>);</span><br><span class="line">            <span class="keyword">const</span> data = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">            <span class="title function_">commit</span>(<span class="string">&#x27;SET_CART_ITEMS&#x27;</span>, data);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error fetching cart items:&#x27;</span>, error);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">触发 actions 的方式：在组件中通过 <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;actionType&#x27;</span>, payload) 来调用，例如：</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;fetchCartItems&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getters：类似于计算属性，用于获取 state 中的数据，起到对 state 数据进行过滤、计算等作用。它的优点是可以缓存计算结果，只有当依赖的 state 数据发生变化时才会重新计算。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">    <span class="title function_">totalCartPrice</span>(<span class="params">state</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> state.<span class="property">cartItems</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">total, item</span>) =&gt;</span> total + item.<span class="property">price</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">在组件中使用 getters 的方式：与计算属性类似，通过 <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span> 访问，例如：</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">computed</span>: &#123;</span><br><span class="line">        <span class="title function_">totalCartPrice</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="property">totalCartPrice</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>项目中的应用场景</p><p>多组件共享状态：当多个组件需要共享数据时，将数据存储在 Vuex 的 state 中，避免了通过层层传递 prop 或者使用事件总线（Event Bus）带来的复杂性和维护成本。例如，在一个多页面的电商应用中，商品列表页、购物车页和结算页都需要共享购物车的状态，使用 Vuex 可以方便地实现数据的共享和同步更新。<br>复杂状态管理：对于复杂的业务逻辑，如涉及多个状态的联动变化、异步操作等，Vuex 的 mutations、actions 和 getters 提供了清晰的结构来管理和维护这些逻辑。例如在处理用户登录和权限管理时，可以在 actions 中处理登录的异步请求，通过 mutations 更新用户登录状态，使用 getters 判断用户是否具有某些权限。</p><p>优势</p><p>可预测性：由于 mutations 是唯一可以修改 state 的地方，并且是纯函数，使得应用的状态变化变得可预测。开发人员可以很容易地追踪状态的变化过程，便于调试和维护。<br>便于团队协作：Vuex 提供了一种集中式的状态管理方式，所有的状态数据和状态变化逻辑都集中在一个地方。团队成员可以更容易地理解和维护项目的状态管理逻辑，减少了因状态管理混乱而导致的错误。<br>利于代码复用：在不同的项目中，如果有相似的状态管理需求，可以方便地复用 Vuex 的模块和逻辑，提高开发效率。</p><h2 id="vue-router">vue-router</h2><h3 id="基础路由">基础路由</h3><p>使用的时候要在上面进行导入</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250204205133242.png" alt="image-20250204205133242"></p><h3 id="动态路由，子路由">动态路由，子路由</h3><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250204205724734.png" alt="image-20250204205724734"></p><h3 id="编程式导航，路由跳转">编程式导航，路由跳转</h3><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250204210620603.png" alt="image-20250204210620603"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;首先，git clone下来的项目要npm install下载依赖，如果是vue项目，运行通常npm run serve或者npm run dev&lt;/p&gt;
&lt;h1&gt;vue速通一下&lt;/h1&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;使用vite创建项目（较快）&lt;/li&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://scanfup.github.io/posts/0.html"/>
    <id>https://scanfup.github.io/posts/0.html</id>
    <published>2025-02-03T02:40:08.871Z</published>
    <updated>2025-02-03T03:21:39.966Z</updated>
    
    <content type="html"><![CDATA[<h1>简介</h1><p><strong>Webpack 是一个模块打包工具，在现代的 JavaScript 应用程序开发中扮演着至关重要的角色</strong>。以下是关于它的详细介绍：<br>核心概念</p><h2 id="模块（Module）">模块（Module）</h2><p>在 Webpack 中，一切文件（如 JavaScript、CSS、图片等）都可以被视为模块。模块之间可以相互依赖和引用。例如，一个 JavaScript 文件可能会导入另一个 JavaScript 文件、样式文件或者图片文件。<br>入口（Entry）：入口是 Webpack 开始打包的起点。从入口文件出发，Webpack 会递归地找到所有依赖的模块。常见的入口配置形式是一个字符串（指定单个入口文件路径），也可以是一个对象（用于 多入口情况）。例如：entry: ‘./src/index.js’<br>输出（Output）：指定 Webpack 打包后的文件输出路径和文件名等信息。通过 output 配置项，你可以告诉 Webpack 把打包后的文件放在哪里，以及如何命名。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="loader">loader</h2><p>Webpack 本身只能处理 JavaScript 和 JSON 文件，loader 用于让 Webpack 能够处理其他类型的文件，比如 CSS、图片等。loader 可以将这些文件转换为 Webpack 能够理解的模块。例如，css-loader 用于处理 CSS 文件，file-loader 用于处理图片等文件资源。使用时需要在 webpack.config.js 中进行配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插件（Plugin）">插件（Plugin）</h2><p>插件可以在 Webpack 构建过程的不同阶段执行更广泛的任务，比如压缩代码、分割代码块、生成 HTML 文件等。html-webpack-plugin 可以自动生成 HTML 文件，并将打包后的 JavaScript 文件引入其中；mini-css-extract-plugin 可以将 CSS 从 JavaScript 中抽离出来生成单独的 CSS 文件。插件需要先引入，然后在 plugins 数组中进行实例化配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优势">优势</h2><p>模块处理能力强大：能够处理各种类型的模块及其复杂的依赖关系，无论是 JavaScript 的 ES6 模块系统，还是 CommonJS 模块等，都能很好地整合和打包。<br>优化资源加载：可以对代码进行分割和懒加载，提高应用程序的加载速度。例如，将不同路由对应的代码分割成单独的代码块，只有在用户访问相应路由时才加载。<br>支持多种文件类型：通过丰富的 loader 和插件生态系统，能够处理 CSS、图片、字体等各种文件类型，将它们整合到最终的打包文件中。</p><h2 id="使用场景">使用场景</h2><p>单页面应用（SPA）开发：帮助管理 SPA 中众多的模块和资源，实现代码的优化加载和性能提升。<br>多页面应用（MPA）开发：可以为每个页面分别进行打包和资源处理，提高开发效率和应用性能。<br>处理复杂的样式：通过相关 loader 和插件，可以对 CSS 进行预处理（如使用 Sass、Less）、后处理（如添加浏览器前缀），并优化 CSS 的加载和合并。</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250203105210570.png" alt="image-20250203105210570"></p><h1>webpack解决变量重名问题</h1><h2 id="通过作用域进行解决">通过作用域进行解决</h2><p>Webpack 将每个文件视为一个模块，ES6 模块具有自己独立的作用域。在模块内部定义的变量、函数等只在该模块内有效，不会影响到其他模块。</p><h1>webpack加载器</h1><p>webpack非常经典的加载器</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250203111503743.png" alt="image-20250203111503743"></p><p>0位置是他自己本身，1是导出函数，2是加载器</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;简介&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Webpack 是一个模块打包工具，在现代的 JavaScript 应用程序开发中扮演着至关重要的角色&lt;/strong&gt;。以下是关于它的详细介绍：&lt;br&gt;
核心概念&lt;/p&gt;
&lt;h2 id=&quot;模块（Module）&quot;&gt;模块（Module）</summary>
      
    
    
    
    <category term="爬虫" scheme="https://scanfup.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="爬虫" scheme="https://scanfup.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://scanfup.github.io/posts/0.html"/>
    <id>https://scanfup.github.io/posts/0.html</id>
    <published>2025-01-21T12:49:02.897Z</published>
    <updated>2025-01-26T14:17:49.577Z</updated>
    
    <content type="html"><![CDATA[<ul><li>ut：时间戳</li><li>sign：签名认证，一般情况多数加密参数存在</li></ul><p>正则一般是如何提取的，有什么技巧i</p><h1>看源码</h1><p>首先看一下源码，发现源码中没有任何信息，那么就看一下网络请求</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;ut：时间戳&lt;/li&gt;
&lt;li&gt;sign：签名认证，一般情况多数加密参数存在&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;正则一般是如何提取的，有什么技巧i&lt;/p&gt;
&lt;h1&gt;看源码&lt;/h1&gt;
&lt;p&gt;首先看一下源码，发现源码中没有任何信息，那么就看一下网络请求&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://scanfup.github.io/posts/0.html"/>
    <id>https://scanfup.github.io/posts/0.html</id>
    <published>2025-01-20T03:52:13.493Z</published>
    <updated>2025-01-26T14:17:49.567Z</updated>
    
    <content type="html"><![CDATA[<p>无论是原型对象和实例对象都有 __ proto__</p><p>原型对象有  prototype</p><p>a.prototype  如果不是undefined  就说明a对象 是原型对象</p><p>原型对象和实例对象的函数  this 指向不同</p><p>实例对象</p><p>function a(){</p><p>​console.log(this)</p><p>}</p><p>谁调用 this就指向谁</p><p>原型对象</p><p>function pro(){</p><p>​this.a =1</p><p>}</p><p>var  aaa = new pro()  this指向的是原型对象的实例对象  也就是aaa</p><p>其中 pro 就是原型对象</p><p>构造函数的属性和原型对象的属性不同</p><p>对象._ _ proto_ _ 就是找这个对象的父对象</p><p>aaa._ <em>proto</em>___ 就是 原型对象</p><p>最底层就是object</p><p>object.__ pooto__  就是null了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;无论是原型对象和实例对象都有 __ proto__&lt;/p&gt;
&lt;p&gt;原型对象有  prototype&lt;/p&gt;
&lt;p&gt;a.prototype  如果不是undefined  就说明a对象 是原型对象&lt;/p&gt;
&lt;p&gt;原型对象和实例对象的函数  this 指向不同&lt;/p&gt;
&lt;p&gt;实</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://scanfup.github.io/posts/0.html"/>
    <id>https://scanfup.github.io/posts/0.html</id>
    <published>2025-01-20T03:52:13.493Z</published>
    <updated>2025-01-26T14:17:49.575Z</updated>
    
    <content type="html"><![CDATA[<p>js逆向的过程</p><p>抓包—调试----脱离浏览器环境（让浏览器的js代码在本地运行）  本地环境（node.js 封装的V8引擎）</p><h1>Object.defineProperty()</h1><p>静态方法会直接在一个对象上定义一个新属性，或修改其现有属性，并返回此对象。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen"><code>Object.isFrozen()</code></a></p><p>判断对象是否已经冻结。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed"><code>Object.isSealed()</code></a></p><p>判断对象是否已经封闭。</p><p>weixin.code   是小程序  的code  是 app生成的  没办法逆向出来  只能第三方做的hook</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;js逆向的过程&lt;/p&gt;
&lt;p&gt;抓包—调试----脱离浏览器环境（让浏览器的js代码在本地运行）  本地环境（node.js 封装的V8引擎）&lt;/p&gt;
&lt;h1&gt;Object.defineProperty()&lt;/h1&gt;
&lt;p&gt;静态方法会直接在一个对象上定义一个新属性，或修改其现</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://scanfup.github.io/posts/0.html"/>
    <id>https://scanfup.github.io/posts/0.html</id>
    <published>2025-01-20T03:52:13.493Z</published>
    <updated>2025-01-26T14:17:49.576Z</updated>
    
    <content type="html"><![CDATA[<h1>网络协议：</h1><h2 id="TCP">TCP</h2><p>安全</p><p>速度慢</p><p>《三次握手》</p><p>1、客户端找到服务器 ：我来了！</p><p>2、服务器 找到客户端： 你确定来了？</p><p>3、客户端再发给服务器：我确定我来了</p><p>网站基本都是走的TCP协议</p><h2 id="UDP">UDP</h2><p>不能保证数据完整性</p><p>速度快</p><p>TCP和UDP 都是底层协议，我们是管不了的</p><p>我们能处理的就是 顶层协议</p><h2 id="顶层协议">顶层协议</h2><p>由开发这个软件的开发者开发的协议</p><p>协议：我怎么样告诉你我是谁，以及我怎么告诉你数据的格式</p><p>HTTP  HTTPS</p><p>FTP  发文件的协议</p><p>SMTP  POP3  发邮件的协议</p><p>MQTT</p><p>HTTP 80端口 ——&gt; https 443端口</p><p><a href="HTTPS://hao.360.com">HTTPS://hao.360.com</a></p><p>https 协议</p><p><a href="http://360.com">360.com</a> 主域名</p><p><a href="http://hao.360.com">hao.360.com</a> 二级域名  ip地址  一个域名对应一个ip地址</p><h3 id="http-https-send">http    -&gt; https    send</h3><p>请求头</p><p>请求体</p><p>响应头</p><p>响应体</p><h3 id="websocket-websockets">websocket -&gt; websockets</h3><p>new websocket  创建websocket的位置</p><p>测试网址  <a href="http://www.websocket-test.com/">http://www.websocket-test.com/</a></p><p><img src="C:%5CUsers%5Chp%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230810172032425.png" alt="image-20230810172032425"></p><p>Status Code: 101 Switching Protocols</p><p>请求头（以下都是不能删除的）</p><ol><li>Connection: Upgrade  #代表协议升级</li><li>Host: 124.222.224.186:8800</li><li>Origin: <a href="http://www.websocket-test.com">http://www.websocket-test.com</a></li><li>Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits</li><li>Sec-WebSocket-Key: pjJ9hSUw3F+RVRsXlRz5Ow==  #升级加密的key 由客户端随机生成</li><li>Sec-WebSocket-Version: 13 #升级到什么版本</li><li>Upgrade: websocket #升级成什么协议</li><li>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64)AppleWebKit/537.36 (KHTML, like Gecko)Chrome/95.0.4638.69 Safari/537.36</li></ol><p>messages： 看发了什么信息的</p><p>虽然 此网站 显示 是明文，但是其实可以发好几种数据，</p><p>可发的数据类型 ：字节集    string   一般直接认为是字节集</p><p>websocket 是一次请求一直连接  而 http是一次请求一次连接</p><p>http  短连接</p><p>websocket  长连接</p><p>抓包 只看 三类  XHR  WS   document</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;网络协议：&lt;/h1&gt;
&lt;h2 id=&quot;TCP&quot;&gt;TCP&lt;/h2&gt;
&lt;p&gt;安全&lt;/p&gt;
&lt;p&gt;速度慢&lt;/p&gt;
&lt;p&gt;《三次握手》&lt;/p&gt;
&lt;p&gt;1、客户端找到服务器 ：我来了！&lt;/p&gt;
&lt;p&gt;2、服务器 找到客户端： 你确定来了？&lt;/p&gt;
&lt;p&gt;3、客户端再发给服务器：我确</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://scanfup.github.io/posts/0.html"/>
    <id>https://scanfup.github.io/posts/0.html</id>
    <published>2025-01-19T05:21:21.624Z</published>
    <updated>2025-01-26T14:17:49.578Z</updated>
    
    <content type="html"><![CDATA[<p>编辑器： 秀米 135编辑器 壹伴编辑器（推荐）</p><p>正文：15，中文细体 两端缩进16</p><p>封面制作：canva,创客贴</p><p>图片：https;<a href="//www.pexels.com/zh-cn/(%E5%9B%BE%E7%89%87%E5%85%B3%E9%94%AE%E5%AD%97%E5%AF%BB%E6%89%BE)">//www.pexels.com/zh-cn/(图片关键字寻找)</a></p><p>寻找文案灵感：顶尖文案（TOPYS） 清博大数据（分析） 、 微博热搜</p><p>涨粉：受众身边</p><p>变现：流量主：500人粉丝 推</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;编辑器： 秀米 135编辑器 壹伴编辑器（推荐）&lt;/p&gt;
&lt;p&gt;正文：15，中文细体 两端缩进16&lt;/p&gt;
&lt;p&gt;封面制作：canva,创客贴&lt;/p&gt;
&lt;p&gt;图片：https;&lt;a href=&quot;//www.pexels.com/zh-cn/(%E5%9B%BE%E7%89%</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>做饭</title>
    <link href="https://scanfup.github.io/posts/7414cfa6.html"/>
    <id>https://scanfup.github.io/posts/7414cfa6.html</id>
    <published>2025-01-18T04:04:00.000Z</published>
    <updated>2025-01-18T04:04:52.371Z</updated>
    
    <content type="html"><![CDATA[<p><strong>基本就是调料最后放，然后酱油可以放两次，开锅前一次，然后其他调料都是后放，先盐，再糖，味精</strong></p><h1>各种醋的用法</h1><ul><li><p>陈醋：酸味浓郁，稳定性比较好，适用于制作焖，炖，烧</p></li><li><p>香醋：酸而不涩，不适合长时间的加热，多用于凉菜，蘸汁，调汤</p></li><li><p>白醋：以食用酒精为原料，无色，味道单纯，酸度不高</p></li><li><p>米醋：香气纯正，酸味柔和，无所不用</p></li></ul><h1>酱油</h1><ul><li><strong>生抽</strong>：味道鲜美，咸味适中，同时具有独特的酱香味，口感相对清爽。</li><li><strong>老抽</strong>：相比生抽，老抽的咸味稍重一些，酱香更加浓郁醇厚，还带有一点甜味。</li></ul><h1>示例</h1><h2 id="一、番茄炒鸡蛋">一、番茄炒鸡蛋</h2><p>00:30</p><p>**番茄🍅：**可以买普罗旺斯、铁皮，一般软的更好，铁皮是青的比红的甜</p><p>1.番茄对半切去掉蒂头，一颗番茄切大块，一颗番茄切小丁</p><p><img src="https://i0.hdslb.com/bfs/note/842e83d83c14eee2cd70438535eab42dc61bb628.jpg@690w_!web-note.webp" alt="img"></p><p>2.把鸡蛋打进碗里（5个，上不封顶）</p><p>3.在鸡蛋的碗里加入盐，搅散</p><p>4.往锅里加入宽油（多油），开最大火，等油热，再把鸡蛋下锅，蛋液凝固后捞出，锅里留一点油</p><p>5.用留的油炒蒜末和番茄丁，中火慢慢炒，超出汁水</p><p>6.下入大块番茄，炒2分钟炒软</p><p>7.鸡蛋再次下锅</p><p>8.加调味，翻炒均匀</p><p><img src="https://i0.hdslb.com/bfs/note/add100f707207dce67a962c28e9380c07f92c6fb.jpg@690w_!web-note.webp" alt="img"></p><p><img src="https://i0.hdslb.com/bfs/note/88116291fbc2415933798410c41345b65233fd5d.jpg@690w_!web-note.webp" alt="img"></p><h2 id="二、炒青菜">二、炒青菜</h2><p>01:53</p><p><img src="https://i0.hdslb.com/bfs/note/a4e91aa66b1f279c9fb223860cce0122c5a449b2.jpg@690w_!web-note.webp" alt="img"></p><p>这里用的是上海青🥬（广义上的绿叶菜）</p><ol><li>青菜清洗干净（尤其是根部）</li><li>把青菜菜心最厚的地方切掉，甩干水分</li><li>起锅烧火，大火化开猪油，有香味后下入青菜，大火炒3分钟至软化</li><li>调味，炒匀出锅</li></ol><p><img src="https://i0.hdslb.com/bfs/note/55a2d5a25ea7e649d9cab6b17643beb675430789.jpg@690w_!web-note.webp" alt="img"></p><p><img src="https://i0.hdslb.com/bfs/note/c07b6fb324ad6f854430e83ab131b099b4136e43.jpg@690w_!web-note.webp" alt="img"></p><h2 id="三、炒土豆丝">三、炒土豆丝</h2><p>02:52</p><p><img src="https://i0.hdslb.com/bfs/note/099e7d37b6cb8309631bcfd85ce96e4332cea26c.jpg@690w_!web-note.webp" alt="img"></p><ol><li>土豆去皮，擦丝，用清水清洗</li><li>开最大🔥，倒一点油，20秒后放入蒜末、干辣椒段，拨弄几下，下入土豆丝炒1分钟</li><li>加调味（如图），翻炒30秒</li><li>出锅前淋香油，撒小葱</li></ol><p><img src="https://i0.hdslb.com/bfs/note/ccac7ced0570fed28ec6b2f517b13a35e6a89572.jpg@690w_!web-note.webp" alt="img"></p><h2 id="四、水蒸蛋">四、水蒸蛋</h2><p>03:50</p><ol><li>打3个鸡蛋，加9个蛋壳的水（用蛋壳装水） 比例是1:1.5</li><li>往鸡蛋里加一勺盐，再打鸡蛋搅匀，撇掉表面泡泡，盖一层保鲜膜，戳排气孔</li><li>烧锅水，放锅里蒸9分钟（中途不可以开盖）</li></ol><p><img src="https://i0.hdslb.com/bfs/note/2753d1d915d20a5363109584bc2826c0142dd226.jpg@690w_!web-note.webp" alt="img"></p><p>吃法：划几刀，浇上豉油、酱油</p><p><img src="https://i0.hdslb.com/bfs/note/bd41c803ecd9137bf8b8a6fa729ba9c148b6d4ba.jpg@690w_!web-note.webp" alt="img"></p><h2 id="五、可乐鸡翅">五、可乐鸡翅</h2><p>04:40</p><p><img src="https://i0.hdslb.com/bfs/note/b2d3c49f557065e1fa7ae9d981a32c13349912c3.jpg@690w_!web-note.webp" alt="img"></p><ol><li>锅里加少量油，开中火煎鸡翅</li><li>煎到微微焦黄，倒入普通含糖可乐没过鸡翅</li><li>加调味，大火收汁，直到浓稠</li></ol><p><img src="https://i0.hdslb.com/bfs/note/5beb88fa6b10f0adb9eca8790ffb63774e4855fe.jpg@690w_!web-note.webp" alt="img"></p><h2 id="六、肉末粉丝">六、肉末粉丝</h2><p>05:46</p><ol><li>把红薯粉条泡开</li><li>切猪肉末</li><li>准备姜末、蒜末、小米辣、香菜、葱</li><li>锅里加油，开大火炒香姜末、蒜末、小米辣、猪肉末，加入2勺豆瓣酱，炒出红油</li><li>翻炒到肉末散开，下入粉条，翻动炒软</li><li>加调味，炒到粉条完全透明</li><li>出锅前撒一把葱花、香菜</li></ol><p><img src="https://i0.hdslb.com/bfs/note/66d6e65a5f1a1cfdafb526c1fc9afdc086057dca.jpg@690w_!web-note.webp" alt="img"></p><p><img src="https://i0.hdslb.com/bfs/note/6839a973122075bc2f273c6047719b47813aa141.jpg@690w_!web-note.webp" alt="img"></p><h2 id="七、辣椒炒肉">七、辣椒炒肉</h2><p>06:49</p><p>辣椒：选择螺丝椒、皱皮椒</p><p>猪肉：选择带点肥肉的（烧烤肉片就可以）</p><p><img src="https://i0.hdslb.com/bfs/note/6e93ddf39d69f3a547142e6e8f7348bc7a3ab2b4.jpg@690w_!web-note.webp" alt="img"></p><ol><li>把辣椒的蒂头拔掉，去掉辣椒籽</li><li>把辣椒压扁，切小段</li><li>猪肉加调味⬆️，抓匀，腌制</li><li>开中火，不加油，干烤辣椒，用铲子压，烤出虎皮，盛出备用</li><li>锅里加油，开大火煎肉片</li><li>往锅里加入蒜末、豆豉、辣椒</li><li>加调味，炒匀出锅</li></ol><p><img src="https://i0.hdslb.com/bfs/note/8d7c3a47616aa9119725153b8654449d8906d01f.jpg@690w_!web-note.webp" alt="img"></p><p><img src="https://i0.hdslb.com/bfs/note/e2fd3f6a48cc2ff6a8974061b4187ebf1589e611.jpg@690w_!web-note.webp" alt="img"></p><h2 id="八、白灼虾">八、白灼虾</h2><p>08:10</p><p>煮的版本⬇️</p><ol><li>剪掉虾腿，用活瞎</li><li>冷水加入姜片和料酒</li><li>等水烧开放虾，等水重新沸腾后煮一分钟，关火泡一分钟</li></ol><p>蒸的版本⬇️</p><ol><li>冷水加料酒、姜片，烧水</li><li>加上蒸笼，蒸笼放上葱姜，再放虾</li><li>保持大火冒蒸汽状态蒸5分钟，单独把虾拿出来装盘，不要水</li></ol><p>调料汁：2勺姜末、2勺蒜末，泼热油，加水蒸鱼豉油、一把葱花</p><p><img src="https://i0.hdslb.com/bfs/note/d2ca9b2c52293c6cbe5126927c5f59afe124e015.jpg@690w_!web-note.webp" alt="img"></p><h2 id="九、煮饭">九、煮饭</h2><p>00:20</p><ol><li>淘米（洗掉生米表面的淀粉）-&gt;打圈淘洗 至半浑浊</li></ol><p><img src="https://i0.hdslb.com/bfs/note/4404507a4178857dc34dae54943561a7469d1697.jpg@690w_!web-note.webp" alt="img"></p><p>2.加水到合适水量</p><p>3.陈米加一勺油、米醋</p><h2 id="十、韭菜炒蛋">十、韭菜炒蛋</h2><p>01:03</p><ol><li>韭菜清洗，切段</li><li>打鸡蛋，打散，不加盐</li><li>起锅烧油，可以稍微多一些油，中火炒蛋（轻轻推炒）</li><li>看不到明显鸡蛋液体，下入韭菜快速翻炒至断生</li><li>韭菜绿色变深的时候抓紧撒盐、味精调味，翻拌均匀快速出锅</li></ol><p><img src="https://i0.hdslb.com/bfs/note/f07a63e920815569a2a2df3a6b267e56befeb556.jpg@690w_!web-note.webp" alt="img"></p><h2 id="十一、手撕包菜">十一、手撕包菜</h2><p>02:01</p><ol><li>清洗包菜/牛心菜，切掉根部，手撕成大片</li><li>切五花肉片</li><li>锅里加油煎五花肉</li><li>调成最大🔥，下入蒜末、干辣椒、花椒、1勺生抽酱油</li><li>水汽蒸发完，下入包菜炒软</li><li>加盐、味精</li></ol><p><img src="https://i0.hdslb.com/bfs/note/70ff79441fd1422de9c2558f5f91bce069c336c0.jpg@690w_!web-note.webp" alt="img"></p><h2 id="十二、青椒肉丝">十二、青椒肉丝</h2><p>02:55</p><ol><li>螺丝椒或皱皮椒洗净，梗往里推再往外拽，去掉辣椒籽，切丝或圈</li><li>切肉丝，调味抓匀腌制5分钟–1勺生抽、1勺老抽、1勺黄酒、2勺淀粉</li><li>起锅烧火，大火🔥多加油，冷油下肉丝，把肉丝滑散，炒到变色散开出锅</li><li>锅里剩余油爆香大蒜末、青椒，炒两分钟断生</li><li>肉丝下锅，加盐、味精调味</li></ol><p><img src="https://i0.hdslb.com/bfs/note/590b169eca1d4447cfb868a56dfe1384a2d3ad21.jpg@690w_!web-note.webp" alt="img"></p><h2 id="十三、白切肉">十三、白切肉</h2><p>04:00</p><ol><li>选择五花肉/梅花肉/松板肉/肋条肉（带点肥肉的）</li><li>焯水：一锅冷水，加入姜片、黄酒、肉，中小火慢慢加热，把水煮开，撇掉浮末</li><li>盖盖中火炖1小时</li><li>可以直接吃，或者配个蒜汁(蒜泥1勺、葱花1勺、豉油4勺）用生菜叶子包着吃</li></ol><p><img src="https://i0.hdslb.com/bfs/note/cb8eff27ec407ee50b68c146d4096c9232ade404.jpg@690w_!web-note.webp" alt="img"></p><h2 id="十四、红烧肉">十四、红烧肉</h2><p>05:00</p><ol><li><p>锅里加入冷水、黄酒、姜片、五花肉，焯水，水开把肉取出切大肉块</p></li><li><p>炒糖色</p><p>05:30</p><p>中火，锅里倒油，加入一大把冰糖或砂糖 炒2分钟</p></li><li><p>糖色到<strong>红棕色</strong>5分钟的时候，下入肉块（尽量颜色不要太深</p></li><li><p>往锅里加入一圈生抽、黄酒，炒0.5-2分钟</p></li><li><p>加水漫过食材，加入1-2颗八角、1根桂皮、3片香叶、3片姜，盖上盖子炖2小时（或者高压锅1小时）</p></li><li><p>开盖，大火收汁</p></li></ol><p><img src="https://i0.hdslb.com/bfs/note/262dd0885c50a77167c55fd1133ad77f41a38d71.jpg@690w_!web-note.webp" alt="img"></p><h2 id="十五、糖醋排骨">十五、糖醋排骨</h2><p>06:36</p><ol><li>一锅冷水，加入黄酒、姜片、排骨，中火烧开，把排骨取出晾干</li><li>起锅烧油，🔥中火，加一大把冰糖，颜色到<strong>金黄</strong>就可以下排骨（糖如果不够后面可以补一点）</li><li>加入3勺生抽、1勺黄酒、5勺陈醋、适量糖，漫过食材的水、1颗八角、1根桂皮、3片香叶、3片姜，盖盖炖50分钟</li><li>开盖，大火收汁</li><li>补一圈白醋增加酸度（或者用柠檬、青梅、山楂、菠萝等）</li></ol><p><img src="https://i0.hdslb.com/bfs/note/b2a7570248ea20e1c49cee3363ecdb824a637336.jpg@690w_!web-note.webp" alt="img"></p><h2 id="十六、鱼汤">十六、鱼汤</h2><p>09:02</p><ol><li>鲢鱼/鲫鱼，去掉🐟的淤血和黑膜（用钢丝球）</li><li>切2-4片姜片</li><li>锅里加入多油，煎鱼的一面到焦黄定型了再翻面【或者使劲翻炒至碎碎，炒酥了再加水炖10分钟，漏掉鱼渣】</li><li>加入滚烫开水（刚烧开的）</li><li>加入1勺米酒、姜片</li><li>保持沸腾状态，盖盖炖20分钟</li><li>出锅前，加入盐、白胡椒、葱花</li></ol><p><img src="https://i0.hdslb.com/bfs/note/add6703e39631c7fc35f34dedc6fedc95917423a.jpg@690w_!web-note.webp" alt="img"></p><h2 id="十七、香菇土豆炖鸡块">十七、香菇土豆炖鸡块</h2><p><img src="https://i0.hdslb.com/bfs/note/bf5ae5736abdf94850a328392ebda65eefe29a23.jpg@734w_!web-note.webp" alt="img"></p><p><img src="https://i0.hdslb.com/bfs/note/1def8a34854c6351f8fe99942dc35988ffea2555.jpg@734w_!web-note.webp" alt="img"></p><p><img src="https://i0.hdslb.com/bfs/note/cf8c9007886cb223a63c8f9ea3faf0bc93892644.jpg@734w_!web-note.webp" alt="img"></p><p>第1步，先准备两个鸡腿，把鸡腿清洗干净，剁成小块状，也可以直接让店家剁成小块，然后放进清水中加入葱姜，料酒，把鸡块儿焯水，然后捞出清洗干净备用。</p><p>第2步，锅中放油，等油热了之后，加入花椒，八角，辣椒炒出香味，再把鸡肉块放进去，充分的翻炒均匀，加入两勺生抽，一勺老抽，适量食盐，再加入一点点料酒，加入姜片和适量葱盖上盖子用大火煮开，煮开了之后再转中火炖10~15分钟。</p><p>第3步，准备一个土豆去皮，滚刀切块，胡萝卜也清洗干净，滚到切块儿，准备适量喜欢吃的丸子，也可以不用加。</p><p>第4步，然后把准备好的土豆，胡萝卜和丸子全都加进去炖煮，等煮熟煮透了，再用大火收汁，最后撒上适量的葱花或者是香菜，就可以出锅了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;基本就是调料最后放，然后酱油可以放两次，开锅前一次，然后其他调料都是后放，先盐，再糖，味精&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;各种醋的用法&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;陈醋：酸味浓郁，稳定性比较好，适用于制作焖，炖，烧&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
</summary>
      
    
    
    
    <category term="吃" scheme="https://scanfup.github.io/categories/%E5%90%83/"/>
    
    
    <category term="家庭小灶" scheme="https://scanfup.github.io/tags/%E5%AE%B6%E5%BA%AD%E5%B0%8F%E7%81%B6/"/>
    
  </entry>
  
  <entry>
    <title>js逆向</title>
    <link href="https://scanfup.github.io/posts/e8768110.html"/>
    <id>https://scanfup.github.io/posts/e8768110.html</id>
    <published>2025-01-17T16:00:00.000Z</published>
    <updated>2025-02-08T03:38:27.117Z</updated>
    
    <content type="html"><![CDATA[<h1>js基础</h1><h2 id="js输出">js输出</h2><ul><li>使用window.alert()弹出警告框</li><li>使用document.write()方法将内容写到html文档中</li><li>使用innerHTML写入到html元素</li><li>使用console.log()写入到浏览器的控制台</li></ul><h2 id="正则表达式">正则表达式</h2><ul><li><strong>search()</strong> 方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并返回子串的起始位置。</li><li><strong>replace()</strong> 方法用于在字符串中用一些字符串替换另一些字符串，或替换一个与正则表达式匹配的子串</li></ul><h2 id="锁定变量">锁定变量</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250120150738692.png" alt="image-20250120150738692"></p><h2 id="异步">异步</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250121103407055.png" alt="image-20250121103407055"></p><h2 id="平坦流">平坦流</h2><p>打断分析流程</p><p>出现特征<code>warp 或者 u.prev = u.next</code></p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250121104826346.png" alt="image-20250121104826346"></p><p>里边的u.next()是下一次要执行的条件</p><h2 id="eval">eval</h2><p><code>eval</code> 是 JavaScript 中的一个内置函数，用于将字符串作为代码进行解析和执行。它的基本语法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(string);</span><br></pre></td></tr></table></figure><p>DiffCopyInsert</p><p>其中 <code>string</code> 是一个包含 JavaScript 代码的字符串。<code>eval</code> 会将这个字符串作为实际的 JavaScript 代码来执行，并返回执行结果。</p><ol><li><p><strong>基本用法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;console.log(&#x27;Hello, World!&#x27;);&quot;</span>);</span><br></pre></td></tr></table></figure><p>DiffCopyInsert</p><p>这段代码会输出 <code>Hello, World!</code></p></li></ol><h1>js调试</h1><h2 id="123456">123456</h2><p>123456的md5加密<strong>32位</strong></p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250118195541745.png" alt="image-20250118195541745"></p><p>四十位密文的一般为sha1加密</p><h2 id="控制台-搜索">控制台 搜索</h2><p>定位的位置比较准确，搜到的位置比较多，要自己进行筛选，容易搜不到</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250118195922787.png" alt="image-20250118195922787"></p><h2 id="DOM">DOM</h2><p>HTML DOM时间允许JavaScript在THML文档元素中注册不同事件处理程序，事件通常与函数结合使用，函数不会在事件发生前被执行</p><p>dom元素断点</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250120205234901.png" alt="image-20250120205234901"></p><h2 id="断点">断点</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250118205918124.png" alt="image-20250118205918124"></p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250118213753982.png" alt="image-20250118213753982"></p><p><strong>加密的流程大概就是 用户输入明文-&gt;经过了一些方法-&gt;加密函数-&gt;拼装封包-&gt;发包函数-&gt;浏览器的发包函数</strong></p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250120210720373.png" alt="image-20250120210720373"></p><h2 id="寻找合适事件js文件-dom事件">寻找合适事件js文件 dom事件</h2><p>定位的位置比较靠前</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250119125131755.png" alt="image-20250119125131755"></p><p>可以在这里抓包之后打开js</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250120204250207.png" alt="image-20250120204250207"></p><h2 id="XHR断点">XHR断点</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250119162050009.png" alt="image-20250119162050009"></p><p><strong>优点</strong>：定位的位置在发包函数，我们可以跟栈，<strong>缺点</strong>：只能用于XHR的数据包</p><h2 id="watch-变量监控">watch 变量监控</h2><h2 id="本地替换">本地替换</h2><p>本地替换就是使用本地的文件夹，将目标js文件复制到该文件夹并进行替换，用于打断点或者无限debugger</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250124200337388.png" alt="image-20250124200337388"></p><p><img src="C:/Users/%E4%BE%AF%E5%8D%93%E6%9E%97/AppData/Roaming/Typora/typora-user-images/image-20250124203447114.png" alt="image-20250124203447114"></p><h2 id="Fiddler">Fiddler</h2><p>Fiddler是一个抓包工具</p><p>那么既然浏览器可以抓包，那么为什么要用Fiddler呢？</p><p><strong>因为浏览器抓包抓不全，有些包如果同一个url返回一个200返回一个403，那么这时候浏览器为了自身效率，就会自动把这两个包删除，就是两个相同的url地址，返回两次数据，那么浏览器就会把第一次返回的删掉</strong></p><h2 id="XHR">XHR</h2><p>XHR全名HMLHttpRequest，大致和request相同，</p><h2 id="websocket">websocket</h2><p>webscoket是做一些实时弹幕，或者聊天室</p><h1>抓包</h1><h2 id="document">document</h2><p>如果是document包，那么拿着域名去elements找</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250120211847947.png" alt="image-20250120211847947"></p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250120212031190.png" alt="image-20250120212031190"></p><h2 id="jsonp">jsonp</h2><p>一般是全局搜索，或则元素搜索jsonp</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250120214545329.png" alt="image-20250120214545329"></p><h2 id="XHR-2">XHR</h2><p>xhr的直接找包里边的js，然后开始刷包调栈</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250120221527304.png" alt="image-20250120221527304"></p><p>问题，为什么我的断点，断不到东西啊，</p><p>另外调用栈还没试</p><h2 id="HOOK">HOOK</h2><h1>网络基础</h1><h2 id="curl">curl</h2><p>url是客户端的URL工具，使用在服务器之间传输数据的开源命令行工具和跨平台的库，包括用户代理，握手数据，端口等详细信息。</p><h2 id="ajax">ajax</h2><p>异步的javascript+xml，ajax不是新的编程语言，而是一种使用现有标准的新方法，ajax是与服务器交换数据并更新部分网页的艺术，在不重新加载整个页面对的情况下。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h1>SSL指纹部分（ja3指纹）</h1><p>如今几乎所有平台通信都是基于Https的协议，而无论基于什么工具去发送Https请求时，都需要基于TLS/SSL先建立两端安全的通信（握手），建立后再进行数据传输。</p><p>TLS的握手阶段，客户端会向服务端发送 Client Hello 数据包，在数据包内的JA3就是指纹信息（基于电脑的TLS版本+内置算法等计算出来的字符串），并且该值不会随着请求头修改、代理等发生变化。所以，某个网站的后台就会去读取TLS客户端的JA3指纹，如果是非正常指纹，禁止访问。</p><hr><p>TLS是一个兼容协议，它可以进行协议的升级与降级，支持兼容与不兼容模式</p><p>同一个浏览器，加密套件里面的内容是相同的，写死的</p><p><strong>ssl指纹验证就是把再用语言请求的爬虫的底层的ssl指纹更改为正确的浏览器不会识别为爬虫的指纹</strong></p><h1>混淆</h1><h2 id="控制流平坦化">控制流平坦化</h2><p>控制流平坦化技术会对原始代码的控制流结构进行重组，将代码中的各个基本块（一段顺序执行且没有分支，除了末尾可能有一个无条件跳转的代码片段）合并到一个大的块中，并引入一个状态变量和一个大型的多路分支（例如一个大的switch语句）来模拟原来的控制流。</p><h1>加密</h1><h2 id="RSA">RSA</h2><p>rsa加密常见标志：setpublickey方法，js实现加密可以用jsencrypt加密库</p><h2 id="AES">AES</h2><p>aes加密的搜索关键词有AES，mode，padding</p><h2 id="DES">DES</h2><p>DES加密的搜索关键词有DES，mode，padding</p><h2 id="SHA1">SHA1</h2><p>sha1的关键词就是sha1</p><h2 id="MD5">MD5</h2><p>md5加密搜索MD5即可</p><h2 id="bs64">bs64</h2><p>base64</p><h2 id="OB混淆">OB混淆</h2><p>OB 混淆是指将 JavaScript 代码中的变量名、函数名、字符串等替换为无意义的字符串，从而增加代码的保护性和防止代码的逆向分析。此外，它还可以在代码中添加死代码、无用的函数等，增加代码的复杂度和难以理解性，从而增加代码的保密性</p><h1>请求</h1><h2 id="session">session</h2><p>session在网络应用中称为“会话控制”，是服务器为了保存用户状态而创建的一个特殊的对象。简而言之，session就是一个对象，用于存储信息</p><p><strong>那么session有什么用呢？</strong></p><p>我们先来想一个问题，这个问题就是我们在游览购物网站时，我们并没有登录，但是我们任然可以将商品加入购物车，并且进行查看，当我们退出游览器后再打开游览器进行查看时，购物车中依然有我们选择的商品，这该怎么实现呢？</p><p>​    当然，我们可以使用cookie，但是cookie能存放大量数据吗？这时，我们就需要一种新的技术，Session。session是存储于服务器端的特殊对象，服务器会为每一个游览器(客户端)创建一个唯一的session。这个session是服务器端共享，每个游览器(客户端)独享的。我们可以在session存储数据，实现数据共享</p><p><strong>session里边可以储存键值对</strong></p><h3 id="session和cookie的比较">session和cookie的比较</h3><p>cookie保存在客户端，session保存在服务端<br>cookie作用于他所表示的path中(url中要包含path)，范围较小。session代表客户端和服务器的一次会话过程，web页面跳转时也可以共享数据，范围是本次会话，客户端关闭也不会消失。会持续到我们设置的session生命周期结束(默认30min)<br>我们使用session需要cookie的配合。cookie用来携带JSESSIONID<br>cookie存放的数据量较小，session可以存储更多的信息。<br>cookie由于存放在客服端，相对于session更不安全<br>由于session是存放于服务器的，当有很多客户端访问时，肯定会产生大量的session，这些session会对服务端的性能造成影响</p><h2 id="get和post关于request请求参数">get和post关于request请求参数</h2><h3 id="post">post</h3><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250127170055479.png" alt="image-20250127170055479"></p><h3 id="get">get</h3><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250127170115225.png" alt="image-20250127170115225"></p><h1>实例</h1><h2 id="数据加密">## 数据加密</h2><p>decrypt加密,直接去搜这个字母就行</p><h1>油猴hook</h1><p>首先下载油猴插件，进行一些初始配置</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250205111048824.png" alt="image-20250205111048824"></p><p>其中我们可以在里面加上一个参数</p><table><thead><tr><th>属性名</th><th>作用</th></tr></thead><tbody><tr><td><code>@run-at</code></td><td>脚本注入时机，这个比较重要，有时候是能不能hook到的关键，<code>document-start</code>：网页开始时；<code>document-body</code>：body出现时；<code>document-end</code>：载入时或者之后执行；<code>document-idle</code>：载入完成后执行，默认选项</td></tr><tr><td>@match</td><td>match里面是匹配网址，如果后面+*就是于该网址相关的所有路由</td></tr></tbody></table><p>编辑好hook代码之后，直接命名好，保存并开启就好啦！</p><p>就像这样</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250205112526598.png" alt="image-20250205112526598"></p><hr><h2 id="hook某宝cookies">hook某宝cookies</h2><p>比如说现在要hook一个宝的cookie</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250205112659319.png" alt="image-20250205112659319"></p><p>就拿这里的t来说，我们要hook这个t</p><p>那么我们就可以在油猴里写下面的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name         New Userscript</span></span><br><span class="line"><span class="comment">// @namespace    http://tampermonkey.net/</span></span><br><span class="line"><span class="comment">// @version      2025-02-05</span></span><br><span class="line"><span class="comment">// @description  try to take over the world!</span></span><br><span class="line"><span class="comment">// @author       You</span></span><br><span class="line"><span class="comment">// @match        https://www.taobao.com/*</span></span><br><span class="line"><span class="comment">// @icon         https://www.google.com/s2/favicons?sz=64&amp;domain=csdn.net</span></span><br><span class="line"><span class="comment">// @grant        none</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> cookie_cache = <span class="variable language_">document</span>.<span class="property">cookie</span>;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">document</span>, <span class="string">&#x27;cookie&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cookie_cache;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">val</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Setting cookie&#x27;</span>, val);</span><br><span class="line">            <span class="comment">// 填写cookie名</span></span><br><span class="line">            <span class="keyword">if</span> (val.<span class="title function_">indexOf</span>(<span class="string">&#x27;t&#x27;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">debugger</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> cookie = val.<span class="title function_">split</span>(<span class="string">&quot;;&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">var</span> ncookie = cookie.<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">var</span> cache = cookie_cache.<span class="title function_">split</span>(<span class="string">&quot;; &quot;</span>);</span><br><span class="line">            cache = cache.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a.<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>)[<span class="number">0</span>] === ncookie[<span class="number">0</span>]) &#123;</span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">return</span> cookie;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> a;</span><br><span class="line">            &#125;)</span><br><span class="line">            cookie_cache = cache.<span class="title function_">join</span>(<span class="string">&quot;; &quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">                cookie_cache += cookie + <span class="string">&quot;; &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> cookie_cache;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>保存并命名之后，在宝中启用这个插件</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250205112836366.png" alt="image-20250205112836366"></p><p>然后把这个t删除掉重新生成</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250205112926930.png" alt="image-20250205112926930"></p><p>最后就直接可以hook到啦</p><h2 id="hook模板">hook模板</h2><p>下面是一些hook的代码</p><h3 id="hook-headers">hook headers</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 头部参数 请求对象当中的 设胃请求头部参数</span></span><br><span class="line">   <span class="keyword">var</span> org = <span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">setRequestHeader</span>;</span><br><span class="line">   <span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">setRequestHeader</span> = <span class="keyword">function</span> (<span class="params">key, value</span>) &#123;</span><br><span class="line">       <span class="comment">// 关键字 在请求当中发现有键是Authorization 断点</span></span><br><span class="line">       <span class="keyword">if</span> (key == <span class="string">&#x27;Authorization&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">debugger</span>;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">return</span> org.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="hook过debugger">hook过debugger</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先保留原 constructor</span></span><br><span class="line"><span class="comment">// 1. 比如判断是否有该debugger词语，替换为同等长度的空格（避免判断长度）</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor_</span> = <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>;</span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果参数为 debugger，就返回空方法</span></span><br><span class="line">    <span class="keyword">if</span>(a == <span class="string">&quot;debugger&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>)&#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果参数不为 debugger，还是返回原方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">constructor_</span>(a);</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="number">2.</span> 如果是定时器的<span class="keyword">debugger</span>采用以下语句</span><br><span class="line"><span class="comment">// 先保留原定时器</span></span><br><span class="line"><span class="keyword">var</span> setInterval_ = <span class="built_in">setInterval</span></span><br><span class="line"><span class="built_in">setInterval</span> = <span class="keyword">function</span> (<span class="params">func, time</span>)&#123;</span><br><span class="line">    <span class="comment">// 如果时间参数为 0x7d0，就返回空方法</span></span><br><span class="line">    <span class="comment">// 当然也可以不判断，直接返回空，有很多种写法</span></span><br><span class="line">    <span class="keyword">if</span>(time == <span class="number">0x7d0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果时间参数不为 0x7d0，还是返回原方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">setInterval_</span>(func, time)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// eval(&quot;debugger;&quot;);</span></span><br></pre></td></tr></table></figure><h3 id="hook-json">hook json</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> stringify = <span class="title class_">JSON</span>.<span class="property">stringify</span>;</span><br><span class="line">    <span class="title class_">JSON</span>.<span class="property">stringify</span> = <span class="keyword">function</span>(<span class="params">params</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hook JSON.stringify ——&gt; &quot;</span>, params);</span><br><span class="line">        <span class="keyword">debugger</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">stringify</span>(params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="hook-eval">hook eval</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 保存原始方法</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">__cr_eval</span> = <span class="variable language_">window</span>.<span class="property">eval</span>;</span><br><span class="line">    <span class="comment">// 重写 eval</span></span><br><span class="line">    <span class="keyword">var</span> myeval = <span class="keyword">function</span>(<span class="params">src</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(src);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=============== eval end ===============&quot;</span>);</span><br><span class="line">        <span class="keyword">debugger</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">window</span>.<span class="title function_">__cr_eval</span>(src);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 屏蔽 JS 中对原生函数 native 属性的检测</span></span><br><span class="line">    <span class="keyword">var</span> _myeval = myeval.<span class="title function_">bind</span>(<span class="literal">null</span>);</span><br><span class="line">    _myeval.<span class="property">toString</span> = <span class="variable language_">window</span>.<span class="property">__cr_eval</span>.<span class="property">toString</span>;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">window</span>, <span class="string">&#x27;eval&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">value</span>: _myeval</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>这个专栏主要写一些我平时对于js逆向的一些见解，如果觉得文章对你有帮助的话还请点赞+订阅，很高兴能帮到你，我会继续努力！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;js基础&lt;/h1&gt;
&lt;h2 id=&quot;js输出&quot;&gt;js输出&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用window.alert()弹出警告框&lt;/li&gt;
&lt;li&gt;使用document.write()方法将内容写到html文档中&lt;/li&gt;
&lt;li&gt;使用innerHTML写入到html元素</summary>
      
    
    
    
    <category term="js逆向" scheme="https://scanfup.github.io/categories/js%E9%80%86%E5%90%91/"/>
    
    
    <category term="爬虫" scheme="https://scanfup.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://scanfup.github.io/posts/0.html"/>
    <id>https://scanfup.github.io/posts/0.html</id>
    <published>2025-01-09T13:01:12.422Z</published>
    <updated>2025-01-18T04:02:48.587Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>我开始用笔墨，蘸取脑海中的世界，染在纸上</p></li><li><p>战争即和平 自由即奴役 无知即力量。-《1984》</p></li><li><p>公共舆论在多大程度上是被特定机制生产出来的限期商品</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;我开始用笔墨，蘸取脑海中的世界，染在纸上&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;战争即和平 自由即奴役 无知即力量。-《1984》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;公共舆论在多大程度上是被特定机制生产出来的限期商品&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>python期末</title>
    <link href="https://scanfup.github.io/posts/10fc7804.html"/>
    <id>https://scanfup.github.io/posts/10fc7804.html</id>
    <published>2024-12-26T08:19:00.000Z</published>
    <updated>2025-01-02T06:09:09.607Z</updated>
    
    <content type="html"><![CDATA[<h1>用户图形界面-工资计算器</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">    w = <span class="built_in">int</span>(e1.get()) + <span class="built_in">int</span>(e2.get()) - <span class="built_in">int</span>(e3.get())</span><br><span class="line">    wage.insert(<span class="number">0</span>,w)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root = Tk()</span><br><span class="line">root.title(<span class="string">&quot;工资计算器&quot;</span>)</span><br><span class="line">Label(root, text=<span class="string">&quot;每月基本工资：&quot;</span>).pack()</span><br><span class="line">e1 = Entry(root)</span><br><span class="line">e1.pack()</span><br><span class="line">Label(root, text=<span class="string">&quot;补助工资：&quot;</span>).pack()</span><br><span class="line">e2 = Entry(root)</span><br><span class="line">e2.pack()</span><br><span class="line">Label(root, text=<span class="string">&quot;考勤扣款：&quot;</span>).pack()</span><br><span class="line">e3 = Entry(root)</span><br><span class="line">e3.pack()</span><br><span class="line">Button(root, text=<span class="string">&quot;计算&quot;</span>, command=f).pack()</span><br><span class="line">Label(root, text=<span class="string">&quot;实发工资：&quot;</span>).pack()</span><br><span class="line">wage=Entry(root)</span><br><span class="line">wage.pack()</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><ol><li>使用tk方法创建一个窗口类型root，并且给该窗口命名为工资计算器</li><li>用Label标签创建每月基本工资，补助工资，考勤扣款这几个标签，pack方法是将这几个标签放到窗口里</li><li>用Entry方法在root里创建输入框，并且将输入框创建在窗口里边</li><li>用Button方法创建一个按钮，与f方法绑定</li><li>root.mainloop()显示窗口</li></ol><h1>政府工作报告-词云图</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#2、读取文本并分词</span></span><br><span class="line">text = <span class="built_in">open</span>(<span class="string">&quot;2023政府工作报告.txt&quot;</span>,<span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line">ss=<span class="string">&quot; &quot;</span>.join(jieba.lcut(text))</span><br><span class="line">mask=np.array(Image.<span class="built_in">open</span>(<span class="string">&quot;ChinaMap.png&quot;</span>))</span><br><span class="line"><span class="comment">#3、配置词云参数，生成词云</span></span><br><span class="line">wc = WordCloud(</span><br><span class="line">    font_path=<span class="string">&quot;fonts/msyh.ttc&quot;</span>,</span><br><span class="line">    background_color = <span class="string">&quot;white&quot;</span>,</span><br><span class="line">    max_words=<span class="number">300</span>,</span><br><span class="line">    mask =mask,</span><br><span class="line">    max_font_size = <span class="number">200</span>,height=<span class="number">400</span>,width=<span class="number">854</span>,</span><br><span class="line">stopwords=&#123;<span class="string">&quot;的&quot;</span>, <span class="string">&quot;了&quot;</span>, <span class="string">&quot;是&quot;</span>, <span class="string">&quot;在&quot;</span>, <span class="string">&quot;和&quot;</span>, <span class="string">&quot;有&quot;</span>, <span class="string">&quot;一个&quot;</span>, <span class="string">&quot;与&quot;</span>, <span class="string">&quot;我&quot;</span>, <span class="string">&quot;我们&quot;</span>, <span class="string">&quot;你&quot;</span>, <span class="string">&quot;他&quot;</span>, <span class="string">&quot;她&quot;</span>, <span class="string">&quot;它&quot;</span>, <span class="string">&quot;这个&quot;</span>, <span class="string">&quot;那个&quot;</span>, <span class="string">&quot;对于&quot;</span>,</span><br><span class="line">            <span class="string">&quot;因为&quot;</span>, <span class="string">&quot;所以&quot;</span>, <span class="string">&quot;如果&quot;</span>, <span class="string">&quot;如何&quot;</span>, <span class="string">&quot;这样&quot;</span>, <span class="string">&quot;但&quot;</span>, <span class="string">&quot;只有&quot;</span>, <span class="string">&quot;而&quot;</span>, <span class="string">&quot;也&quot;</span>, <span class="string">&quot;更加&quot;</span>, <span class="string">&quot;去&quot;</span>, <span class="string">&quot;将&quot;</span>, <span class="string">&quot;可以&quot;</span>, <span class="string">&quot;大&quot;</span>, <span class="string">&quot;小&quot;</span>, <span class="string">&quot;非常&quot;</span>,</span><br><span class="line">            <span class="string">&quot;不仅&quot;</span>, <span class="string">&quot;更&quot;</span>, <span class="string">&quot;是的&quot;</span>, <span class="string">&quot;以及&quot;</span>, <span class="string">&quot;而且&quot;</span>, <span class="string">&quot;关于&quot;</span>, <span class="string">&quot;当&quot;</span>, <span class="string">&quot;能&quot;</span>, <span class="string">&quot;这些&quot;</span>, <span class="string">&quot;这些&quot;</span>, <span class="string">&quot;自己&quot;</span>, <span class="string">&quot;需要&quot;</span>, <span class="string">&quot;当时&quot;</span>, <span class="string">&quot;某些&quot;</span>, <span class="string">&quot;任何&quot;</span>,</span><br><span class="line">            <span class="string">&quot;本&quot;</span>, <span class="string">&quot;此&quot;</span>, <span class="string">&quot;更&quot;</span>, <span class="string">&quot;过&quot;</span>, <span class="string">&quot;一些&quot;</span>, <span class="string">&quot;同样&quot;</span>, <span class="string">&quot;两&quot;</span>, <span class="string">&quot;三&quot;</span>, <span class="string">&quot;四&quot;</span>, <span class="string">&quot;五&quot;</span>, <span class="string">&quot;十&quot;</span>, <span class="string">&quot;不&quot;</span>, <span class="string">&quot;多&quot;</span>, <span class="string">&quot;少&quot;</span>, <span class="string">&quot;起来&quot;</span>, <span class="string">&quot;之前&quot;</span>, <span class="string">&quot;之后&quot;</span>&#125;,</span><br><span class="line">colormap=<span class="string">&quot;Reds&quot;</span>,contour_width=<span class="number">8</span>,contour_color=<span class="string">&quot;red&quot;</span>)</span><br><span class="line">wc.generate(ss)</span><br><span class="line"><span class="comment">#4、生成图片并显示</span></span><br><span class="line">wc.to_image( )</span><br><span class="line">wc.to_file(<span class="string">&quot;C:/Users/Administrator/Desktop/new.png&quot;</span>)</span><br></pre></td></tr></table></figure><ol><li>首先，导包</li><li>打开政府工作报告文件，并且读取文本存入text</li><li>使用jieba分词，生成字符串并使用空格连接，存入ss</li><li>mask是使用该图像作为模板</li><li>创建一个词云示例wc，使用Wordcloud方法，并且定义<code>font,background_color,max_words,mask,stopwords</code></li><li>colormap为红色映射，后面两个设置词云的宽度和颜色</li><li><code>wc.generate(ss)</code>生成词云</li><li>展示图像并保存</li></ol><h1>七日天气-爬虫</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#日期、天气如何、温度、风向、风速</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> xlsxwriter</span><br><span class="line"><span class="comment"># 请求网页</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">page_request</span>(<span class="params">url, ua</span>):</span><br><span class="line">    response = requests.get(url=url, headers=ua)</span><br><span class="line">    html = response.content.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> html</span><br><span class="line"><span class="comment"># 解析网页</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">page_parse</span>(<span class="params">html</span>):</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    date = soup.select(<span class="string">&#x27;#\\37 d &gt; ul &gt; li&gt; h1&#x27;</span>)</span><br><span class="line">    wendu_high = soup.select(<span class="string">&#x27;#\\37 d &gt; ul &gt; li &gt; p.tem &gt; span&#x27;</span>)</span><br><span class="line">    wendu_low = soup.select(<span class="string">&#x27;#\\37 d &gt; ul &gt; li &gt; p.tem &gt; i&#x27;</span>)</span><br><span class="line">    tianqi = soup.select(<span class="string">&#x27;#\\37 d &gt; ul &gt; li &gt; p.wea&#x27;</span>)</span><br><span class="line">    fenxiang = soup.select(<span class="string">&#x27;#\\37 d &gt; ul &gt; li &gt; p.win &gt; em &gt; span&#x27;</span>)</span><br><span class="line">    fengsu = soup.select(<span class="string">&#x27;#\\37 d &gt; ul &gt; li &gt; p.win &gt; i&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    workbook= xlsxwriter.Workbook(<span class="string">&#x27;tianqi.xlsx&#x27;</span>)</span><br><span class="line">    <span class="comment">#添加工作表</span></span><br><span class="line">    worksheet=workbook.add_worksheet(<span class="string">&#x27;data&#x27;</span>)</span><br><span class="line">    headers=[<span class="string">&#x27;日期&#x27;</span>,<span class="string">&#x27;温度&#x27;</span>,<span class="string">&#x27;天气&#x27;</span>,<span class="string">&#x27;风向&#x27;</span>,<span class="string">&#x27;风速&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> col_num,headers <span class="keyword">in</span> <span class="built_in">enumerate</span>(headers):</span><br><span class="line">        worksheet.write(<span class="number">0</span>,col_num,headers)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        <span class="built_in">print</span>(date[i].get_text()+<span class="string">&#x27;\t&#x27;</span>+wendu_low[i].get_text()+<span class="string">&#x27;\t&#x27;</span>+wendu_high[i].get_text()+<span class="string">&#x27;\t&#x27;</span>+tianqi[i].get_text()+<span class="string">&#x27;\t&#x27;</span>+fenxiang[i].get_text()+<span class="string">&#x27;\t&#x27;</span>+fengsu[i].get_text())</span><br><span class="line">        data=[date[i].get_text(),wendu_low[i].get_text()+<span class="string">&#x27;-&#x27;</span>+wendu_high[i].get_text(),tianqi[i].get_text(),fenxiang[i].get_text(),fengsu[i].get_text()]</span><br><span class="line">        <span class="keyword">for</span> col_num,value <span class="keyword">in</span> <span class="built_in">enumerate</span>(data):</span><br><span class="line">            worksheet.write(i+<span class="number">1</span>,col_num,value)</span><br><span class="line">    workbook.close()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;**************开始爬取七日天气**************&#x27;</span>)</span><br><span class="line">    ua = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4421.5 Safari/537.36&#x27;</span>&#125;</span><br><span class="line">    <span class="comment"># 豆瓣电影Top250每页有25部电影，start就是每页电影的开头</span></span><br><span class="line">    url = <span class="string">&quot;https://www.weather.com.cn/weather/101180101.shtml&quot;</span></span><br><span class="line">    html = page_request(url=url, ua=ua)</span><br><span class="line">    page_parse(html=html)</span><br><span class="line">    <span class="comment">#print(&#x27;**************爬取完成**************&#x27;)</span></span><br></pre></td></tr></table></figure><p>分成三个部分</p><blockquote><ol><li>对网页的请求</li><li>解析网页，返回html</li><li>对html进行处理</li></ol></blockquote><p>详细叙述第三部分</p><ol><li><p><code>page_prase方法</code>，首先<code>soup = BeautifulSoup(html, 'lxml')</code>将处理后的html保存在soup里边</p></li><li><p>然后使用<code>soup.select</code>方法将天气，最高最低温度，风速，风向，日期都创建变量进行保存</p></li><li><p>这一部分添加工作表并进行保存</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">workbook= xlsxwriter.Workbook(<span class="string">&#x27;tianqi.xlsx&#x27;</span>)</span><br><span class="line">    <span class="comment">#添加工作表</span></span><br><span class="line">worksheet=workbook.add_worksheet(<span class="string">&#x27;data&#x27;</span>)</span><br><span class="line">headers=[<span class="string">&#x27;日期&#x27;</span>,<span class="string">&#x27;温度&#x27;</span>,<span class="string">&#x27;天气&#x27;</span>,<span class="string">&#x27;风向&#x27;</span>,<span class="string">&#x27;风速&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> col_num,headers <span class="keyword">in</span> <span class="built_in">enumerate</span>(headers):</span><br><span class="line">    worksheet.write(<span class="number">0</span>,col_num,headers)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">                  <span class="built_in">print</span>(date[i].get_text()+<span class="string">&#x27;\t&#x27;</span>+wendu_low[i].get_text()+<span class="string">&#x27;\t&#x27;</span>+wendu_high[i].get_text()+<span class="string">&#x27;\t&#x27;</span>+tianqi[i].get_text()+<span class="string">&#x27;\t&#x27;</span>+fenxiang[i].get_text()+<span class="string">&#x27;\t&#x27;</span>+fengsu[i].get_text())</span><br><span class="line">        data=[date[i].get_text(),wendu_low[i].get_text()+<span class="string">&#x27;-&#x27;</span>+wendu_high[i].get_text(),tianqi[i].get_text(),fenxiang[i].get_text(),fengsu[i].get_text()]</span><br><span class="line">        <span class="keyword">for</span> col_num,value <span class="keyword">in</span> <span class="built_in">enumerate</span>(data):</span><br><span class="line">            worksheet.write(i+<span class="number">1</span>,col_num,value)</span><br></pre></td></tr></table></figure></li><li><p>最后workbook.close()将该工作表进行保存</p></li></ol><h1>创建一个person类，输出hello</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">        <span class="variable language_">self</span>.age = age</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_hello</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Hello, my name is <span class="subst">&#123;self.name&#125;</span> and I am <span class="subst">&#123;self.age&#125;</span> years old.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    person1 = Person(<span class="string">&quot;Alice&quot;</span>, <span class="number">25</span>)</span><br><span class="line">    person1.say_hello()</span><br></pre></td></tr></table></figure><h1>整数列表按奇偶排序，并且从小到大</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">key</span>(<span class="params">list1,list2</span>):</span><br><span class="line">    list3=[]</span><br><span class="line">    list4=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">        <span class="keyword">if</span> i%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">            list3.append(i)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> list2:</span><br><span class="line">        <span class="keyword">if</span> i%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">            list3.append(i)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">        <span class="keyword">if</span> i%<span class="number">2</span>!=<span class="number">0</span>:</span><br><span class="line">            list4.append(i)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> list2:</span><br><span class="line">        <span class="keyword">if</span> i%<span class="number">2</span>!=<span class="number">0</span>:</span><br><span class="line">            list4.append(i)</span><br><span class="line">    list3=<span class="built_in">sorted</span>(list3)</span><br><span class="line">    list4=<span class="built_in">sorted</span>(list4)</span><br><span class="line">    <span class="built_in">print</span>(list4+list3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    list1=[<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">22</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">20</span>,<span class="number">25</span>,<span class="number">24</span>,<span class="number">99</span>]</span><br><span class="line">    list2=[<span class="number">111</span>,<span class="number">112</span>,<span class="number">113</span>,<span class="number">114</span>,<span class="number">115</span>,<span class="number">116</span>,<span class="number">117</span>]</span><br><span class="line">    key(list1,list2)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>列表和元组的区别</h1><p>列表（<code>list</code>）和元组（<code>tuple</code>）是 Python 中两种常用的数据结构，它们之间有以下几个主要区别：</p><h3 id="1-可变性">1. <strong>可变性</strong></h3><ul><li><p><strong>列表（List）</strong><br>列表是可变的，可以修改元素的值、添加元素或删除元素。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python复制代码lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">lst[<span class="number">0</span>] = <span class="number">10</span>  <span class="comment"># 修改元素</span></span><br><span class="line">lst.append(<span class="number">4</span>)  <span class="comment"># 添加元素</span></span><br><span class="line">lst.remove(<span class="number">2</span>)  <span class="comment"># 删除元素</span></span><br><span class="line"><span class="built_in">print</span>(lst)  <span class="comment"># [10, 3, 4]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>元组（Tuple）</strong><br>元组是不可变的，一旦创建，不能修改其元素或结构。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python复制代码tpl = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># tpl[0] = 10  # 会报错：TypeError: &#x27;tuple&#x27; object does not support item assignment</span></span><br><span class="line"><span class="built_in">print</span>(tpl)  <span class="comment"># (1, 2, 3)</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-性能">2. <strong>性能</strong></h3><ul><li>元组因为不可变，所以在创建和访问时的性能通常比列表更高。</li><li>如果需要处理大量不变的数据，使用元组更高效。</li></ul><h3 id="3-用途">3. <strong>用途</strong></h3><ul><li>列表更适合需要频繁修改数据的场景。</li><li>元组更适合表示不可变的数据（如坐标、数据库记录）或作为函数返回多个值的容器。</li></ul><h3 id="4-语法">4. <strong>语法</strong></h3><ul><li><p>列表使用方括号</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[]</span><br></pre></td></tr></table></figure><p>表示。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">复制代码</span><br><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure></li><li><p>元组使用圆括号</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">()</span><br></pre></td></tr></table></figure><p>表示。如果元组只有一个元素，需加逗号。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python复制代码tpl = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">single_tpl = (<span class="number">1</span>,)  <span class="comment"># 单元素元组</span></span><br></pre></td></tr></table></figure></li></ul><h1>异常+ZeroDivisionError</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#解释python中的异常处理机制</span></span><br><span class="line"><span class="comment"># 1. 异常处理机制</span></span><br><span class="line"><span class="comment"># 在程序运行的过程中，可能会出现各种各样的异常，比如输入错误、文件操作失败等等。如果不对这些异常进行处理，程序将会终止运行，并给出错误提示。</span></span><br><span class="line"><span class="comment"># 为了避免程序终止运行，我们需要对可能出现的异常进行处理，并给出合适的提示信息。</span></span><br><span class="line"><span class="comment"># Python中提供了try...except...finally语句来处理异常。</span></span><br><span class="line"><span class="comment"># try语句用来包含可能出现异常的语句，except语句用来处理异常，finally语句用来执行一些清理工作，无论是否出现异常都会执行。</span></span><br><span class="line"><span class="comment">#演示代码如何捕获并处理ZeroDivisionError异常：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a = <span class="number">1</span> / <span class="number">0</span></span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;division by zero!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行上述代码，将会输出&quot;division by zero!&quot;，说明程序正常运行，并捕获到了ZeroDivisionError异常。</span></span><br></pre></td></tr></table></figure><h1>画图</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> gridspec</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义函数 y = e^(2x) * cos(3πx + π/3)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> np.exp(<span class="number">2</span> * x) * np.cos(<span class="number">3</span> * np.pi * x + np.pi / <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 x 的范围</span></span><br><span class="line">x_range = np.linspace(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建图形，设置自定义布局</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">8</span>, <span class="number">12</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 gridspec 设置布局</span></span><br><span class="line">gs = gridspec.GridSpec(<span class="number">2</span>, <span class="number">1</span>, height_ratios=[<span class="number">2</span>, <span class="number">1</span>])  <span class="comment"># 上方大图占2/3, 下方小图占1/3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建子图1：步长 0.2</span></span><br><span class="line">ax1 = plt.subplot(gs[<span class="number">0</span>])  <span class="comment"># 上面的大图</span></span><br><span class="line">x1 = np.arange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">0.2</span>)</span><br><span class="line">y1 = f(x1)</span><br><span class="line">ax1.plot(x1, y1, label=<span class="string">&#x27;Step = 0.2&#x27;</span>, color=<span class="string">&#x27;b&#x27;</span>, linestyle=<span class="string">&#x27;-&#x27;</span>, marker=<span class="string">&#x27;o&#x27;</span>)</span><br><span class="line">ax1.set_title(<span class="string">&#x27;Step Size = 0.2&#x27;</span>)</span><br><span class="line">ax1.set_xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">ax1.set_ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">ax1.grid(<span class="literal">True</span>)</span><br><span class="line">ax1.legend()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建子图2和子图3：分别为步长 0.5 和 0.7，放在底部</span></span><br><span class="line">gs2 = gridspec.GridSpecFromSubplotSpec(<span class="number">1</span>, <span class="number">2</span>, subplot_spec=gs[<span class="number">1</span>])  <span class="comment"># 在底部创建两个子图</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 子图2：步长 0.5</span></span><br><span class="line">ax2 = plt.subplot(gs2[<span class="number">0</span>])</span><br><span class="line">x2 = np.arange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">0.5</span>)</span><br><span class="line">y2 = f(x2)</span><br><span class="line">ax2.plot(x2, y2, label=<span class="string">&#x27;Step = 0.5&#x27;</span>, color=<span class="string">&#x27;g&#x27;</span>, linestyle=<span class="string">&#x27;--&#x27;</span>, marker=<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">ax2.set_title(<span class="string">&#x27;Step Size = 0.5&#x27;</span>)</span><br><span class="line">ax2.set_xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">ax2.set_ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">ax2.grid(<span class="literal">True</span>)</span><br><span class="line">ax2.legend()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 步长 0.7</span></span><br><span class="line">ax3 = plt.subplot(gs2[<span class="number">1</span>])</span><br><span class="line">x3 = np.arange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">0.7</span>)</span><br><span class="line">y3 = f(x3)</span><br><span class="line">ax3.plot(x3, y3, label=<span class="string">&#x27;Step = 0.7&#x27;</span>, color=<span class="string">&#x27;r&#x27;</span>, linestyle=<span class="string">&#x27;-.&#x27;</span>, marker=<span class="string">&#x27;s&#x27;</span>)</span><br><span class="line">ax3.set_title(<span class="string">&#x27;Step Size = 0.7&#x27;</span>)</span><br><span class="line">ax3.set_xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">ax3.set_ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">ax3.grid(<span class="literal">True</span>)</span><br><span class="line">ax3.legend()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调整布局</span></span><br><span class="line">plt.tight_layout()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示图形</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1>数据分析</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">df=pd.read_excel(<span class="string">&#x27;sales.xlsx&#x27;</span>,parse_dates=[<span class="string">&#x27;date&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df.head())</span><br><span class="line"><span class="comment"># 按店铺分组并计算销售和利润的总和</span></span><br><span class="line">store_sales=df.groupby(<span class="string">&quot;store&quot;</span>)[[<span class="string">&quot;sales&quot;</span>,<span class="string">&quot;profit&quot;</span>]].<span class="built_in">sum</span>()</span><br><span class="line"><span class="built_in">print</span>(store_sales)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制柱状图</span></span><br><span class="line"><span class="comment"># 筛选出销售额大于200的记录</span></span><br><span class="line">high_sales=df[df[<span class="string">&quot;sales&quot;</span>]&gt;<span class="number">200</span>]</span><br><span class="line"><span class="built_in">print</span>(high_sales)</span><br><span class="line"><span class="comment"># 按类别分组并计算利润的平均值</span></span><br><span class="line">category_profit=df.groupby(<span class="string">&quot;category&quot;</span>)[<span class="string">&quot;profit&quot;</span>].mean()</span><br><span class="line"><span class="built_in">print</span>(category_profit)</span><br><span class="line"><span class="comment"># 绘制各店铺总销售额的柱状图</span></span><br><span class="line">store_sales[<span class="string">&quot;sales&quot;</span>].plot(kind=<span class="string">&quot;bar&quot;</span>,figsize=(<span class="number">10</span>,<span class="number">6</span>),color=<span class="string">&quot;skyblue&quot;</span>)</span><br><span class="line">plt.title(<span class="string">&quot;Total Sales by Store&quot;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;Store&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Total Sales&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>读取数据</li><li>计算销售和利润的总和</li><li>绘制柱状图，筛选出销售额大于200的记录</li><li>计算</li><li>绘制</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;用户图形界面-工资计算器&lt;/h1&gt;
&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/s</summary>
      
    
    
    
    <category term="期末" scheme="https://scanfup.github.io/categories/%E6%9C%9F%E6%9C%AB/"/>
    
    
    <category term="python" scheme="https://scanfup.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>考研知识点</title>
    <link href="https://scanfup.github.io/posts/e5935d82.html"/>
    <id>https://scanfup.github.io/posts/e5935d82.html</id>
    <published>2024-12-24T16:00:00.000Z</published>
    <updated>2024-12-25T11:55:46.405Z</updated>
    
    <content type="html"><![CDATA[<h1>赋分制是个什么东西</h1><p>赋分制的核心是根据考生成绩进行等级划分，并按照等级赋予相应的分数。这一制度的实施，旨在解决传统高考中不同科目之间分数不可比的问题，使不同科目之间的分数具有更强的可比性。</p><h1>考研你都需要知道些什么</h1><p>计算机学科专业基础综合（408）试卷满分150分；考试时间180分钟；</p><p>试卷内容结构：</p><p>数据结构45分，计算机组成原理45分，操作系统35分，<a href="https://zhida.zhihu.com/search?content_id=104724908&amp;content_type=Article&amp;match_order=1&amp;q=%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C&amp;zhida_source=entity">计算机网络</a>25分；</p><p>试卷题型结构：单项选择题，80分（40小题，每小题2分）；综合题，70分；</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;赋分制是个什么东西&lt;/h1&gt;
&lt;p&gt;赋分制的核心是根据考生成绩进行等级划分，并按照等级赋予相应的分数。这一制度的实施，旨在解决传统高考中不同科目之间分数不可比的问题，使不同科目之间的分数具有更强的可比性。&lt;/p&gt;
&lt;h1&gt;考研你都需要知道些什么&lt;/h1&gt;
&lt;p&gt;计算机学科</summary>
      
    
    
    
    <category term="考研" scheme="https://scanfup.github.io/categories/%E8%80%83%E7%A0%94/"/>
    
    
    <category term="考研" scheme="https://scanfup.github.io/tags/%E8%80%83%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>高等数学</title>
    <link href="https://scanfup.github.io/posts/93e4730e.html"/>
    <id>https://scanfup.github.io/posts/93e4730e.html</id>
    <published>2024-12-24T16:00:00.000Z</published>
    <updated>2024-12-26T08:54:07.572Z</updated>
    
    <content type="html"><![CDATA[<h1>求导</h1><p><img src="https://files.catbox.moe/tr3pzu.jpg" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;求导&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://files.catbox.moe/tr3pzu.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="考研" scheme="https://scanfup.github.io/tags/%E8%80%83%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>概率论数理统计</title>
    <link href="https://scanfup.github.io/posts/7024e655.html"/>
    <id>https://scanfup.github.io/posts/7024e655.html</id>
    <published>2024-12-24T13:48:00.000Z</published>
    <updated>2025-01-05T11:52:01.895Z</updated>
    
    <content type="html"><![CDATA[<h1>随机变量的数字特征</h1><p><img src="https://files.catbox.moe/r0u0gr.jpg" alt=""></p><p><img src="https://files.catbox.moe/mrt3b2.jpg" alt=""></p><h1>数理统计三大分布</h1><p>三大分布之间是一个相关的关系</p><p><img src="https://files.catbox.moe/lc2gn9.png" alt=""></p><h2 id="卡方分布">卡方分布</h2><p><strong>n个标准正态分布的平方和</strong></p><p><img src="https://files.catbox.moe/18hrvv.png" alt=""></p><h2 id="t分布">t分布</h2><p><img src="https://files.catbox.moe/j81xcc.png" alt=""></p><h1>参数估计</h1><h2 id="置信区间">置信区间</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/7cf5f08d5b6acbe7a686a06a9c76081.png" alt="7cf5f08d5b6acbe7a686a06a9c76081"></p><h2 id="假设检验">假设检验</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/610b244ca831f1852e693cb9ffd2a36.png" alt="610b244ca831f1852e693cb9ffd2a36"></p><h2 id="矩估计">矩估计</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/6dfc32738db1e09a19eb2dfad493194.png" alt="6dfc32738db1e09a19eb2dfad493194"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;随机变量的数字特征&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://files.catbox.moe/r0u0gr.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://files.catbox.moe/mrt3b2.jpg&quot; alt=&quot;&quot;&gt;&lt;/</summary>
      
    
    
    
    <category term="考研" scheme="https://scanfup.github.io/categories/%E8%80%83%E7%A0%94/"/>
    
    
    <category term="概率论数理统计" scheme="https://scanfup.github.io/tags/%E6%A6%82%E7%8E%87%E8%AE%BA%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/"/>
    
  </entry>
  
</feed>
