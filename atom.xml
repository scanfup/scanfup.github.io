<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>shix🍭</title>
  
  
  <link href="https://scanfup.github.io/atom.xml" rel="self"/>
  
  <link href="https://scanfup.github.io/"/>
  <updated>2025-01-26T14:17:49.577Z</updated>
  <id>https://scanfup.github.io/</id>
  
  <author>
    <name>shix</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://scanfup.github.io/posts/0.html"/>
    <id>https://scanfup.github.io/posts/0.html</id>
    <published>2025-01-21T12:49:02.897Z</published>
    <updated>2025-01-26T14:17:49.577Z</updated>
    
    <content type="html"><![CDATA[<ul><li>ut：时间戳</li><li>sign：签名认证，一般情况多数加密参数存在</li></ul><p>正则一般是如何提取的，有什么技巧i</p><h1>看源码</h1><p>首先看一下源码，发现源码中没有任何信息，那么就看一下网络请求</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;ut：时间戳&lt;/li&gt;
&lt;li&gt;sign：签名认证，一般情况多数加密参数存在&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;正则一般是如何提取的，有什么技巧i&lt;/p&gt;
&lt;h1&gt;看源码&lt;/h1&gt;
&lt;p&gt;首先看一下源码，发现源码中没有任何信息，那么就看一下网络请求&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://scanfup.github.io/posts/0.html"/>
    <id>https://scanfup.github.io/posts/0.html</id>
    <published>2025-01-20T03:52:13.493Z</published>
    <updated>2025-01-26T14:17:49.567Z</updated>
    
    <content type="html"><![CDATA[<p>无论是原型对象和实例对象都有 __ proto__</p><p>原型对象有  prototype</p><p>a.prototype  如果不是undefined  就说明a对象 是原型对象</p><p>原型对象和实例对象的函数  this 指向不同</p><p>实例对象</p><p>function a(){</p><p>​console.log(this)</p><p>}</p><p>谁调用 this就指向谁</p><p>原型对象</p><p>function pro(){</p><p>​this.a =1</p><p>}</p><p>var  aaa = new pro()  this指向的是原型对象的实例对象  也就是aaa</p><p>其中 pro 就是原型对象</p><p>构造函数的属性和原型对象的属性不同</p><p>对象._ _ proto_ _ 就是找这个对象的父对象</p><p>aaa._ <em>proto</em>___ 就是 原型对象</p><p>最底层就是object</p><p>object.__ pooto__  就是null了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;无论是原型对象和实例对象都有 __ proto__&lt;/p&gt;
&lt;p&gt;原型对象有  prototype&lt;/p&gt;
&lt;p&gt;a.prototype  如果不是undefined  就说明a对象 是原型对象&lt;/p&gt;
&lt;p&gt;原型对象和实例对象的函数  this 指向不同&lt;/p&gt;
&lt;p&gt;实</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://scanfup.github.io/posts/0.html"/>
    <id>https://scanfup.github.io/posts/0.html</id>
    <published>2025-01-20T03:52:13.493Z</published>
    <updated>2025-01-26T14:17:49.575Z</updated>
    
    <content type="html"><![CDATA[<p>js逆向的过程</p><p>抓包—调试----脱离浏览器环境（让浏览器的js代码在本地运行）  本地环境（node.js 封装的V8引擎）</p><h1>Object.defineProperty()</h1><p>静态方法会直接在一个对象上定义一个新属性，或修改其现有属性，并返回此对象。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen"><code>Object.isFrozen()</code></a></p><p>判断对象是否已经冻结。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed"><code>Object.isSealed()</code></a></p><p>判断对象是否已经封闭。</p><p>weixin.code   是小程序  的code  是 app生成的  没办法逆向出来  只能第三方做的hook</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;js逆向的过程&lt;/p&gt;
&lt;p&gt;抓包—调试----脱离浏览器环境（让浏览器的js代码在本地运行）  本地环境（node.js 封装的V8引擎）&lt;/p&gt;
&lt;h1&gt;Object.defineProperty()&lt;/h1&gt;
&lt;p&gt;静态方法会直接在一个对象上定义一个新属性，或修改其现</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://scanfup.github.io/posts/0.html"/>
    <id>https://scanfup.github.io/posts/0.html</id>
    <published>2025-01-20T03:52:13.493Z</published>
    <updated>2025-01-26T14:17:49.576Z</updated>
    
    <content type="html"><![CDATA[<h1>网络协议：</h1><h2 id="TCP">TCP</h2><p>安全</p><p>速度慢</p><p>《三次握手》</p><p>1、客户端找到服务器 ：我来了！</p><p>2、服务器 找到客户端： 你确定来了？</p><p>3、客户端再发给服务器：我确定我来了</p><p>网站基本都是走的TCP协议</p><h2 id="UDP">UDP</h2><p>不能保证数据完整性</p><p>速度快</p><p>TCP和UDP 都是底层协议，我们是管不了的</p><p>我们能处理的就是 顶层协议</p><h2 id="顶层协议">顶层协议</h2><p>由开发这个软件的开发者开发的协议</p><p>协议：我怎么样告诉你我是谁，以及我怎么告诉你数据的格式</p><p>HTTP  HTTPS</p><p>FTP  发文件的协议</p><p>SMTP  POP3  发邮件的协议</p><p>MQTT</p><p>HTTP 80端口 ——&gt; https 443端口</p><p><a href="HTTPS://hao.360.com">HTTPS://hao.360.com</a></p><p>https 协议</p><p><a href="http://360.com">360.com</a> 主域名</p><p><a href="http://hao.360.com">hao.360.com</a> 二级域名  ip地址  一个域名对应一个ip地址</p><h3 id="http-https-send">http    -&gt; https    send</h3><p>请求头</p><p>请求体</p><p>响应头</p><p>响应体</p><h3 id="websocket-websockets">websocket -&gt; websockets</h3><p>new websocket  创建websocket的位置</p><p>测试网址  <a href="http://www.websocket-test.com/">http://www.websocket-test.com/</a></p><p><img src="C:%5CUsers%5Chp%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230810172032425.png" alt="image-20230810172032425"></p><p>Status Code: 101 Switching Protocols</p><p>请求头（以下都是不能删除的）</p><ol><li>Connection: Upgrade  #代表协议升级</li><li>Host: 124.222.224.186:8800</li><li>Origin: <a href="http://www.websocket-test.com">http://www.websocket-test.com</a></li><li>Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits</li><li>Sec-WebSocket-Key: pjJ9hSUw3F+RVRsXlRz5Ow==  #升级加密的key 由客户端随机生成</li><li>Sec-WebSocket-Version: 13 #升级到什么版本</li><li>Upgrade: websocket #升级成什么协议</li><li>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64)AppleWebKit/537.36 (KHTML, like Gecko)Chrome/95.0.4638.69 Safari/537.36</li></ol><p>messages： 看发了什么信息的</p><p>虽然 此网站 显示 是明文，但是其实可以发好几种数据，</p><p>可发的数据类型 ：字节集    string   一般直接认为是字节集</p><p>websocket 是一次请求一直连接  而 http是一次请求一次连接</p><p>http  短连接</p><p>websocket  长连接</p><p>抓包 只看 三类  XHR  WS   document</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;网络协议：&lt;/h1&gt;
&lt;h2 id=&quot;TCP&quot;&gt;TCP&lt;/h2&gt;
&lt;p&gt;安全&lt;/p&gt;
&lt;p&gt;速度慢&lt;/p&gt;
&lt;p&gt;《三次握手》&lt;/p&gt;
&lt;p&gt;1、客户端找到服务器 ：我来了！&lt;/p&gt;
&lt;p&gt;2、服务器 找到客户端： 你确定来了？&lt;/p&gt;
&lt;p&gt;3、客户端再发给服务器：我确</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://scanfup.github.io/posts/0.html"/>
    <id>https://scanfup.github.io/posts/0.html</id>
    <published>2025-01-19T05:21:21.624Z</published>
    <updated>2025-01-26T14:17:49.578Z</updated>
    
    <content type="html"><![CDATA[<p>编辑器： 秀米 135编辑器 壹伴编辑器（推荐）</p><p>正文：15，中文细体 两端缩进16</p><p>封面制作：canva,创客贴</p><p>图片：https;<a href="//www.pexels.com/zh-cn/(%E5%9B%BE%E7%89%87%E5%85%B3%E9%94%AE%E5%AD%97%E5%AF%BB%E6%89%BE)">//www.pexels.com/zh-cn/(图片关键字寻找)</a></p><p>寻找文案灵感：顶尖文案（TOPYS） 清博大数据（分析） 、 微博热搜</p><p>涨粉：受众身边</p><p>变现：流量主：500人粉丝 推</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;编辑器： 秀米 135编辑器 壹伴编辑器（推荐）&lt;/p&gt;
&lt;p&gt;正文：15，中文细体 两端缩进16&lt;/p&gt;
&lt;p&gt;封面制作：canva,创客贴&lt;/p&gt;
&lt;p&gt;图片：https;&lt;a href=&quot;//www.pexels.com/zh-cn/(%E5%9B%BE%E7%89%</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>做饭</title>
    <link href="https://scanfup.github.io/posts/7414cfa6.html"/>
    <id>https://scanfup.github.io/posts/7414cfa6.html</id>
    <published>2025-01-18T04:04:00.000Z</published>
    <updated>2025-01-18T04:04:52.371Z</updated>
    
    <content type="html"><![CDATA[<p><strong>基本就是调料最后放，然后酱油可以放两次，开锅前一次，然后其他调料都是后放，先盐，再糖，味精</strong></p><h1>各种醋的用法</h1><ul><li><p>陈醋：酸味浓郁，稳定性比较好，适用于制作焖，炖，烧</p></li><li><p>香醋：酸而不涩，不适合长时间的加热，多用于凉菜，蘸汁，调汤</p></li><li><p>白醋：以食用酒精为原料，无色，味道单纯，酸度不高</p></li><li><p>米醋：香气纯正，酸味柔和，无所不用</p></li></ul><h1>酱油</h1><ul><li><strong>生抽</strong>：味道鲜美，咸味适中，同时具有独特的酱香味，口感相对清爽。</li><li><strong>老抽</strong>：相比生抽，老抽的咸味稍重一些，酱香更加浓郁醇厚，还带有一点甜味。</li></ul><h1>示例</h1><h2 id="一、番茄炒鸡蛋">一、番茄炒鸡蛋</h2><p>00:30</p><p>**番茄🍅：**可以买普罗旺斯、铁皮，一般软的更好，铁皮是青的比红的甜</p><p>1.番茄对半切去掉蒂头，一颗番茄切大块，一颗番茄切小丁</p><p><img src="https://i0.hdslb.com/bfs/note/842e83d83c14eee2cd70438535eab42dc61bb628.jpg@690w_!web-note.webp" alt="img"></p><p>2.把鸡蛋打进碗里（5个，上不封顶）</p><p>3.在鸡蛋的碗里加入盐，搅散</p><p>4.往锅里加入宽油（多油），开最大火，等油热，再把鸡蛋下锅，蛋液凝固后捞出，锅里留一点油</p><p>5.用留的油炒蒜末和番茄丁，中火慢慢炒，超出汁水</p><p>6.下入大块番茄，炒2分钟炒软</p><p>7.鸡蛋再次下锅</p><p>8.加调味，翻炒均匀</p><p><img src="https://i0.hdslb.com/bfs/note/add100f707207dce67a962c28e9380c07f92c6fb.jpg@690w_!web-note.webp" alt="img"></p><p><img src="https://i0.hdslb.com/bfs/note/88116291fbc2415933798410c41345b65233fd5d.jpg@690w_!web-note.webp" alt="img"></p><h2 id="二、炒青菜">二、炒青菜</h2><p>01:53</p><p><img src="https://i0.hdslb.com/bfs/note/a4e91aa66b1f279c9fb223860cce0122c5a449b2.jpg@690w_!web-note.webp" alt="img"></p><p>这里用的是上海青🥬（广义上的绿叶菜）</p><ol><li>青菜清洗干净（尤其是根部）</li><li>把青菜菜心最厚的地方切掉，甩干水分</li><li>起锅烧火，大火化开猪油，有香味后下入青菜，大火炒3分钟至软化</li><li>调味，炒匀出锅</li></ol><p><img src="https://i0.hdslb.com/bfs/note/55a2d5a25ea7e649d9cab6b17643beb675430789.jpg@690w_!web-note.webp" alt="img"></p><p><img src="https://i0.hdslb.com/bfs/note/c07b6fb324ad6f854430e83ab131b099b4136e43.jpg@690w_!web-note.webp" alt="img"></p><h2 id="三、炒土豆丝">三、炒土豆丝</h2><p>02:52</p><p><img src="https://i0.hdslb.com/bfs/note/099e7d37b6cb8309631bcfd85ce96e4332cea26c.jpg@690w_!web-note.webp" alt="img"></p><ol><li>土豆去皮，擦丝，用清水清洗</li><li>开最大🔥，倒一点油，20秒后放入蒜末、干辣椒段，拨弄几下，下入土豆丝炒1分钟</li><li>加调味（如图），翻炒30秒</li><li>出锅前淋香油，撒小葱</li></ol><p><img src="https://i0.hdslb.com/bfs/note/ccac7ced0570fed28ec6b2f517b13a35e6a89572.jpg@690w_!web-note.webp" alt="img"></p><h2 id="四、水蒸蛋">四、水蒸蛋</h2><p>03:50</p><ol><li>打3个鸡蛋，加9个蛋壳的水（用蛋壳装水） 比例是1:1.5</li><li>往鸡蛋里加一勺盐，再打鸡蛋搅匀，撇掉表面泡泡，盖一层保鲜膜，戳排气孔</li><li>烧锅水，放锅里蒸9分钟（中途不可以开盖）</li></ol><p><img src="https://i0.hdslb.com/bfs/note/2753d1d915d20a5363109584bc2826c0142dd226.jpg@690w_!web-note.webp" alt="img"></p><p>吃法：划几刀，浇上豉油、酱油</p><p><img src="https://i0.hdslb.com/bfs/note/bd41c803ecd9137bf8b8a6fa729ba9c148b6d4ba.jpg@690w_!web-note.webp" alt="img"></p><h2 id="五、可乐鸡翅">五、可乐鸡翅</h2><p>04:40</p><p><img src="https://i0.hdslb.com/bfs/note/b2d3c49f557065e1fa7ae9d981a32c13349912c3.jpg@690w_!web-note.webp" alt="img"></p><ol><li>锅里加少量油，开中火煎鸡翅</li><li>煎到微微焦黄，倒入普通含糖可乐没过鸡翅</li><li>加调味，大火收汁，直到浓稠</li></ol><p><img src="https://i0.hdslb.com/bfs/note/5beb88fa6b10f0adb9eca8790ffb63774e4855fe.jpg@690w_!web-note.webp" alt="img"></p><h2 id="六、肉末粉丝">六、肉末粉丝</h2><p>05:46</p><ol><li>把红薯粉条泡开</li><li>切猪肉末</li><li>准备姜末、蒜末、小米辣、香菜、葱</li><li>锅里加油，开大火炒香姜末、蒜末、小米辣、猪肉末，加入2勺豆瓣酱，炒出红油</li><li>翻炒到肉末散开，下入粉条，翻动炒软</li><li>加调味，炒到粉条完全透明</li><li>出锅前撒一把葱花、香菜</li></ol><p><img src="https://i0.hdslb.com/bfs/note/66d6e65a5f1a1cfdafb526c1fc9afdc086057dca.jpg@690w_!web-note.webp" alt="img"></p><p><img src="https://i0.hdslb.com/bfs/note/6839a973122075bc2f273c6047719b47813aa141.jpg@690w_!web-note.webp" alt="img"></p><h2 id="七、辣椒炒肉">七、辣椒炒肉</h2><p>06:49</p><p>辣椒：选择螺丝椒、皱皮椒</p><p>猪肉：选择带点肥肉的（烧烤肉片就可以）</p><p><img src="https://i0.hdslb.com/bfs/note/6e93ddf39d69f3a547142e6e8f7348bc7a3ab2b4.jpg@690w_!web-note.webp" alt="img"></p><ol><li>把辣椒的蒂头拔掉，去掉辣椒籽</li><li>把辣椒压扁，切小段</li><li>猪肉加调味⬆️，抓匀，腌制</li><li>开中火，不加油，干烤辣椒，用铲子压，烤出虎皮，盛出备用</li><li>锅里加油，开大火煎肉片</li><li>往锅里加入蒜末、豆豉、辣椒</li><li>加调味，炒匀出锅</li></ol><p><img src="https://i0.hdslb.com/bfs/note/8d7c3a47616aa9119725153b8654449d8906d01f.jpg@690w_!web-note.webp" alt="img"></p><p><img src="https://i0.hdslb.com/bfs/note/e2fd3f6a48cc2ff6a8974061b4187ebf1589e611.jpg@690w_!web-note.webp" alt="img"></p><h2 id="八、白灼虾">八、白灼虾</h2><p>08:10</p><p>煮的版本⬇️</p><ol><li>剪掉虾腿，用活瞎</li><li>冷水加入姜片和料酒</li><li>等水烧开放虾，等水重新沸腾后煮一分钟，关火泡一分钟</li></ol><p>蒸的版本⬇️</p><ol><li>冷水加料酒、姜片，烧水</li><li>加上蒸笼，蒸笼放上葱姜，再放虾</li><li>保持大火冒蒸汽状态蒸5分钟，单独把虾拿出来装盘，不要水</li></ol><p>调料汁：2勺姜末、2勺蒜末，泼热油，加水蒸鱼豉油、一把葱花</p><p><img src="https://i0.hdslb.com/bfs/note/d2ca9b2c52293c6cbe5126927c5f59afe124e015.jpg@690w_!web-note.webp" alt="img"></p><h2 id="九、煮饭">九、煮饭</h2><p>00:20</p><ol><li>淘米（洗掉生米表面的淀粉）-&gt;打圈淘洗 至半浑浊</li></ol><p><img src="https://i0.hdslb.com/bfs/note/4404507a4178857dc34dae54943561a7469d1697.jpg@690w_!web-note.webp" alt="img"></p><p>2.加水到合适水量</p><p>3.陈米加一勺油、米醋</p><h2 id="十、韭菜炒蛋">十、韭菜炒蛋</h2><p>01:03</p><ol><li>韭菜清洗，切段</li><li>打鸡蛋，打散，不加盐</li><li>起锅烧油，可以稍微多一些油，中火炒蛋（轻轻推炒）</li><li>看不到明显鸡蛋液体，下入韭菜快速翻炒至断生</li><li>韭菜绿色变深的时候抓紧撒盐、味精调味，翻拌均匀快速出锅</li></ol><p><img src="https://i0.hdslb.com/bfs/note/f07a63e920815569a2a2df3a6b267e56befeb556.jpg@690w_!web-note.webp" alt="img"></p><h2 id="十一、手撕包菜">十一、手撕包菜</h2><p>02:01</p><ol><li>清洗包菜/牛心菜，切掉根部，手撕成大片</li><li>切五花肉片</li><li>锅里加油煎五花肉</li><li>调成最大🔥，下入蒜末、干辣椒、花椒、1勺生抽酱油</li><li>水汽蒸发完，下入包菜炒软</li><li>加盐、味精</li></ol><p><img src="https://i0.hdslb.com/bfs/note/70ff79441fd1422de9c2558f5f91bce069c336c0.jpg@690w_!web-note.webp" alt="img"></p><h2 id="十二、青椒肉丝">十二、青椒肉丝</h2><p>02:55</p><ol><li>螺丝椒或皱皮椒洗净，梗往里推再往外拽，去掉辣椒籽，切丝或圈</li><li>切肉丝，调味抓匀腌制5分钟–1勺生抽、1勺老抽、1勺黄酒、2勺淀粉</li><li>起锅烧火，大火🔥多加油，冷油下肉丝，把肉丝滑散，炒到变色散开出锅</li><li>锅里剩余油爆香大蒜末、青椒，炒两分钟断生</li><li>肉丝下锅，加盐、味精调味</li></ol><p><img src="https://i0.hdslb.com/bfs/note/590b169eca1d4447cfb868a56dfe1384a2d3ad21.jpg@690w_!web-note.webp" alt="img"></p><h2 id="十三、白切肉">十三、白切肉</h2><p>04:00</p><ol><li>选择五花肉/梅花肉/松板肉/肋条肉（带点肥肉的）</li><li>焯水：一锅冷水，加入姜片、黄酒、肉，中小火慢慢加热，把水煮开，撇掉浮末</li><li>盖盖中火炖1小时</li><li>可以直接吃，或者配个蒜汁(蒜泥1勺、葱花1勺、豉油4勺）用生菜叶子包着吃</li></ol><p><img src="https://i0.hdslb.com/bfs/note/cb8eff27ec407ee50b68c146d4096c9232ade404.jpg@690w_!web-note.webp" alt="img"></p><h2 id="十四、红烧肉">十四、红烧肉</h2><p>05:00</p><ol><li><p>锅里加入冷水、黄酒、姜片、五花肉，焯水，水开把肉取出切大肉块</p></li><li><p>炒糖色</p><p>05:30</p><p>中火，锅里倒油，加入一大把冰糖或砂糖 炒2分钟</p></li><li><p>糖色到<strong>红棕色</strong>5分钟的时候，下入肉块（尽量颜色不要太深</p></li><li><p>往锅里加入一圈生抽、黄酒，炒0.5-2分钟</p></li><li><p>加水漫过食材，加入1-2颗八角、1根桂皮、3片香叶、3片姜，盖上盖子炖2小时（或者高压锅1小时）</p></li><li><p>开盖，大火收汁</p></li></ol><p><img src="https://i0.hdslb.com/bfs/note/262dd0885c50a77167c55fd1133ad77f41a38d71.jpg@690w_!web-note.webp" alt="img"></p><h2 id="十五、糖醋排骨">十五、糖醋排骨</h2><p>06:36</p><ol><li>一锅冷水，加入黄酒、姜片、排骨，中火烧开，把排骨取出晾干</li><li>起锅烧油，🔥中火，加一大把冰糖，颜色到<strong>金黄</strong>就可以下排骨（糖如果不够后面可以补一点）</li><li>加入3勺生抽、1勺黄酒、5勺陈醋、适量糖，漫过食材的水、1颗八角、1根桂皮、3片香叶、3片姜，盖盖炖50分钟</li><li>开盖，大火收汁</li><li>补一圈白醋增加酸度（或者用柠檬、青梅、山楂、菠萝等）</li></ol><p><img src="https://i0.hdslb.com/bfs/note/b2a7570248ea20e1c49cee3363ecdb824a637336.jpg@690w_!web-note.webp" alt="img"></p><h2 id="十六、鱼汤">十六、鱼汤</h2><p>09:02</p><ol><li>鲢鱼/鲫鱼，去掉🐟的淤血和黑膜（用钢丝球）</li><li>切2-4片姜片</li><li>锅里加入多油，煎鱼的一面到焦黄定型了再翻面【或者使劲翻炒至碎碎，炒酥了再加水炖10分钟，漏掉鱼渣】</li><li>加入滚烫开水（刚烧开的）</li><li>加入1勺米酒、姜片</li><li>保持沸腾状态，盖盖炖20分钟</li><li>出锅前，加入盐、白胡椒、葱花</li></ol><p><img src="https://i0.hdslb.com/bfs/note/add6703e39631c7fc35f34dedc6fedc95917423a.jpg@690w_!web-note.webp" alt="img"></p><h2 id="十七、香菇土豆炖鸡块">十七、香菇土豆炖鸡块</h2><p><img src="https://i0.hdslb.com/bfs/note/bf5ae5736abdf94850a328392ebda65eefe29a23.jpg@734w_!web-note.webp" alt="img"></p><p><img src="https://i0.hdslb.com/bfs/note/1def8a34854c6351f8fe99942dc35988ffea2555.jpg@734w_!web-note.webp" alt="img"></p><p><img src="https://i0.hdslb.com/bfs/note/cf8c9007886cb223a63c8f9ea3faf0bc93892644.jpg@734w_!web-note.webp" alt="img"></p><p>第1步，先准备两个鸡腿，把鸡腿清洗干净，剁成小块状，也可以直接让店家剁成小块，然后放进清水中加入葱姜，料酒，把鸡块儿焯水，然后捞出清洗干净备用。</p><p>第2步，锅中放油，等油热了之后，加入花椒，八角，辣椒炒出香味，再把鸡肉块放进去，充分的翻炒均匀，加入两勺生抽，一勺老抽，适量食盐，再加入一点点料酒，加入姜片和适量葱盖上盖子用大火煮开，煮开了之后再转中火炖10~15分钟。</p><p>第3步，准备一个土豆去皮，滚刀切块，胡萝卜也清洗干净，滚到切块儿，准备适量喜欢吃的丸子，也可以不用加。</p><p>第4步，然后把准备好的土豆，胡萝卜和丸子全都加进去炖煮，等煮熟煮透了，再用大火收汁，最后撒上适量的葱花或者是香菜，就可以出锅了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;基本就是调料最后放，然后酱油可以放两次，开锅前一次，然后其他调料都是后放，先盐，再糖，味精&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;各种醋的用法&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;陈醋：酸味浓郁，稳定性比较好，适用于制作焖，炖，烧&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
</summary>
      
    
    
    
    <category term="吃" scheme="https://scanfup.github.io/categories/%E5%90%83/"/>
    
    
    <category term="家庭小灶" scheme="https://scanfup.github.io/tags/%E5%AE%B6%E5%BA%AD%E5%B0%8F%E7%81%B6/"/>
    
  </entry>
  
  <entry>
    <title>js逆向</title>
    <link href="https://scanfup.github.io/posts/e8768110.html"/>
    <id>https://scanfup.github.io/posts/e8768110.html</id>
    <published>2025-01-17T16:00:00.000Z</published>
    <updated>2025-01-27T09:01:17.746Z</updated>
    
    <content type="html"><![CDATA[<h1>js基础</h1><h2 id="js输出">js输出</h2><ul><li>使用window.alert()弹出警告框</li><li>使用document.write()方法将内容写到html文档中</li><li>使用innerHTML写入到html元素</li><li>使用console.log()写入到浏览器的控制台</li></ul><h2 id="正则表达式">正则表达式</h2><ul><li><strong>search()</strong> 方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并返回子串的起始位置。</li><li><strong>replace()</strong> 方法用于在字符串中用一些字符串替换另一些字符串，或替换一个与正则表达式匹配的子串</li></ul><h2 id="锁定变量">锁定变量</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250120150738692.png" alt="image-20250120150738692"></p><h2 id="异步">异步</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250121103407055.png" alt="image-20250121103407055"></p><h2 id="平坦流">平坦流</h2><p>打断分析流程</p><p>出现特征<code>warp 或者 u.prev = u.next</code></p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250121104826346.png" alt="image-20250121104826346"></p><p>里边的u.next()是下一次要执行的条件</p><h2 id="eval">eval</h2><p><code>eval</code> 是 JavaScript 中的一个内置函数，用于将字符串作为代码进行解析和执行。它的基本语法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(string);</span><br></pre></td></tr></table></figure><p>DiffCopyInsert</p><p>其中 <code>string</code> 是一个包含 JavaScript 代码的字符串。<code>eval</code> 会将这个字符串作为实际的 JavaScript 代码来执行，并返回执行结果。</p><ol><li><p><strong>基本用法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;console.log(&#x27;Hello, World!&#x27;);&quot;</span>);</span><br></pre></td></tr></table></figure><p>DiffCopyInsert</p><p>这段代码会输出 <code>Hello, World!</code></p></li></ol><h1>js调试</h1><h2 id="123456">123456</h2><p>123456的md5加密<strong>32位</strong></p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250118195541745.png" alt="image-20250118195541745"></p><p>四十位密文的一般为sha1加密</p><h2 id="控制台-搜索">控制台 搜索</h2><p>定位的位置比较准确，搜到的位置比较多，要自己进行筛选，容易搜不到</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250118195922787.png" alt="image-20250118195922787"></p><h2 id="DOM">DOM</h2><p>HTML DOM时间允许JavaScript在THML文档元素中注册不同事件处理程序，事件通常与函数结合使用，函数不会在事件发生前被执行</p><p>dom元素断点</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250120205234901.png" alt="image-20250120205234901"></p><h2 id="断点">断点</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250118205918124.png" alt="image-20250118205918124"></p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250118213753982.png" alt="image-20250118213753982"></p><p><strong>加密的流程大概就是 用户输入明文-&gt;经过了一些方法-&gt;加密函数-&gt;拼装封包-&gt;发包函数-&gt;浏览器的发包函数</strong></p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250120210720373.png" alt="image-20250120210720373"></p><h2 id="寻找合适事件js文件-dom事件">寻找合适事件js文件 dom事件</h2><p>定位的位置比较靠前</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250119125131755.png" alt="image-20250119125131755"></p><p>可以在这里抓包之后打开js</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250120204250207.png" alt="image-20250120204250207"></p><h2 id="XHR断点">XHR断点</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250119162050009.png" alt="image-20250119162050009"></p><p><strong>优点</strong>：定位的位置在发包函数，我们可以跟栈，<strong>缺点</strong>：只能用于XHR的数据包</p><h2 id="watch-变量监控">watch 变量监控</h2><h2 id="本地替换">本地替换</h2><p>本地替换就是使用本地的文件夹，将目标js文件复制到该文件夹并进行替换，用于打断点或者无限debugger</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250124200337388.png" alt="image-20250124200337388"></p><p><img src="C:/Users/%E4%BE%AF%E5%8D%93%E6%9E%97/AppData/Roaming/Typora/typora-user-images/image-20250124203447114.png" alt="image-20250124203447114"></p><h2 id="Fiddler">Fiddler</h2><p>Fiddler是一个抓包工具</p><p>那么既然浏览器可以抓包，那么为什么要用Fiddler呢？</p><p><strong>因为浏览器抓包抓不全，有些包如果同一个url返回一个200返回一个403，那么这时候浏览器为了自身效率，就会自动把这两个包删除，就是两个相同的url地址，返回两次数据，那么浏览器就会把第一次返回的删掉</strong></p><h2 id="XHR">XHR</h2><p>XHR全名HMLHttpRequest，大致和request相同，</p><h2 id="websocket">websocket</h2><p>webscoket是做一些实时弹幕，或者聊天室</p><h1>抓包</h1><h2 id="document">document</h2><p>如果是document包，那么拿着域名去elements找</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250120211847947.png" alt="image-20250120211847947"></p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250120212031190.png" alt="image-20250120212031190"></p><h2 id="jsonp">jsonp</h2><p>一般是全局搜索，或则元素搜索jsonp</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250120214545329.png" alt="image-20250120214545329"></p><h2 id="XHR-2">XHR</h2><p>xhr的直接找包里边的js，然后开始刷包调栈</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250120221527304.png" alt="image-20250120221527304"></p><p>问题，为什么我的断点，断不到东西啊，</p><p>另外调用栈还没试</p><h2 id="HOOK">HOOK</h2><h1>网络基础</h1><h2 id="curl">curl</h2><p>url是客户端的URL工具，使用在服务器之间传输数据的开源命令行工具和跨平台的库，包括用户代理，握手数据，端口等详细信息。</p><h2 id="ajax">ajax</h2><p>异步的javascript+xml，ajax不是新的编程语言，而是一种使用现有标准的新方法，ajax是与服务器交换数据并更新部分网页的艺术，在不重新加载整个页面对的情况下。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h1>混淆</h1><h2 id="控制流平坦化">控制流平坦化</h2><p>控制流平坦化技术会对原始代码的控制流结构进行重组，将代码中的各个基本块（一段顺序执行且没有分支，除了末尾可能有一个无条件跳转的代码片段）合并到一个大的块中，并引入一个状态变量和一个大型的多路分支（例如一个大的switch语句）来模拟原来的控制流。</p><h1>加密</h1><h2 id="RSA">RSA</h2><p>rsa加密常见标志：setpublickey方法，js实现加密可以用jsencrypt加密库</p><h2 id="AES">AES</h2><p>aes加密的搜索关键词有AES，mode，padding</p><h2 id="DES">DES</h2><p>DES加密的搜索关键词有DES，mode，padding</p><h2 id="SHA1">SHA1</h2><p>sha1的关键词就是sha1</p><h2 id="MD5">MD5</h2><p>md5加密搜索MD5即可</p><h2 id="bs64">bs64</h2><p>base64</p><h2 id="OB混淆">OB混淆</h2><p>OB 混淆是指将 JavaScript 代码中的变量名、函数名、字符串等替换为无意义的字符串，从而增加代码的保护性和防止代码的逆向分析。此外，它还可以在代码中添加死代码、无用的函数等，增加代码的复杂度和难以理解性，从而增加代码的保密性</p><h1>请求</h1><h2 id="session">session</h2><p>session在网络应用中称为“会话控制”，是服务器为了保存用户状态而创建的一个特殊的对象。简而言之，session就是一个对象，用于存储信息</p><p><strong>那么session有什么用呢？</strong></p><p>我们先来想一个问题，这个问题就是我们在游览购物网站时，我们并没有登录，但是我们任然可以将商品加入购物车，并且进行查看，当我们退出游览器后再打开游览器进行查看时，购物车中依然有我们选择的商品，这该怎么实现呢？</p><p>​    当然，我们可以使用cookie，但是cookie能存放大量数据吗？这时，我们就需要一种新的技术，Session。session是存储于服务器端的特殊对象，服务器会为每一个游览器(客户端)创建一个唯一的session。这个session是服务器端共享，每个游览器(客户端)独享的。我们可以在session存储数据，实现数据共享</p><p><strong>session里边可以储存键值对</strong></p><h3 id="session和cookie的比较">session和cookie的比较</h3><p>cookie保存在客户端，session保存在服务端<br>cookie作用于他所表示的path中(url中要包含path)，范围较小。session代表客户端和服务器的一次会话过程，web页面跳转时也可以共享数据，范围是本次会话，客户端关闭也不会消失。会持续到我们设置的session生命周期结束(默认30min)<br>我们使用session需要cookie的配合。cookie用来携带JSESSIONID<br>cookie存放的数据量较小，session可以存储更多的信息。<br>cookie由于存放在客服端，相对于session更不安全<br>由于session是存放于服务器的，当有很多客户端访问时，肯定会产生大量的session，这些session会对服务端的性能造成影响</p><h2 id="get和post关于request请求参数">get和post关于request请求参数</h2><h3 id="post">post</h3><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250127170055479.png" alt="image-20250127170055479"></p><h3 id="get">get</h3><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250127170115225.png" alt="image-20250127170115225"></p><h1>实例</h1><h2 id="载荷无加密data加密">载荷无加密data加密</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;js基础&lt;/h1&gt;
&lt;h2 id=&quot;js输出&quot;&gt;js输出&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用window.alert()弹出警告框&lt;/li&gt;
&lt;li&gt;使用document.write()方法将内容写到html文档中&lt;/li&gt;
&lt;li&gt;使用innerHTML写入到html元素</summary>
      
    
    
    
    <category term="js逆向" scheme="https://scanfup.github.io/categories/js%E9%80%86%E5%90%91/"/>
    
    
    <category term="爬虫" scheme="https://scanfup.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://scanfup.github.io/posts/0.html"/>
    <id>https://scanfup.github.io/posts/0.html</id>
    <published>2025-01-09T13:01:12.422Z</published>
    <updated>2025-01-18T04:02:48.587Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>我开始用笔墨，蘸取脑海中的世界，染在纸上</p></li><li><p>战争即和平 自由即奴役 无知即力量。-《1984》</p></li><li><p>公共舆论在多大程度上是被特定机制生产出来的限期商品</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;我开始用笔墨，蘸取脑海中的世界，染在纸上&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;战争即和平 自由即奴役 无知即力量。-《1984》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;公共舆论在多大程度上是被特定机制生产出来的限期商品&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>python期末</title>
    <link href="https://scanfup.github.io/posts/10fc7804.html"/>
    <id>https://scanfup.github.io/posts/10fc7804.html</id>
    <published>2024-12-26T08:19:00.000Z</published>
    <updated>2025-01-02T06:09:09.607Z</updated>
    
    <content type="html"><![CDATA[<h1>用户图形界面-工资计算器</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">    w = <span class="built_in">int</span>(e1.get()) + <span class="built_in">int</span>(e2.get()) - <span class="built_in">int</span>(e3.get())</span><br><span class="line">    wage.insert(<span class="number">0</span>,w)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root = Tk()</span><br><span class="line">root.title(<span class="string">&quot;工资计算器&quot;</span>)</span><br><span class="line">Label(root, text=<span class="string">&quot;每月基本工资：&quot;</span>).pack()</span><br><span class="line">e1 = Entry(root)</span><br><span class="line">e1.pack()</span><br><span class="line">Label(root, text=<span class="string">&quot;补助工资：&quot;</span>).pack()</span><br><span class="line">e2 = Entry(root)</span><br><span class="line">e2.pack()</span><br><span class="line">Label(root, text=<span class="string">&quot;考勤扣款：&quot;</span>).pack()</span><br><span class="line">e3 = Entry(root)</span><br><span class="line">e3.pack()</span><br><span class="line">Button(root, text=<span class="string">&quot;计算&quot;</span>, command=f).pack()</span><br><span class="line">Label(root, text=<span class="string">&quot;实发工资：&quot;</span>).pack()</span><br><span class="line">wage=Entry(root)</span><br><span class="line">wage.pack()</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><ol><li>使用tk方法创建一个窗口类型root，并且给该窗口命名为工资计算器</li><li>用Label标签创建每月基本工资，补助工资，考勤扣款这几个标签，pack方法是将这几个标签放到窗口里</li><li>用Entry方法在root里创建输入框，并且将输入框创建在窗口里边</li><li>用Button方法创建一个按钮，与f方法绑定</li><li>root.mainloop()显示窗口</li></ol><h1>政府工作报告-词云图</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#2、读取文本并分词</span></span><br><span class="line">text = <span class="built_in">open</span>(<span class="string">&quot;2023政府工作报告.txt&quot;</span>,<span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line">ss=<span class="string">&quot; &quot;</span>.join(jieba.lcut(text))</span><br><span class="line">mask=np.array(Image.<span class="built_in">open</span>(<span class="string">&quot;ChinaMap.png&quot;</span>))</span><br><span class="line"><span class="comment">#3、配置词云参数，生成词云</span></span><br><span class="line">wc = WordCloud(</span><br><span class="line">    font_path=<span class="string">&quot;fonts/msyh.ttc&quot;</span>,</span><br><span class="line">    background_color = <span class="string">&quot;white&quot;</span>,</span><br><span class="line">    max_words=<span class="number">300</span>,</span><br><span class="line">    mask =mask,</span><br><span class="line">    max_font_size = <span class="number">200</span>,height=<span class="number">400</span>,width=<span class="number">854</span>,</span><br><span class="line">stopwords=&#123;<span class="string">&quot;的&quot;</span>, <span class="string">&quot;了&quot;</span>, <span class="string">&quot;是&quot;</span>, <span class="string">&quot;在&quot;</span>, <span class="string">&quot;和&quot;</span>, <span class="string">&quot;有&quot;</span>, <span class="string">&quot;一个&quot;</span>, <span class="string">&quot;与&quot;</span>, <span class="string">&quot;我&quot;</span>, <span class="string">&quot;我们&quot;</span>, <span class="string">&quot;你&quot;</span>, <span class="string">&quot;他&quot;</span>, <span class="string">&quot;她&quot;</span>, <span class="string">&quot;它&quot;</span>, <span class="string">&quot;这个&quot;</span>, <span class="string">&quot;那个&quot;</span>, <span class="string">&quot;对于&quot;</span>,</span><br><span class="line">            <span class="string">&quot;因为&quot;</span>, <span class="string">&quot;所以&quot;</span>, <span class="string">&quot;如果&quot;</span>, <span class="string">&quot;如何&quot;</span>, <span class="string">&quot;这样&quot;</span>, <span class="string">&quot;但&quot;</span>, <span class="string">&quot;只有&quot;</span>, <span class="string">&quot;而&quot;</span>, <span class="string">&quot;也&quot;</span>, <span class="string">&quot;更加&quot;</span>, <span class="string">&quot;去&quot;</span>, <span class="string">&quot;将&quot;</span>, <span class="string">&quot;可以&quot;</span>, <span class="string">&quot;大&quot;</span>, <span class="string">&quot;小&quot;</span>, <span class="string">&quot;非常&quot;</span>,</span><br><span class="line">            <span class="string">&quot;不仅&quot;</span>, <span class="string">&quot;更&quot;</span>, <span class="string">&quot;是的&quot;</span>, <span class="string">&quot;以及&quot;</span>, <span class="string">&quot;而且&quot;</span>, <span class="string">&quot;关于&quot;</span>, <span class="string">&quot;当&quot;</span>, <span class="string">&quot;能&quot;</span>, <span class="string">&quot;这些&quot;</span>, <span class="string">&quot;这些&quot;</span>, <span class="string">&quot;自己&quot;</span>, <span class="string">&quot;需要&quot;</span>, <span class="string">&quot;当时&quot;</span>, <span class="string">&quot;某些&quot;</span>, <span class="string">&quot;任何&quot;</span>,</span><br><span class="line">            <span class="string">&quot;本&quot;</span>, <span class="string">&quot;此&quot;</span>, <span class="string">&quot;更&quot;</span>, <span class="string">&quot;过&quot;</span>, <span class="string">&quot;一些&quot;</span>, <span class="string">&quot;同样&quot;</span>, <span class="string">&quot;两&quot;</span>, <span class="string">&quot;三&quot;</span>, <span class="string">&quot;四&quot;</span>, <span class="string">&quot;五&quot;</span>, <span class="string">&quot;十&quot;</span>, <span class="string">&quot;不&quot;</span>, <span class="string">&quot;多&quot;</span>, <span class="string">&quot;少&quot;</span>, <span class="string">&quot;起来&quot;</span>, <span class="string">&quot;之前&quot;</span>, <span class="string">&quot;之后&quot;</span>&#125;,</span><br><span class="line">colormap=<span class="string">&quot;Reds&quot;</span>,contour_width=<span class="number">8</span>,contour_color=<span class="string">&quot;red&quot;</span>)</span><br><span class="line">wc.generate(ss)</span><br><span class="line"><span class="comment">#4、生成图片并显示</span></span><br><span class="line">wc.to_image( )</span><br><span class="line">wc.to_file(<span class="string">&quot;C:/Users/Administrator/Desktop/new.png&quot;</span>)</span><br></pre></td></tr></table></figure><ol><li>首先，导包</li><li>打开政府工作报告文件，并且读取文本存入text</li><li>使用jieba分词，生成字符串并使用空格连接，存入ss</li><li>mask是使用该图像作为模板</li><li>创建一个词云示例wc，使用Wordcloud方法，并且定义<code>font,background_color,max_words,mask,stopwords</code></li><li>colormap为红色映射，后面两个设置词云的宽度和颜色</li><li><code>wc.generate(ss)</code>生成词云</li><li>展示图像并保存</li></ol><h1>七日天气-爬虫</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#日期、天气如何、温度、风向、风速</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> xlsxwriter</span><br><span class="line"><span class="comment"># 请求网页</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">page_request</span>(<span class="params">url, ua</span>):</span><br><span class="line">    response = requests.get(url=url, headers=ua)</span><br><span class="line">    html = response.content.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> html</span><br><span class="line"><span class="comment"># 解析网页</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">page_parse</span>(<span class="params">html</span>):</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    date = soup.select(<span class="string">&#x27;#\\37 d &gt; ul &gt; li&gt; h1&#x27;</span>)</span><br><span class="line">    wendu_high = soup.select(<span class="string">&#x27;#\\37 d &gt; ul &gt; li &gt; p.tem &gt; span&#x27;</span>)</span><br><span class="line">    wendu_low = soup.select(<span class="string">&#x27;#\\37 d &gt; ul &gt; li &gt; p.tem &gt; i&#x27;</span>)</span><br><span class="line">    tianqi = soup.select(<span class="string">&#x27;#\\37 d &gt; ul &gt; li &gt; p.wea&#x27;</span>)</span><br><span class="line">    fenxiang = soup.select(<span class="string">&#x27;#\\37 d &gt; ul &gt; li &gt; p.win &gt; em &gt; span&#x27;</span>)</span><br><span class="line">    fengsu = soup.select(<span class="string">&#x27;#\\37 d &gt; ul &gt; li &gt; p.win &gt; i&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    workbook= xlsxwriter.Workbook(<span class="string">&#x27;tianqi.xlsx&#x27;</span>)</span><br><span class="line">    <span class="comment">#添加工作表</span></span><br><span class="line">    worksheet=workbook.add_worksheet(<span class="string">&#x27;data&#x27;</span>)</span><br><span class="line">    headers=[<span class="string">&#x27;日期&#x27;</span>,<span class="string">&#x27;温度&#x27;</span>,<span class="string">&#x27;天气&#x27;</span>,<span class="string">&#x27;风向&#x27;</span>,<span class="string">&#x27;风速&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> col_num,headers <span class="keyword">in</span> <span class="built_in">enumerate</span>(headers):</span><br><span class="line">        worksheet.write(<span class="number">0</span>,col_num,headers)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        <span class="built_in">print</span>(date[i].get_text()+<span class="string">&#x27;\t&#x27;</span>+wendu_low[i].get_text()+<span class="string">&#x27;\t&#x27;</span>+wendu_high[i].get_text()+<span class="string">&#x27;\t&#x27;</span>+tianqi[i].get_text()+<span class="string">&#x27;\t&#x27;</span>+fenxiang[i].get_text()+<span class="string">&#x27;\t&#x27;</span>+fengsu[i].get_text())</span><br><span class="line">        data=[date[i].get_text(),wendu_low[i].get_text()+<span class="string">&#x27;-&#x27;</span>+wendu_high[i].get_text(),tianqi[i].get_text(),fenxiang[i].get_text(),fengsu[i].get_text()]</span><br><span class="line">        <span class="keyword">for</span> col_num,value <span class="keyword">in</span> <span class="built_in">enumerate</span>(data):</span><br><span class="line">            worksheet.write(i+<span class="number">1</span>,col_num,value)</span><br><span class="line">    workbook.close()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;**************开始爬取七日天气**************&#x27;</span>)</span><br><span class="line">    ua = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4421.5 Safari/537.36&#x27;</span>&#125;</span><br><span class="line">    <span class="comment"># 豆瓣电影Top250每页有25部电影，start就是每页电影的开头</span></span><br><span class="line">    url = <span class="string">&quot;https://www.weather.com.cn/weather/101180101.shtml&quot;</span></span><br><span class="line">    html = page_request(url=url, ua=ua)</span><br><span class="line">    page_parse(html=html)</span><br><span class="line">    <span class="comment">#print(&#x27;**************爬取完成**************&#x27;)</span></span><br></pre></td></tr></table></figure><p>分成三个部分</p><blockquote><ol><li>对网页的请求</li><li>解析网页，返回html</li><li>对html进行处理</li></ol></blockquote><p>详细叙述第三部分</p><ol><li><p><code>page_prase方法</code>，首先<code>soup = BeautifulSoup(html, 'lxml')</code>将处理后的html保存在soup里边</p></li><li><p>然后使用<code>soup.select</code>方法将天气，最高最低温度，风速，风向，日期都创建变量进行保存</p></li><li><p>这一部分添加工作表并进行保存</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">workbook= xlsxwriter.Workbook(<span class="string">&#x27;tianqi.xlsx&#x27;</span>)</span><br><span class="line">    <span class="comment">#添加工作表</span></span><br><span class="line">worksheet=workbook.add_worksheet(<span class="string">&#x27;data&#x27;</span>)</span><br><span class="line">headers=[<span class="string">&#x27;日期&#x27;</span>,<span class="string">&#x27;温度&#x27;</span>,<span class="string">&#x27;天气&#x27;</span>,<span class="string">&#x27;风向&#x27;</span>,<span class="string">&#x27;风速&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> col_num,headers <span class="keyword">in</span> <span class="built_in">enumerate</span>(headers):</span><br><span class="line">    worksheet.write(<span class="number">0</span>,col_num,headers)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">                  <span class="built_in">print</span>(date[i].get_text()+<span class="string">&#x27;\t&#x27;</span>+wendu_low[i].get_text()+<span class="string">&#x27;\t&#x27;</span>+wendu_high[i].get_text()+<span class="string">&#x27;\t&#x27;</span>+tianqi[i].get_text()+<span class="string">&#x27;\t&#x27;</span>+fenxiang[i].get_text()+<span class="string">&#x27;\t&#x27;</span>+fengsu[i].get_text())</span><br><span class="line">        data=[date[i].get_text(),wendu_low[i].get_text()+<span class="string">&#x27;-&#x27;</span>+wendu_high[i].get_text(),tianqi[i].get_text(),fenxiang[i].get_text(),fengsu[i].get_text()]</span><br><span class="line">        <span class="keyword">for</span> col_num,value <span class="keyword">in</span> <span class="built_in">enumerate</span>(data):</span><br><span class="line">            worksheet.write(i+<span class="number">1</span>,col_num,value)</span><br></pre></td></tr></table></figure></li><li><p>最后workbook.close()将该工作表进行保存</p></li></ol><h1>创建一个person类，输出hello</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">        <span class="variable language_">self</span>.age = age</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_hello</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Hello, my name is <span class="subst">&#123;self.name&#125;</span> and I am <span class="subst">&#123;self.age&#125;</span> years old.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    person1 = Person(<span class="string">&quot;Alice&quot;</span>, <span class="number">25</span>)</span><br><span class="line">    person1.say_hello()</span><br></pre></td></tr></table></figure><h1>整数列表按奇偶排序，并且从小到大</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">key</span>(<span class="params">list1,list2</span>):</span><br><span class="line">    list3=[]</span><br><span class="line">    list4=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">        <span class="keyword">if</span> i%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">            list3.append(i)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> list2:</span><br><span class="line">        <span class="keyword">if</span> i%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">            list3.append(i)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">        <span class="keyword">if</span> i%<span class="number">2</span>!=<span class="number">0</span>:</span><br><span class="line">            list4.append(i)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> list2:</span><br><span class="line">        <span class="keyword">if</span> i%<span class="number">2</span>!=<span class="number">0</span>:</span><br><span class="line">            list4.append(i)</span><br><span class="line">    list3=<span class="built_in">sorted</span>(list3)</span><br><span class="line">    list4=<span class="built_in">sorted</span>(list4)</span><br><span class="line">    <span class="built_in">print</span>(list4+list3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    list1=[<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">22</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">20</span>,<span class="number">25</span>,<span class="number">24</span>,<span class="number">99</span>]</span><br><span class="line">    list2=[<span class="number">111</span>,<span class="number">112</span>,<span class="number">113</span>,<span class="number">114</span>,<span class="number">115</span>,<span class="number">116</span>,<span class="number">117</span>]</span><br><span class="line">    key(list1,list2)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>列表和元组的区别</h1><p>列表（<code>list</code>）和元组（<code>tuple</code>）是 Python 中两种常用的数据结构，它们之间有以下几个主要区别：</p><h3 id="1-可变性">1. <strong>可变性</strong></h3><ul><li><p><strong>列表（List）</strong><br>列表是可变的，可以修改元素的值、添加元素或删除元素。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python复制代码lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">lst[<span class="number">0</span>] = <span class="number">10</span>  <span class="comment"># 修改元素</span></span><br><span class="line">lst.append(<span class="number">4</span>)  <span class="comment"># 添加元素</span></span><br><span class="line">lst.remove(<span class="number">2</span>)  <span class="comment"># 删除元素</span></span><br><span class="line"><span class="built_in">print</span>(lst)  <span class="comment"># [10, 3, 4]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>元组（Tuple）</strong><br>元组是不可变的，一旦创建，不能修改其元素或结构。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python复制代码tpl = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># tpl[0] = 10  # 会报错：TypeError: &#x27;tuple&#x27; object does not support item assignment</span></span><br><span class="line"><span class="built_in">print</span>(tpl)  <span class="comment"># (1, 2, 3)</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-性能">2. <strong>性能</strong></h3><ul><li>元组因为不可变，所以在创建和访问时的性能通常比列表更高。</li><li>如果需要处理大量不变的数据，使用元组更高效。</li></ul><h3 id="3-用途">3. <strong>用途</strong></h3><ul><li>列表更适合需要频繁修改数据的场景。</li><li>元组更适合表示不可变的数据（如坐标、数据库记录）或作为函数返回多个值的容器。</li></ul><h3 id="4-语法">4. <strong>语法</strong></h3><ul><li><p>列表使用方括号</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[]</span><br></pre></td></tr></table></figure><p>表示。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">复制代码</span><br><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure></li><li><p>元组使用圆括号</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">()</span><br></pre></td></tr></table></figure><p>表示。如果元组只有一个元素，需加逗号。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python复制代码tpl = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">single_tpl = (<span class="number">1</span>,)  <span class="comment"># 单元素元组</span></span><br></pre></td></tr></table></figure></li></ul><h1>异常+ZeroDivisionError</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#解释python中的异常处理机制</span></span><br><span class="line"><span class="comment"># 1. 异常处理机制</span></span><br><span class="line"><span class="comment"># 在程序运行的过程中，可能会出现各种各样的异常，比如输入错误、文件操作失败等等。如果不对这些异常进行处理，程序将会终止运行，并给出错误提示。</span></span><br><span class="line"><span class="comment"># 为了避免程序终止运行，我们需要对可能出现的异常进行处理，并给出合适的提示信息。</span></span><br><span class="line"><span class="comment"># Python中提供了try...except...finally语句来处理异常。</span></span><br><span class="line"><span class="comment"># try语句用来包含可能出现异常的语句，except语句用来处理异常，finally语句用来执行一些清理工作，无论是否出现异常都会执行。</span></span><br><span class="line"><span class="comment">#演示代码如何捕获并处理ZeroDivisionError异常：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a = <span class="number">1</span> / <span class="number">0</span></span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;division by zero!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行上述代码，将会输出&quot;division by zero!&quot;，说明程序正常运行，并捕获到了ZeroDivisionError异常。</span></span><br></pre></td></tr></table></figure><h1>画图</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> gridspec</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义函数 y = e^(2x) * cos(3πx + π/3)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> np.exp(<span class="number">2</span> * x) * np.cos(<span class="number">3</span> * np.pi * x + np.pi / <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 x 的范围</span></span><br><span class="line">x_range = np.linspace(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建图形，设置自定义布局</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">8</span>, <span class="number">12</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 gridspec 设置布局</span></span><br><span class="line">gs = gridspec.GridSpec(<span class="number">2</span>, <span class="number">1</span>, height_ratios=[<span class="number">2</span>, <span class="number">1</span>])  <span class="comment"># 上方大图占2/3, 下方小图占1/3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建子图1：步长 0.2</span></span><br><span class="line">ax1 = plt.subplot(gs[<span class="number">0</span>])  <span class="comment"># 上面的大图</span></span><br><span class="line">x1 = np.arange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">0.2</span>)</span><br><span class="line">y1 = f(x1)</span><br><span class="line">ax1.plot(x1, y1, label=<span class="string">&#x27;Step = 0.2&#x27;</span>, color=<span class="string">&#x27;b&#x27;</span>, linestyle=<span class="string">&#x27;-&#x27;</span>, marker=<span class="string">&#x27;o&#x27;</span>)</span><br><span class="line">ax1.set_title(<span class="string">&#x27;Step Size = 0.2&#x27;</span>)</span><br><span class="line">ax1.set_xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">ax1.set_ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">ax1.grid(<span class="literal">True</span>)</span><br><span class="line">ax1.legend()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建子图2和子图3：分别为步长 0.5 和 0.7，放在底部</span></span><br><span class="line">gs2 = gridspec.GridSpecFromSubplotSpec(<span class="number">1</span>, <span class="number">2</span>, subplot_spec=gs[<span class="number">1</span>])  <span class="comment"># 在底部创建两个子图</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 子图2：步长 0.5</span></span><br><span class="line">ax2 = plt.subplot(gs2[<span class="number">0</span>])</span><br><span class="line">x2 = np.arange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">0.5</span>)</span><br><span class="line">y2 = f(x2)</span><br><span class="line">ax2.plot(x2, y2, label=<span class="string">&#x27;Step = 0.5&#x27;</span>, color=<span class="string">&#x27;g&#x27;</span>, linestyle=<span class="string">&#x27;--&#x27;</span>, marker=<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">ax2.set_title(<span class="string">&#x27;Step Size = 0.5&#x27;</span>)</span><br><span class="line">ax2.set_xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">ax2.set_ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">ax2.grid(<span class="literal">True</span>)</span><br><span class="line">ax2.legend()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 步长 0.7</span></span><br><span class="line">ax3 = plt.subplot(gs2[<span class="number">1</span>])</span><br><span class="line">x3 = np.arange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">0.7</span>)</span><br><span class="line">y3 = f(x3)</span><br><span class="line">ax3.plot(x3, y3, label=<span class="string">&#x27;Step = 0.7&#x27;</span>, color=<span class="string">&#x27;r&#x27;</span>, linestyle=<span class="string">&#x27;-.&#x27;</span>, marker=<span class="string">&#x27;s&#x27;</span>)</span><br><span class="line">ax3.set_title(<span class="string">&#x27;Step Size = 0.7&#x27;</span>)</span><br><span class="line">ax3.set_xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">ax3.set_ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">ax3.grid(<span class="literal">True</span>)</span><br><span class="line">ax3.legend()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调整布局</span></span><br><span class="line">plt.tight_layout()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示图形</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1>数据分析</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">df=pd.read_excel(<span class="string">&#x27;sales.xlsx&#x27;</span>,parse_dates=[<span class="string">&#x27;date&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df.head())</span><br><span class="line"><span class="comment"># 按店铺分组并计算销售和利润的总和</span></span><br><span class="line">store_sales=df.groupby(<span class="string">&quot;store&quot;</span>)[[<span class="string">&quot;sales&quot;</span>,<span class="string">&quot;profit&quot;</span>]].<span class="built_in">sum</span>()</span><br><span class="line"><span class="built_in">print</span>(store_sales)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制柱状图</span></span><br><span class="line"><span class="comment"># 筛选出销售额大于200的记录</span></span><br><span class="line">high_sales=df[df[<span class="string">&quot;sales&quot;</span>]&gt;<span class="number">200</span>]</span><br><span class="line"><span class="built_in">print</span>(high_sales)</span><br><span class="line"><span class="comment"># 按类别分组并计算利润的平均值</span></span><br><span class="line">category_profit=df.groupby(<span class="string">&quot;category&quot;</span>)[<span class="string">&quot;profit&quot;</span>].mean()</span><br><span class="line"><span class="built_in">print</span>(category_profit)</span><br><span class="line"><span class="comment"># 绘制各店铺总销售额的柱状图</span></span><br><span class="line">store_sales[<span class="string">&quot;sales&quot;</span>].plot(kind=<span class="string">&quot;bar&quot;</span>,figsize=(<span class="number">10</span>,<span class="number">6</span>),color=<span class="string">&quot;skyblue&quot;</span>)</span><br><span class="line">plt.title(<span class="string">&quot;Total Sales by Store&quot;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;Store&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Total Sales&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>读取数据</li><li>计算销售和利润的总和</li><li>绘制柱状图，筛选出销售额大于200的记录</li><li>计算</li><li>绘制</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;用户图形界面-工资计算器&lt;/h1&gt;
&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/s</summary>
      
    
    
    
    <category term="期末" scheme="https://scanfup.github.io/categories/%E6%9C%9F%E6%9C%AB/"/>
    
    
    <category term="python" scheme="https://scanfup.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>考研知识点</title>
    <link href="https://scanfup.github.io/posts/e5935d82.html"/>
    <id>https://scanfup.github.io/posts/e5935d82.html</id>
    <published>2024-12-24T16:00:00.000Z</published>
    <updated>2024-12-25T11:55:46.405Z</updated>
    
    <content type="html"><![CDATA[<h1>赋分制是个什么东西</h1><p>赋分制的核心是根据考生成绩进行等级划分，并按照等级赋予相应的分数。这一制度的实施，旨在解决传统高考中不同科目之间分数不可比的问题，使不同科目之间的分数具有更强的可比性。</p><h1>考研你都需要知道些什么</h1><p>计算机学科专业基础综合（408）试卷满分150分；考试时间180分钟；</p><p>试卷内容结构：</p><p>数据结构45分，计算机组成原理45分，操作系统35分，<a href="https://zhida.zhihu.com/search?content_id=104724908&amp;content_type=Article&amp;match_order=1&amp;q=%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C&amp;zhida_source=entity">计算机网络</a>25分；</p><p>试卷题型结构：单项选择题，80分（40小题，每小题2分）；综合题，70分；</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;赋分制是个什么东西&lt;/h1&gt;
&lt;p&gt;赋分制的核心是根据考生成绩进行等级划分，并按照等级赋予相应的分数。这一制度的实施，旨在解决传统高考中不同科目之间分数不可比的问题，使不同科目之间的分数具有更强的可比性。&lt;/p&gt;
&lt;h1&gt;考研你都需要知道些什么&lt;/h1&gt;
&lt;p&gt;计算机学科</summary>
      
    
    
    
    <category term="考研" scheme="https://scanfup.github.io/categories/%E8%80%83%E7%A0%94/"/>
    
    
    <category term="考研" scheme="https://scanfup.github.io/tags/%E8%80%83%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>高等数学</title>
    <link href="https://scanfup.github.io/posts/93e4730e.html"/>
    <id>https://scanfup.github.io/posts/93e4730e.html</id>
    <published>2024-12-24T16:00:00.000Z</published>
    <updated>2024-12-26T08:54:07.572Z</updated>
    
    <content type="html"><![CDATA[<h1>求导</h1><p><img src="https://files.catbox.moe/tr3pzu.jpg" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;求导&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://files.catbox.moe/tr3pzu.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="考研" scheme="https://scanfup.github.io/tags/%E8%80%83%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>概率论数理统计</title>
    <link href="https://scanfup.github.io/posts/7024e655.html"/>
    <id>https://scanfup.github.io/posts/7024e655.html</id>
    <published>2024-12-24T13:48:00.000Z</published>
    <updated>2025-01-05T11:52:01.895Z</updated>
    
    <content type="html"><![CDATA[<h1>随机变量的数字特征</h1><p><img src="https://files.catbox.moe/r0u0gr.jpg" alt=""></p><p><img src="https://files.catbox.moe/mrt3b2.jpg" alt=""></p><h1>数理统计三大分布</h1><p>三大分布之间是一个相关的关系</p><p><img src="https://files.catbox.moe/lc2gn9.png" alt=""></p><h2 id="卡方分布">卡方分布</h2><p><strong>n个标准正态分布的平方和</strong></p><p><img src="https://files.catbox.moe/18hrvv.png" alt=""></p><h2 id="t分布">t分布</h2><p><img src="https://files.catbox.moe/j81xcc.png" alt=""></p><h1>参数估计</h1><h2 id="置信区间">置信区间</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/7cf5f08d5b6acbe7a686a06a9c76081.png" alt="7cf5f08d5b6acbe7a686a06a9c76081"></p><h2 id="假设检验">假设检验</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/610b244ca831f1852e693cb9ffd2a36.png" alt="610b244ca831f1852e693cb9ffd2a36"></p><h2 id="矩估计">矩估计</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/6dfc32738db1e09a19eb2dfad493194.png" alt="6dfc32738db1e09a19eb2dfad493194"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;随机变量的数字特征&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://files.catbox.moe/r0u0gr.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://files.catbox.moe/mrt3b2.jpg&quot; alt=&quot;&quot;&gt;&lt;/</summary>
      
    
    
    
    <category term="考研" scheme="https://scanfup.github.io/categories/%E8%80%83%E7%A0%94/"/>
    
    
    <category term="概率论数理统计" scheme="https://scanfup.github.io/tags/%E6%A6%82%E7%8E%87%E8%AE%BA%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>高三数学错题本</title>
    <link href="https://scanfup.github.io/posts/c2dc6051.html"/>
    <id>https://scanfup.github.io/posts/c2dc6051.html</id>
    <published>2024-12-22T00:20:00.000Z</published>
    <updated>2024-12-28T09:02:08.014Z</updated>
    
    <content type="html"><![CDATA[<h1>知识点</h1><h3 id="三角函数">三角函数</h3><p><img src="https://files.catbox.moe/f2p3c4.png" alt=""></p><h1>错题本</h1><h2 id="填空-选择题">填空+选择题</h2><h2 id="大题">大题</h2><h3 id="三角函数-2">三角函数</h3><h4 id="根据向量比例得出线段长度关系">根据向量比例得出线段长度关系</h4><p><img src="https://files.catbox.moe/ixwlqm.jpg" alt=""></p><p><img src="https://files.catbox.moe/ygwk9g.jpg" alt=""></p><p><img src="https://files.catbox.moe/czakvw.jpg" alt=""></p><h4 id="给出一边求周长，另外两边和通过余弦定理">给出一边求周长，另外两边和通过余弦定理</h4><p><img src="https://files.catbox.moe/o52mhx.png" alt=""></p><p><img src="https://files.catbox.moe/unzhen.png" alt=""></p><h4 id="辅助角公式-不同三角形中同一个角度三角函数求边长">辅助角公式+不同三角形中同一个角度三角函数求边长</h4><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20241227222608837.png" alt="image-20241227222608837"></p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/6b25ad20f867d84a738861451c52e7e.png" alt="6b25ad20f867d84a738861451c52e7e"></p><h4 id="角平分线求得边的关系">角平分线求得边的关系</h4><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20241228170112895.png" alt="image-20241228170112895"></p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/Screenshot_2024_1228_165938.png" alt="Screenshot_2024_1228_165938"></p><h3 id="导数">导数</h3><h3 id="空间立体几何">空间立体几何</h3><h3 id="面面平行作垂直辅助线">面面平行作垂直辅助线</h3><p><img src="https://files.catbox.moe/yistkr.jpg" alt=""></p><p><img src="https://files.catbox.moe/952eq6.jpg" alt=""></p><h3 id="概率问题">概率问题</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;知识点&lt;/h1&gt;
&lt;h3 id=&quot;三角函数&quot;&gt;三角函数&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://files.catbox.moe/f2p3c4.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1&gt;错题本&lt;/h1&gt;
&lt;h2 id=&quot;填空-选择题&quot;&gt;填空+选择题&lt;/h2&gt;
</summary>
      
    
    
    
    <category term="高中数学" scheme="https://scanfup.github.io/categories/%E9%AB%98%E4%B8%AD%E6%95%B0%E5%AD%A6/"/>
    
    
    <category term="错题本" scheme="https://scanfup.github.io/tags/%E9%94%99%E9%A2%98%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>向日葵下的内网穿透</title>
    <link href="https://scanfup.github.io/posts/c4fd97f3.html"/>
    <id>https://scanfup.github.io/posts/c4fd97f3.html</id>
    <published>2024-12-17T01:12:00.000Z</published>
    <updated>2024-12-25T11:50:04.719Z</updated>
    
    <content type="html"><![CDATA[<p>这里首先默认你使用向日葵进行远程控制，那么当我们购买了向日葵的个人域名访问服务之后，在校园内网下的计算机仍然不能通过域名相互访问，校园网内部使用校园内网，无法通过外网进行控制，那么此时我们需要进行一个端口映射</p><h2 id="什么是内网穿透">什么是内网穿透</h2><p>内网，就是在公司或者家庭内部，建立的局域网络或者是办公网络，可以实现多台电脑之间的资源共享，包括设备、资料、数据等。而外网则是通过一个网关与其它的网络系统连接，相对于内网而言，这种网络系统称之为外部网络，常见的就是我们日常使用的互联网。</p><p>一般而言，在没有固定公网IP的情况下，外网设备无法直接访问内网设备。而内网穿透技术，顾名思义就是能让外网的设备找到处于内网的设备，从而实现数据通信。</p><h2 id="内网穿透的原理">内网穿透的原理</h2><p>内网穿透，又称为NAT穿透。NAT背后的设备，它们的主要特点是 ，可以访问外网，但不能被外网设备有效访问。基于这一特点，NAT穿透技术是让NAT背后的设备，先访问指定的外网服务器，由指定的外网服务器搭建桥梁，打通内、外网设备的访问通道，实现外网设备访问到内网设备。</p><p>该技术除了可以访问隐藏在NAT后的设备，同样可以穿透防火墙。这是因为防火墙一般只拦截了入站没有拦截出站，所以也可以让防火墙内的设备对外提供服务。</p><p>由于内网设备并不是与外网设备直接相连，所以在安全性上是毋庸置疑的，内网穿透可以说是安全与效率兼得。</p><h2 id="如何实现内网穿透">如何实现内网穿透</h2><p>我们可以安装<a href="https://hsk.oray.com/">花生壳</a><a href="https://hsk.oray.com/">内网穿透软件</a>，在软件上添加<a href="https://hsk.oray.com/">映射</a>时，配置被访问内网设备的相关信息 ，以及选择用作外网访问该映射的<a href="https://domain.oray.com/">域名</a>。当映射诊断信息提示连接成功时，即可实现内网穿透。</p><p>利用花生壳的内网穿透技术，外网的设备通过访问固定域名，连接花生壳服务器所搭建的通道，顺畅地与内网设备进行数据通信。</p><hr><ol><li><p>安装花生壳内网穿透</p></li><li><p>添加自定义映射</p><p><img src="https://public-cdn.oray.com/help/aa92d4d62a85478e2ea15e55edded457" alt="img"></p></li></ol>]]></content>
    
    
    <summary type="html">本篇文章讲了如何在向日葵私有域名下实现内网穿透</summary>
    
    
    
    <category term="远程控制" scheme="https://scanfup.github.io/categories/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    
    
    <category term="远程控制" scheme="https://scanfup.github.io/tags/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>牛客练习赛131</title>
    <link href="https://scanfup.github.io/posts/5164b3fe.html"/>
    <id>https://scanfup.github.io/posts/5164b3fe.html</id>
    <published>2024-11-26T09:08:00.000Z</published>
    <updated>2024-12-25T11:55:46.403Z</updated>
    
    <content type="html"><![CDATA[<h1>小H学语文</h1><p>第一题本来想直接用大数组映射排名输出，这样也对</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">cmp</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>,res=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">200010</span>];</span><br><span class="line">    <span class="type">int</span> arr1[<span class="number">1000010</span>];</span><br><span class="line">    <span class="type">int</span> arr2[<span class="number">200010</span>];</span><br><span class="line">    <span class="comment">//意思就是需要长度去映射位置</span></span><br><span class="line">    <span class="comment">//首先需要对长度进行排序处理</span></span><br><span class="line">    <span class="comment">//挑出来前几个是最合适的选择</span></span><br><span class="line">    <span class="comment">//按照原来的次序输出这些长度</span></span><br><span class="line">    <span class="comment">//为什么结构体无法处理这个东西，因为首先对结构体排序，然后找出最优个数，但是在输出的时候如果按照原来的顺序，你没办法确定是</span></span><br><span class="line">    <span class="comment">//那四个要输出，除非你再开一个变量储存每个长度的排名</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//排序后直接输出序号</span></span><br><span class="line">    <span class="type">int</span> n;<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)arr2[i]=arr[i];</span><br><span class="line">    sort(arr2+<span class="number">1</span>,arr2+n+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)arr1[arr2[i]]=i;</span><br><span class="line">    <span class="comment">//前提就是len与排名绑定</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sum&lt;arr1[arr[i]]*arr1[arr[i]]*arr[i])&#123;</span><br><span class="line">            sum=arr1[arr[i]]*arr1[arr[i]]*arr[i];</span><br><span class="line">            res=arr1[arr[i]];<span class="comment">//arr1是排名</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr1[arr[i]]&lt;=res)<span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用pair&lt;int,int&gt;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">cmp</span><span class="params">(<span class="built_in">pair</span>&lt;<span class="type">int</span>,<span class="type">int</span>&gt;a,<span class="built_in">pair</span>&lt;<span class="type">int</span>,<span class="type">int</span>&gt;b)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.first&gt;b.first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pair</span>&lt;<span class="type">int</span>,<span class="type">int</span>&gt;arr[<span class="number">200010</span>];</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>,res=<span class="number">0</span>;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> n;<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;arr[i].first;</span><br><span class="line">        arr[i].second=i;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(arr+<span class="number">1</span>,arr+n+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i*i*arr[i].first&gt;sum)&#123;</span><br><span class="line">            sum=i*i*arr[i].first;</span><br><span class="line">            res=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> shix[<span class="number">200010</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=res;i++)&#123;</span><br><span class="line">        shix[i]=arr[i].second;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(shix+<span class="number">1</span>,shix+res+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=res;i++)<span class="built_in">cout</span>&lt;&lt;shix[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实这一道题的疑问点我给混淆了，只需要把这个数组跟下标绑定之后，把这几个的下标正常输出即可，如果要求有序的话就存进一个数组中，然后直接排一下序就可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;小H学语文&lt;/h1&gt;
&lt;p&gt;第一题本来想直接用大数组映射排名输出，这样也对&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;</summary>
      
    
    
    
    <category term="算法" scheme="https://scanfup.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://scanfup.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>大数据周赛</title>
    <link href="https://scanfup.github.io/posts/bd07ec83.html"/>
    <id>https://scanfup.github.io/posts/bd07ec83.html</id>
    <published>2024-11-23T04:02:17.228Z</published>
    <updated>2024-11-23T04:13:36.695Z</updated>
    
    <content type="html"><![CDATA[<h2 id="countXXX">countXXX</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">int</span> arr[<span class="number">200</span>];<span class="comment">// </span></span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> n;<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="built_in">string</span> a;<span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line"><span class="comment">//找最长相等子串长度 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="type">int</span> cnt=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(a[i]==a[i+<span class="number">1</span>])&#123;</span><br><span class="line">cnt++;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt&gt;arr[a[i]])&#123;</span><br><span class="line">arr[a[i]]=cnt;<span class="comment">//储存该字符最大连续长度</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">200</span>;i++)res+=arr[i];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;res;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="乒乓球">乒乓球</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">char</span> arr[<span class="number">100010</span>];</span><br><span class="line"><span class="type">char</span> a=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="type">int</span> cnt=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(a!=<span class="string">&#x27;E&#x27;</span>)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot; %c&quot;</span>,&amp;a);</span><br><span class="line">arr[cnt++]=a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//输出11赛制</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;cnt;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i]==<span class="string">&#x27;W&#x27;</span>)x++;</span><br><span class="line"><span class="keyword">if</span>(arr[i]==<span class="string">&#x27;L&#x27;</span>) y++;</span><br><span class="line"><span class="keyword">if</span>((x&gt;=<span class="number">11</span>||y&gt;=<span class="number">11</span>)&amp;&amp;<span class="built_in">abs</span>(x-y)&gt;=<span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="string">&quot;:&quot;</span>&lt;&lt;y&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">x=<span class="number">0</span>,y=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="string">&quot;:&quot;</span>&lt;&lt;y&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">x=<span class="number">0</span>,y=<span class="number">0</span>;<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//21赛制 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;cnt;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i]==<span class="string">&#x27;W&#x27;</span>)x++;</span><br><span class="line"><span class="keyword">if</span>(arr[i]==<span class="string">&#x27;L&#x27;</span>) y++;</span><br><span class="line"><span class="keyword">if</span>((x&gt;=<span class="number">21</span>||y&gt;=<span class="number">21</span>)&amp;&amp;<span class="built_in">abs</span>(x-y)&gt;=<span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="string">&quot;:&quot;</span>&lt;&lt;y&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">x=<span class="number">0</span>,y=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="string">&quot;:&quot;</span>&lt;&lt;y&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;countXXX&quot;&gt;countXXX&lt;/h2&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="-算法" scheme="https://scanfup.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="-算法" scheme="https://scanfup.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>四级日记</title>
    <link href="https://scanfup.github.io/posts/7669356f.html"/>
    <id>https://scanfup.github.io/posts/7669356f.html</id>
    <published>2024-11-20T12:22:00.000Z</published>
    <updated>2024-12-13T14:15:58.965Z</updated>
    
    <content type="html"><![CDATA[<p><strong>四级考试流程</strong>：9:00——9:10 阅读考场注意事项，发放考卷，贴条形码</p><p>9:10——9:40 作文考试</p><p>9:40——10:05 听力测试</p><p>10:05——10:10考试暂停5分钟，收答题卡一(即作文和听力)</p><p>10：10—11:20 完成阅读及翻译</p><hr><p>作文三十分钟，这是固定时间，听力二十五分钟，固定时间，记得填涂答题卡，10：10-11：20，七十分钟写阅读和翻译部分。如果翻译做三十分钟，那么剩下四十十分钟四篇阅读理解</p><p><strong>【2024年6月英语四级总分：710分】</strong></p><p><strong>一、<a href="http://cet4.koolearn.com/zuowen/">英语四级作文</a></strong></p><p>说明：写作部分占整套试卷的15% =106.5分</p><p>在这部分你要达到63.9分为及格。</p><p>时间：30分钟</p><p><strong>二、<a href="http://cet4.koolearn.com/tingli/">英语四级听力</a>部分 =248.5分</strong></p><p>听力部分占整套试题的35%，除听力篇章外每个题都是7.1分。</p><p>1、短篇新闻 7% 共7小题，每小题7.1分。</p><p>2 、长对话 8% 8个题目 每小题7.1分。</p><p>3、听力篇章 20% 共10个小题，每小题14.2分。</p><p>时间：25分钟。在这部分你要达到149分为及格，做对14个左右即可。</p><p><strong>三、<a href="http://cet4.koolearn.com/yuedu/">英语四级阅读理解</a> 35% =248.5分</strong></p><p>阅读部分占整套试题的35%，选词填空每题3.55分，其余每题都是7.1分。</p><p>1、选词填空 5% 10个题，每小题3.55分</p><p>2、长篇阅读 10% 10个题，每小题7.1分。</p><p>3、仔细阅读 20% 10个题 共2篇，一篇5个题，每小题14.2分。</p><p>时间：40分钟 在这部分你要达到149分为及格，做对18个左右即可。</p><p><strong>四、<a href="http://cet4.koolearn.com/beikao/fanyi/">英语四级翻译</a>部分 汉译英 15% 30分钟 =106.5分</strong></p><h1>作文</h1><p>今晚先把作文部分摸一摸：</p><p>一般考题为议论文：大概就是三种：现象解释，观点选择，问题解决，应用文：感谢信，广告，新闻报道，推荐信</p><p><strong>模板构成</strong></p><h2 id="高中的一个很好的作文模板">高中的一个很好的作文模板</h2><h3 id="第一段">第一段</h3><p>overwhelming joy wells up sincerely from the bottom of my heart the moment i hear that</p><p><s>我一听到某事，喜悦之情真诚的油然而生</s> （现象解释类/观点选择类，问题解决类） The following solutions can  account for this issue<s>下面的解决方案能解释这个问题</s></p><h3 id="第二段">第二段</h3><p><code>first and foremost</code>，there is no doubt that +,毫无疑问的是     as far as i am concerned，在我看来，what is well known to us all is that 众所周知的是   <code>Futhermore</code>   as an old saying runs:where there is a will ,there is a way正如古谚语说的那样，有志者事竟成</p><h3 id="第三段">第三段</h3><p>In a word, the whole society should pay  close attention to the problem of（ ）  Only in this way can we have a bright and  promising future.总之，全社会都应该关注（）问题，只有这样我们才能有一个光明和有前途的未来</p><p>i hold the firm belief that我坚信</p><h3 id="一些简单词的替换">一些简单词的替换</h3><ol><li>very-&gt;extremely/surprisingly</li><li>good-&gt;wonderful/fantasitic/brilliant</li><li>beautiful-&gt;appealing/fascinating</li><li>extraordianry特别的，非凡的</li><li>important-&gt;significant/indispensable重要的/必不可少的</li><li>big-&gt;enormous/tremendous大的/巨大的</li><li>about-&gt;concerning/with respect to关于</li><li>change-&gt;transform改变</li><li>finish-&gt;complete,accomplish完成</li><li>must-&gt;necessarily必须</li></ol><hr><h3 id="常用短语">常用短语</h3><ol><li><p>have an enromous passion for喜欢</p></li><li><p>take full advantage of充分利用</p></li><li><p>i have the confidence that从句</p></li><li><p>be thirsty/longing for doing sth</p></li><li><p>with the Mid-Autumn Festival approching中秋节即将到来</p></li><li><p>shape one`s body增强体质</p></li><li><p>keep a balanced diet保持饮食平衡</p></li><li><p>broaden/widen one`s borizons开阔视野</p></li><li><p>take an active partcipation in 积极参与</p></li></ol><h2 id="第一段：">第一段：</h2><p>​<strong>议论文</strong></p><hr><h3 id="现象解释类：">现象解释类：</h3><p>第一句：With the rapid development of  society/economy/education/technology/ culture/medical service（任选）, it is of  great necessity for youngster/students to  improve our speaking ability. --随着（ ）的快速发展，对于（某类人）很有 必要去（做一件事）。 例：随着英语教育的快速 发展，对于学生来说提升口语能力非常重要。</p><p>第二句：it’s quite natural for us to ponder  over the question of__________________. 我们很自然地会想到______这一问题 提出问题</p><h3 id="观点选择类：">观点选择类：</h3><p>第一句 Nowadays （youngsters/students ）have  different options upon graduation.（阐述问 题，背景） Some thinks that（ ）is  beneficial, while others think( )is a  better choice.（列举选择） Personally, I  prefer the former/latter.做出选择 The  following reasons can account for my  preference.</p><h3 id="问题解决类：">问题解决类：</h3><p>第一句： In contemporary(当代的) world, （ ）(现象) I am  convinced that it is of great necessity for 某 人 to （do sth）.（观点） How to address (解决) this problem? The following solutions can  account for this issue.(过渡句)</p><h3 id="图画类：">图画类：</h3><p>As is starkly mirrored（reflected） in the  image/chart（表格）that（一句话）描述图 片）（正如图片中的什么什么赤裸裸的描述的那样） it is revealed that____ （图片内涵）The  following reasons can account for this  issue.（过渡句）</p><p>​<strong>应用文</strong></p><hr><h3 id="信件类作文">信件类作文</h3><p>Dear   John Smith,</p><p>​        My name is Jame Hart,and I am project manager,Thank you for your E-mail last week.I am writing this letter on the behalf of company to let you know about the training progress.The followings are the details.</p><p>​       First thing I want to deliver(传递）is the progress of the project is always carried on according to time on the contract(项目的进度总是按照合同规定的时间进行).Please kindly be informed.Second matter concerned is that the training of the local employees isn’t finished, It is expected to be done in the end of next month,At last the list of training employees is on the  attachment(附件）。</p><p>​      Thank you for your time.</p><p>​                                                Sincerely yours</p><p>​                                                        Jane Hart</p><h3 id="应用文：通知类作文">应用文：通知类作文</h3><p>标题：notice</p><p>人称：第一人称，第三人称</p><p>日期：左上角</p><p>落款：右下角机构名（Student Union)</p><p>​                             Notice</p><p>September 11th</p><p>​         This notice is for the purpose of         描述通知   .This lecture(演讲）is aimed at   通知目的      .The following details can account for this event.</p><p>​         First and foremost,  题目要求的点1  ,   点1补充句  ,Futhermore,there will be   题目要求的点2  ,  点2的补充句  .Last but not least, 题目要求的点3 ,  点3的补充句 .</p><p>​         If you have any questions,you are free to contact at 192389 in the working hours.</p><p>​                                                  Student Union</p><h3 id="新闻报道">新闻报道</h3><hr><p>On December First,Monday,the Student Union organized an meaningful activity to visit the local farm,in which 300 volunteers active <a href="http://participated.It">participated.It</a> turns out to be a great success.</p><p>(时间，地点，人物，事件，结果)</p><p>​           This activity was aimed that     活动目的   ,In the early morning (时间),      事件1     ,     事件1补足句     .After the lunch, 事件2     ,     事件2补足句     .In the evening,  事件3     ,事件3补足句.</p><p>​           This activity turns out to be a beneficial event for both sides.The Student  Union expressed that there will be more meaningful events in the future.(活动意义）</p><h2 id="第二段-2">第二段</h2><h3 id="通用：">通用：</h3><p>第一句（论点一）：First and foremost, there is  no doubt that_______________. 首先毫无疑问的是，________________. 填最简单的句型，保证句子无语法错误</p><p>第二句（论据1）：Based on big data，a  majority of（ successful social elites）  admitted that they have spent 2/3 of their  time in(doing sth) 基于大数据，大部分成功的社会精英承认，他们 花了三分之二的时间做某件事（练口语，这个与主题相关联）</p><p>第三句（论点2）：Furthermore，it is  obvious（很明显的） that____________________.</p><p>第四句：论据2 万能谚语: Where there is/ are _<strong><strong><strong><strong><strong><strong>, there is/are</strong></strong></strong></strong></strong></strong>.<strong>例如Where there are foreign friends, there is  communication, therefore our speaking  ability can be improved.有外国朋友，就有交 流。</strong></p><p>第五句：论点3：Last but not least，no one  can deny that<strong>例如 Last but not least，no one can deny that it is high time that we can travel to a English speaking country, so that our   speaking ability can be enhanced.最后但并非最不重要的一点,没有人可以否认,现在是时候我们可以去英语国家旅行了,这样我们的口语能力就可以得到提高</strong></p><p>第六句：论据3 though_____________, _____________.<strong>例如： Though we don’t have a good language  environment, we can experience it in a short  time. 尽管我们语言环境不好但是我们可以短期体会 它。</strong></p><h2 id="第三段：">第三段：</h2><h3 id="通用：-2">通用：</h3><p>In a word, the whole society should pay  close attention to the problem of（ ）  Only in this way can we have a bright and  promising future.总之，全社会都应该关注（）问题，只有这样我们才能有一个光明和有前途的未来</p><h1>阅读</h1><h2 id="经典阅读填空（十题，每题14-5）">经典阅读填空（十题，每题14.5）</h2><p>这个阅读填空一般很细，它选项的意思不会是特别离谱的，他甚至在文中经常出现，但是就是不选，<strong>某个非常小的点与原文不符，某些答案无中生有，过度推测，同义转述，但是每个答案都跟题目相关，这就需要你好好想想</strong>，而且虽然词汇量占大头，但是对每道题的做题技巧肯定也很重要</p><p>先看选项-&gt;在在段落中用波浪想划出大致的段落-&gt;在从选项中仔细找</p><h2 id="阅读（段落12-15选10）每题7-1">阅读（段落12-15选10）每题7.1</h2><p>这一题是一篇文章12-15个小段落，十个选项，其中有一个段落需要重复选择两次</p><p>首先阅读题目-&gt;然后通读选项，在选项中划出对应的关键词，之后略读课文，找出关键词即可、</p><p><strong>要多看几个词，与词义对应才行，另外看选 项的时候要写出：什么人+做了什么事</strong></p><h2 id="选词填空（10空选15词）每题3-5">选词填空（10空选15词）每题3.5</h2><h1>听力</h1><p>在25分钟时间里听25道题，体型分布为<strong>短篇新闻+长对话+短文理解（7+8+10）</strong>、</p><ol><li><p><em>视听一致</em></p></li><li><p>关键词的选取</p><p>听前要给选项先画出关键词</p></li></ol><p><img src="https://files.catbox.moe/f9bsiy.png" alt=""></p><h1>翻译</h1><p><img src="https://files.catbox.moe/bxcx37.png" alt=""></p><p>​<strong>常用词汇</strong></p><p>originated in起源于play a role in发挥着重要作用agricultural农业的crop农作物be based on 基于—house building住宅建筑decreased gradually逐渐的减少has an important significance有重要意义make a deep impression使–印象深刻</p><p>attaches great importance to重视advocating提倡at present目前Governments at all levels各级政府the quality of—的质量since the reform and opening-up改革开放以来have been continuously improved不断提高be satisfied with满足于no longer—but不是—而是not limited to不再局限于all over the country全国各地pay more attention to更加注重gains widespread popularity获得普遍欢迎be regarded as把—视为folk custom民间习俗for hundreds of years数百年来a branch of一个–的分支originated in起源于</p><h1>一些总是记不住的词</h1><p>authentic 真实的actually 事实上genuinely 真正的rather than 而不是adequate 足够的/充分的sufficient足够的/充足的diverse 不同的，多种多样的diversification变化/多样化prevent阻止hinder阻碍dynamic 动态的reveal揭示refered涉及loyalty忠诚reluctant不情愿的，勉强的employ 雇佣counseling咨询deliver发表latest最新的conventional传统的by no means绝不是literate文学的guilt有罪/内疚get caught捕获policies政策evaluate评估estimated估计的relevant有关的/切题的fundamental基本的/重要的prioritized把–区分优先次序insurance保险anticipate先于–行动/预料rule out排除nourishing滋养regional地域地区features特征hint暗示imply暗示assess评估identify识别gender性别overwhelmed覆盖/淹没neglecting忽视/忽略privilege特权define定义，使明确disastrous灾难性的remarkable异常的，引人注目的scale比例eliminate消除climate气候come from来自于morally道德上convey传达model模仿/模范devices设备/装置addicted上瘾controversial有争议的substantially本质上embrace包含be capable of有能力initial最初的tendency倾向/趋势illegal违法的pick up捡起honor给–以荣誉shifting转变/转化revolution革命instant立即的immediate立即的obesity肥胖presume推测affordable负得起的agricultural农业的extinct灭绝的/灭种的genetic engineering遗传工程motivation动机/动力business performance业绩struggle to竞争(挣扎着)yield出产/收益rivals对手/竞争mentality心态reputation名誉eager渴望/热心monitor监视器traps陷阱stand to坚持multiple多样的/许多的fulid流动的perceive觉察desirable值得拥有的clinic诊所physical体育锻炼exclude排除persistent坚持</p><h1>应试方法的总结</h1><h2 id="作文">作文</h2><p>作文把固定句式记好，剩下的紧扣题意就好，注意的是语法，单词，短语的正确性和不要有错别字</p><h2 id="听力">听力</h2><p>作文一般用不了30分钟，只要没有思路上的卡顿，慢慢写，好好写就行，剩下的时间就开始划听力题，这个一定要把关键词划出来，然后仔细听，听到一个就直接往下一个看，不然把控不住范围</p><h2 id="翻译">翻译</h2><p>翻译的话，和作文差不多，固定句式，单词，语法，一定要对，</p><h2 id="仔细阅读">仔细阅读</h2><p>听力做完就开始仔细阅读，仔细阅读的话分很重，先看题目，然后去文章中匹配段落用波浪线画出来并标注题号，首先其他地方要通读大意，然后画线句仔细阅读并进行匹配，<strong>首先段落一定要匹配好，正确选项一般不仅大概意思匹配观点，而且大概率会有单词和段落相同</strong></p><h2 id="段落匹配">段落匹配</h2><p>首先看选项，在选项中标注好关键词，然后快速的去段落中找，根据试卷结构考虑是倒着写还是正着写，快速准确匹配</p><h2 id="选词填空">选词填空</h2><p>重要的是知道意思，知道每个单词的词性，然后就快速阅读去匹配，五分钟之内完成，<s>选词填空还没复习</s></p><hr><h2 id="最后两个字，细心">最后两个字，细心</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;四级考试流程&lt;/strong&gt;：9:00——9:10 阅读考场注意事项，发放考卷，贴条形码&lt;/p&gt;
&lt;p&gt;9:10——9:40 作文考试&lt;/p&gt;
&lt;p&gt;9:40——10:05 听力测试&lt;/p&gt;
&lt;p&gt;10:05——10:10考试暂停5分钟，收答题卡一(即作文</summary>
      
    
    
    
    <category term="四级" scheme="https://scanfup.github.io/categories/%E5%9B%9B%E7%BA%A7/"/>
    
    
    <category term="四级" scheme="https://scanfup.github.io/tags/%E5%9B%9B%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>java注解</title>
    <link href="https://scanfup.github.io/posts/3f6454bb.html"/>
    <id>https://scanfup.github.io/posts/3f6454bb.html</id>
    <published>2024-11-17T09:36:22.000Z</published>
    <updated>2024-11-17T10:09:48.088Z</updated>
    
    <content type="html"><![CDATA[<h1>注解</h1><p>Java 注解（Annotation）又称 Java 标注，是 JDK5.0 引入的一种注释机制。</p><p>Java 语言中的类、方法、变量、参数和包等都可以被标注。和 Javadoc 不同，Java 标注可以通过反射获取标注内容。在编译器生成类文件时，标注可以被嵌入到字节码中。Java 虚拟机可以保留标注内容，在运行时可以获取到标注内容 。 当然它也支持自定义 Java 标注。</p><hr><p><strong>RetentionPolicy 注解</strong> 是 Java 中用来控制注解在程序的不同阶段保留时间的注解。它可以有以下三种取值：</p><ul><li><strong>SOURCE:</strong> 注解只在源码阶段保留，编译时会被丢弃。主要用于文档注释或者工具处理。</li><li><strong>CLASS:</strong> 注解在编译时保留，但不会写入 class 文件。主要用于编译时代码生成或分析。</li><li><strong>RUNTIME:</strong> 注解在编译时保留，写入 class 文件，并在运行时可以通过反射机制获取。这是最常用的保留策略，常用于框架、配置和动态行为。</li></ul><p><strong>举个例子：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码定义了一个名为 <code>MyAnnotation</code> 的注解，并指定其保留策略为 <code>RUNTIME</code>。这意味着该注解会在运行时保留，可以通过反射获取并使用。</p><p><strong>RetentionPolicy 注解的常见应用场景：</strong></p><ul><li><strong>框架：</strong> Spring 框架广泛使用注解来配置 Bean、注入依赖等。</li><li><strong>ORM 框架：</strong> Hibernate 等 ORM 框架使用注解来映射对象和数据库表。</li><li><strong>自定义注解：</strong> 开发者可以自定义注解来标记代码，并在运行时进行处理。</li></ul><h1>retentionpolicy注解和annotation注解的区别</h1><p><strong>RetentionPolicy</strong> 和 <strong>annotation</strong> 虽然经常一起使用，但它们是两个不同的概念：</p><h2 id="RetentionPolicy">RetentionPolicy</h2><ul><li><p><strong>定义:</strong> RetentionPolicy 是一个 <strong>注解</strong>，用来 <strong>指定</strong> 一个注解（annotation）的 <strong>生命周期</strong>，也就是这个注解在程序的不同阶段（源码、编译期、运行期）是否保留。</p></li><li><p><strong>作用:</strong> 它告诉编译器如何处理被它修饰的注解。</p></li><li><p>取值:</p><p>有三种取值：</p><ul><li><strong>SOURCE:</strong> 注解只在源代码阶段存在，编译时会被丢弃。</li><li><strong>CLASS:</strong> 注解在编译时保留，但不会写入 class 文件。</li><li><strong>RUNTIME:</strong> 注解在编译时保留，写入 class 文件，可以在运行时通过反射获取。</li></ul></li></ul><h2 id="annotation（注解）">annotation（注解）</h2><ul><li><strong>定义:</strong> annotation 是 Java 的一种 <strong>元数据</strong>，用于给程序元素（类、方法、字段等）添加额外的信息。</li><li><strong>作用:</strong> 可以用来生成文档、进行代码检查、实现 AOP 等。</li><li><strong>组成:</strong> 一个注解通常包括注解名、注解参数和 RetentionPolicy 等元注解。</li><li><strong>使用:</strong> 可以将注解应用于类、方法、字段等元素上，提供额外的信息。</li></ul><p><strong>简单来说：</strong></p><ul><li><strong>RetentionPolicy</strong> 是用来控制注解的 <strong>生命周期</strong> 的。</li><li><strong>annotation</strong> 是用来 <strong>标注</strong> 程序元素的。</li></ul><p><strong>举个例子：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中：</p><ul><li><code>@Retention(RetentionPolicy.RUNTIME)</code> 表示 <code>MyAnnotation</code> 这个注解会在运行时保留，可以通过反射获取。</li><li><code>@Target(ElementType.METHOD)</code> 表示 <code>MyAnnotation</code> 这个注解只能用于方法上。</li><li><code>MyAnnotation</code> 是一个自定义的注解，它的作用是给方法添加一个额外的信息。</li></ul><p><strong>总结</strong></p><p>RetentionPolicy 是注解的“元注解”，用来控制注解的生命周期，而 annotation 则是用来给程序元素添加信息的。它们是相辅相成的，RetentionPolicy 决定了注解在什么时候可以被访问和使用。</p><hr><h1>一些annotation注解</h1><ul><li>@Override - 检查该方法是否是重写方法。如果发现其父类，或者是引用的接口中并没有该方法时，会报编译错误。</li><li>@Deprecated - 标记过时方法。如果使用该方法，会报编译警告。</li><li>@SuppressWarnings - 指示编译器去忽略注解中声明的警告。</li></ul><p>作用在其他注解的注解(或者说 元注解)是:</p><ul><li>@Retention - 标识这个注解怎么保存，是只在代码中，还是编入class文件中，或者是在运行时可以通过反射访问。</li><li>@Documented - 标记这些注解是否包含在用户文档中。</li><li>@Target - 标记这个注解应该是哪种 Java 成员。</li><li>@Inherited - 标记这个注解是继承于哪个注解类(默认 注解并没有继承于任何子类)</li></ul><p>从 Java 7 开始，额外添加了 3 个注解:</p><ul><li>@SafeVarargs - Java 7 开始支持，忽略任何使用参数为泛型变量的方法或构造函数调用产生的警告。</li><li>@FunctionalInterface - Java 8 开始支持，标识一个匿名函数或函数式接口。</li><li>@Repeatable - Java 8 开始支持，标识某注解可以在同一个声明上使用多次。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;注解&lt;/h1&gt;
&lt;p&gt;Java 注解（Annotation）又称 Java 标注，是 JDK5.0 引入的一种注释机制。&lt;/p&gt;
&lt;p&gt;Java 语言中的类、方法、变量、参数和包等都可以被标注。和 Javadoc 不同，Java 标注可以通过反射获取标注内容。在编译器生成</summary>
      
    
    
    
    <category term="java" scheme="https://scanfup.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://scanfup.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>hexo 博客搭建及文章管理</title>
    <link href="https://scanfup.github.io/posts/5a8a6c8d.html"/>
    <id>https://scanfup.github.io/posts/5a8a6c8d.html</id>
    <published>2024-11-17T09:36:22.000Z</published>
    <updated>2024-12-25T11:54:40.424Z</updated>
    
    <content type="html"><![CDATA[<p><strong>这篇博文讲一讲hexo博客的搭建及文章管理，也算是我对于暑假的一个交代</strong></p><p><strong>！！！注意：下面的操作是基于你已经安装了node.js和git的前提下进行的，并且拥有github账号</strong></p><h2 id="创建一个blog目录">创建一个blog目录</h2><p>在磁盘任意位置创建一个文件夹，命名为blog，然后打开命令行，进入blog目录，输入以下命令：<br><code>npm install -g hexo-cli</code><br>等待安装完成，然后输入<code>hexo init</code>命令，等待hexo初始化完成。</p><p>初始化完成后，直接<code>hexo server</code>命令启动本地服务器，然后在浏览器中输入<code>http://localhost:4000</code>访问博客。</p><p>此时，你应该可以在该端口看到hexo的默认主题，但是这里只能在端口中显示，别人无法访问，所以我们还需要进行一些配置。</p><h2 id="github-pages配置">github pages配置</h2><h3 id="配置ssh">配置ssh</h3><ol><li>生成sshkey<br>在gitbash下输入 <code>cd ~/.ssh</code>进入该文件，然后<code>ssh keygen -t rsa -C &quot;your_email&quot;</code>生成sshkey，其中your_email为你的github注册邮箱.这个sshkey在C:/user/.ssh/目录下，其中id_rsa是私钥，id_rsa.pub是公钥。</li></ol><p>添加sshkey到github</p><ol><li>打开github，点击右上角头像，选择settings</li><li>点击左侧栏中的SSH and GPG keys，然后点击New SSH key</li><li>将刚刚复制的 ssh key 粘贴到Key输入框中，Title输入框中输入一个标题，然后点击Add SSH key按钮。</li></ol><p>验证：输入命令<code>ssh -T git@github.com</code> 并且输入yes，行末尾会显示你的用户名</p><h3 id="接着在本地绑定与github仓库的链接">接着在本地绑定与github仓库的链接</h3><ol><li>输入命令：<code>git config --global user.name &quot;your_name&quot;</code>，其中your_name为你的github用户名</li><li>输入命令：<code>git config --global user.email &quot;your_email&quot;</code>，其中your_email为你的github注册邮箱</li></ol><h3 id="上传博客">上传博客</h3><ol><li>打开blog文件夹中的_config.yml文件，找到deploy选项，将type改为git，repository改为你的github仓库地址，例如：<a href="https://github.com/%E7%94%A8%E6%88%B7%E5%90%8D/%E7%94%A8%E6%88%B7%E5%90%8D.github.io.git">https://github.com/用户名/用户名.github.io.git</a>，branch改为main，然后保存。</li></ol><h3 id="安装启动工具">安装启动工具</h3><ol><li>输入命令：<code>npm install hexo-deployer-git </code></li><li>输入命令：<code>hexo clean</code></li><li>输入命令：<code>hexo g</code></li><li>输入命令：<code>hexo d</code>部署博客</li></ol><h3 id="访问博客">访问博客</h3><p>打开浏览器，输入<code>https://用户名.github.io</code>访问你的博客。</p><hr><p>至此，你已经成功搭建了自己的hexo博客，那如何管理自己的文章呢？</p><h2 id="文章管理">文章管理</h2><h3 id="新建文章">新建文章</h3><p>在终端输入命令<code>hexo new post -p /文件夹/文件名.md</code>，其中文件夹为你存放文章的文件夹，文件名为你新建文章的名称，<a href="http://xn--siqw5lms6b.md">后缀为.md</a>。</p><p>这样才可以自动生成文章模板，然后就可以编辑文章了。</p><h2 id="一些文件的配置">一些文件的配置</h2><ol><li>_config.yml文件：该文件是hexo博客的配置文件，可以修改博客的名称、主题、端口等。</li></ol><p>其中我们的大部分功能都是在config.butterfly中配置的，该文件的优先级比config大，当两个文件中中又完全相同的功能的时候，config.butterfly会优先覆盖config中相同的功能</p><p>**那config.butterfly文件是怎么来的呢？**这是该主题的配置文件，只需将该主题的config文件复制一份添加到根目录中，然后对此进行修改</p><ol><li>注意路径一定要用url包括，不然无法显示</li></ol><p><img src="https://cdn-fusion.imgimg.cc/i/2024/mAtlfyvAOSTJpie0.png" alt=""></p><h2 id="各种文章书写语法">各种文章书写语法</h2><h3 id="时间轴">时间轴</h3><p>时间轴参考以下语法</p><p><img src="https://cdn-fusion.imgimg.cc/i/2024/5meDWeRUFuuTlk1M.png" alt=""></p><p>其他的俺还没整明白，俺也不知道俺能菜到什么地步呜呜呜</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;这篇博文讲一讲hexo博客的搭建及文章管理，也算是我对于暑假的一个交代&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;！！！注意：下面的操作是基于你已经安装了node.js和git的前提下进行的，并且拥有github账号&lt;/strong&gt;&lt;/p&gt;
&lt;h2 </summary>
      
    
    
    
    <category term="hexo" scheme="https://scanfup.github.io/categories/hexo/"/>
    
    
    <category term="hexo" scheme="https://scanfup.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>关于内部类的一些问题</title>
    <link href="https://scanfup.github.io/posts/3523e9d8.html"/>
    <id>https://scanfup.github.io/posts/3523e9d8.html</id>
    <published>2024-11-17T09:36:22.000Z</published>
    <updated>2024-11-17T10:09:48.092Z</updated>
    
    <content type="html"><![CDATA[<p>这是初始code</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> Inheritable&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InheritableFather</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InheritableFather</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;inheritableather&quot;</span>+InheritableFather.class.isAnnotationPresent(Inheritable.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//interitableson类继承于inheritablefather</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span>  <span class="title class_">InheritableSon</span> <span class="keyword">extends</span> <span class="title class_">InheritableFather</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InheritableSon</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>();<span class="comment">//调用父类构造参数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;inheritableson&quot;</span>+InheritableSon.class.isAnnotationPresent(Inheritable.class));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        InheritableSon is=<span class="keyword">new</span> <span class="title class_">InheritableSon</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，编译器报错</p><p><code>无法从 static 上下文引用 'InheritableFather.this' </code></p><p>这是正确的code</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> Inheritable&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InheritableFather</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InheritableFather</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;inheritableather&quot;</span>+InheritableFather.class.isAnnotationPresent(Inheritable.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//interitableson类继承于inheritablefather</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">InheritableSon</span> <span class="keyword">extends</span> <span class="title class_">InheritableFather</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InheritableSon</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>();<span class="comment">//调用父类构造参数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;inheritableson&quot;</span>+InheritableSon.class.isAnnotationPresent(Inheritable.class)+name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        InheritableFather i=<span class="keyword">new</span> <span class="title class_">InheritableFather</span>();</span><br><span class="line">        InheritableSon is=i.<span class="keyword">new</span> <span class="title class_">InheritableSon</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    String name=<span class="string">&quot;shix&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者说将inheritableson这个内部类改为静态</p><p><strong>还有一种方法就是把这个内部类挪出来</strong></p><p>那为什么会出现这个错误呢？</p><hr><p>是因为<code>InheritableSon</code>类是一个非静态的嵌套类（即内部类），而非静态的嵌套类需要依赖于外部类的实例。也就是说，创建一个非静态嵌套类的实例时，需要首先创建它的外部类的实例。</p><h3 id="为什么-InheritableFather-不报错？">为什么 <code>InheritableFather</code> 不报错？</h3><p><code>InheritableFather</code> 是一个顶层类，不嵌套在其他类中，因此可以直接创建它的实例，而不需要依赖于任何其他类的实例。</p><h3 id="为什么-InheritableSon-报错？">为什么 <code>InheritableSon</code> 报错？</h3><p>因为<code>InheritableSon</code>是一个非静态的嵌套类，它隐式地持有外部类<code>InheritableFather</code>的一个实例引用。当你在<code>main</code>方法中直接创建<code>InheritableSon</code>的实例时，编译器无法自动找到这个外部类实例，导致错误。</p><h3 id="解决方法">解决方法</h3><p>如果你想在没有外部类实例的情况下创建<code>InheritableSon</code>的对象，有两种方法可以选择：</p><ol><li><p><strong>将<code>InheritableSon</code>声明为静态嵌套类</strong>：<br>这样就不需要依赖于外部类实例了，可以直接在<code>main</code>方法中创建<code>InheritableSon</code>对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InheritableFather</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InheritableFather</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;inheritableather &quot;</span> + InheritableFather.class.isAnnotationPresent(Inheritable.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InheritableSon</span> <span class="keyword">extends</span> <span class="title class_">InheritableFather</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">InheritableSon</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>();</span><br><span class="line">            System.out.println(<span class="string">&quot;inheritableson &quot;</span> + InheritableSon.class.isAnnotationPresent(Inheritable.class));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">InheritableSon</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InheritableSon</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>保持<code>InheritableSon</code>为非静态类，但创建外部类实例时嵌套创建</strong>：<br>先创建<code>InheritableFather</code>的实例，然后通过它创建<code>InheritableSon</code>的实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InheritableFather</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InheritableFather</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;inheritableather &quot;</span> + InheritableFather.class.isAnnotationPresent(Inheritable.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InheritableSon</span> <span class="keyword">extends</span> <span class="title class_">InheritableFather</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">InheritableSon</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>();</span><br><span class="line">            System.out.println(<span class="string">&quot;inheritableson &quot;</span> + InheritableSon.class.isAnnotationPresent(Inheritable.class));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">InheritableFather</span> <span class="variable">father</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InheritableFather</span>();</span><br><span class="line">        <span class="type">InheritableSon</span> <span class="variable">son</span> <span class="operator">=</span> father.<span class="keyword">new</span> <span class="title class_">InheritableSon</span>(); <span class="comment">// 通过外部类实例创建内部类实例</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="总结">总结</h3><p>报错的根本原因在于你在静态上下文（<code>main</code>方法）中尝试创建一个非静态嵌套类的实例，而没有提供必要的外部类实例。如果你将<code>InheritableSon</code>改为静态嵌套类，或者在创建<code>InheritableSon</code>实例时提供一个外部类的实例，就可以解决这个问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这是初始code&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;</summary>
      
    
    
    
    <category term="java" scheme="https://scanfup.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://scanfup.github.io/tags/java/"/>
    
  </entry>
  
</feed>
