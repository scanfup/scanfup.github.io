<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>shix🍭</title>
  
  
  <link href="https://scanfup.github.io/atom.xml" rel="self"/>
  
  <link href="https://scanfup.github.io/"/>
  <updated>2025-02-24T09:48:17.226Z</updated>
  <id>https://scanfup.github.io/</id>
  
  <author>
    <name>shix</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>大学课程</title>
    <link href="https://scanfup.github.io/posts/8185b835.html"/>
    <id>https://scanfup.github.io/posts/8185b835.html</id>
    <published>2025-02-23T16:00:00.000Z</published>
    <updated>2025-02-24T09:48:17.226Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySql数据库-初识MySql">MySql数据库-初识MySql</h2><h3 id="第一关：创建数据库">第一关：创建数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database MyDb;</span><br></pre></td></tr></table></figure><h3 id="第二关：创建表">第二关：创建表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_emp(</span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">32</span>),</span><br><span class="line">    deptId <span class="type">int</span>,</span><br><span class="line">    salary <span class="type">float</span></span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="第三关：使用主键约束">第三关：使用主键约束</h3><p>创建t_user1表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_user1 (  </span><br><span class="line">    userId <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,          <span class="comment">-- 用户ID  </span></span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,      <span class="comment">-- 用户名  </span></span><br><span class="line">    password <span class="type">VARCHAR</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,  <span class="comment">-- 密码  </span></span><br><span class="line">    phone <span class="type">VARCHAR</span>(<span class="number">11</span>),               <span class="comment">-- 电话号码  </span></span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">32</span>)                <span class="comment">-- 邮箱  </span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>创建t_user2表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_user2 (  </span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,       <span class="comment">-- 用户名  </span></span><br><span class="line">    phone <span class="type">VARCHAR</span>(<span class="number">11</span>),               <span class="comment">-- 电话号码  </span></span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">32</span>),               <span class="comment">-- 邮箱  </span></span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (name, phone)        <span class="comment">-- 联合主键  </span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="第四关：外键约束">第四关：外键约束</h3><p>创建student表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_student(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key ,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">22</span>),</span><br><span class="line">    classId <span class="type">int</span> ,</span><br><span class="line">    <span class="keyword">constraint</span>  fk_stu_class1 <span class="keyword">foreign</span> key (classId) <span class="keyword">references</span> t_class(id)</span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>创建class表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_class(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key ,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">22</span>),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="第五关：添加常用约束">第五关：添加常用约束</h3><p>创建t_user表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_user (</span><br><span class="line">                        id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY, <span class="comment">-- 用户ID，主键，自动增长  </span></span><br><span class="line">                        username <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span>, <span class="comment">-- 用户名，非空，唯一  </span></span><br><span class="line">                        sex <span class="type">VARCHAR</span>(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;男&#x27;</span> <span class="comment">-- 性别，默认为“男”  </span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="数据表中数据的插入，修改和删除">数据表中数据的插入，修改和删除</h2><h3 id="数据表中插入一条记录，对指定字段赋值">数据表中插入一条记录，对指定字段赋值</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> reader (xm, dhhm) <span class="keyword">VALUES</span> (<span class="string">&#x27;林团团&#x27;</span>, <span class="string">&#x27;13507311234&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="数据表中插入一条记录，对所有字段赋值">数据表中插入一条记录，对所有字段赋值</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> reader(dzzh,xm,xb,sf,dhhm)va1ues(<span class="number">2</span>,陈洁<span class="string">&#x27;，&#x27;</span>女<span class="string">&#x27;，&#x27;</span>教研人员<span class="string">&#x27;，13319551234)；</span></span><br></pre></td></tr></table></figure><h3 id="数据表中插入多条记录">数据表中插入多条记录</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> reader(xm,xb,sf,dhhm) <span class="keyword">values</span></span><br><span class="line">    (<span class="string">&#x27;黄小小&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;研究生&#x27;</span>,<span class="number">13316789987</span>),</span><br><span class="line">    (<span class="string">&#x27;刘大任&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;工作人员&#x27;</span>,<span class="number">18012341234</span>),</span><br><span class="line">    (<span class="string">&#x27;邓朝阳&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;研究生&#x27;</span>,<span class="number">17716554432</span>);</span><br></pre></td></tr></table></figure><h3 id="在数据表中修改单条数据记录的单个字段的值">在数据表中修改单条数据记录的单个字段的值</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> reader <span class="keyword">SET</span> dhhm <span class="operator">=</span> <span class="string">&#x27;17718991989&#x27;</span> <span class="keyword">WHERE</span> xm <span class="operator">=</span> <span class="string">&#x27;林团团&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="在数据表中修改单条记录的多个字段的值">在数据表中修改单条记录的多个字段的值</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> reader <span class="keyword">set</span> dhhm<span class="operator">=</span><span class="string">&#x27;13315667745&#x27;</span>,sf<span class="operator">=</span><span class="string">&#x27;工作人员&#x27;</span> <span class="keyword">where</span> xm<span class="operator">=</span><span class="string">&#x27;陈洁&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="修改数据表的多条记录">修改数据表的多条记录</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> reader <span class="keyword">set</span> dzzh<span class="operator">=</span>dzzh<span class="operator">+</span><span class="number">10</span>;</span><br></pre></td></tr></table></figure><h3 id="删除数据表中的记录">删除数据表中的记录</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> reader <span class="keyword">WHERE</span> xm <span class="operator">=</span> <span class="string">&#x27;陈洁&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="删除数据表中的多条记录">删除数据表中的多条记录</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> reader <span class="keyword">where</span> sf<span class="operator">=</span><span class="string">&#x27;研究生&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="删除数据表中的所有数据">删除数据表中的所有数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> reader;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;MySql数据库-初识MySql&quot;&gt;MySql数据库-初识MySql&lt;/h2&gt;
&lt;h3 id=&quot;第一关：创建数据库&quot;&gt;第一关：创建数据库&lt;/h3&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter</summary>
      
    
    
    
    <category term="大学课程" scheme="https://scanfup.github.io/categories/%E5%A4%A7%E5%AD%A6%E8%AF%BE%E7%A8%8B/"/>
    
    
    <category term="大学课程" scheme="https://scanfup.github.io/tags/%E5%A4%A7%E5%AD%A6%E8%AF%BE%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>注解</title>
    <link href="https://scanfup.github.io/posts/a70f4376.html"/>
    <id>https://scanfup.github.io/posts/a70f4376.html</id>
    <published>2025-02-22T16:00:00.000Z</published>
    <updated>2025-02-24T02:12:39.525Z</updated>
    
    <content type="html"><![CDATA[<h1>Spring 和 MyBatis 常用注解解析</h1><h2 id="1-Override-方法重写">1. <code>@Override</code> - 方法重写</h2><p>用于标注<strong>子类重写父类的方法</strong>，有助于编译器检查，防止拼写错误或方法签名不匹配。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-Service-标记业务层服务">2. <code>@Service</code> - 标记业务层服务</h2><p><code>@Service</code> 是 Spring 的<strong>组件注解</strong>，用于标记<strong>业务逻辑层</strong>的类，使其被 Spring 容器管理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;User registered!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-Autowired-依赖注入">3. <code>@Autowired</code> - 依赖注入</h2><p><code>@Autowired</code> 用于<strong>自动注入</strong> Spring 容器中的 Bean，常用于<strong>构造函数、方法或字段</strong>上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="4-Slf4j-日志支持">4. <code>@Slf4j</code> - 日志支持</h2><p><code>@Slf4j</code> 是 Lombok 提供的注解，自动生成 <code>log</code> 变量，可用于<strong>日志记录</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;Executing service...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="5-Data-Lombok-的-Getter、Setter、toString">5. <code>@Data</code> - Lombok 的 Getter、Setter、toString</h2><p><code>@Data</code> 是 Lombok 提供的快捷注解，自动生成<strong>Getter、Setter、toString、equals、hashCode</strong> 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="6-NoArgsConstructor-无参构造函数">6. <code>@NoArgsConstructor</code> - 无参构造函数</h2><p>Lombok 提供的注解，自动生成<strong>无参构造方法</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;&#125; <span class="comment">// 无参构造</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="7-AllArgsConstructor-全参构造函数">7. <code>@AllArgsConstructor</code> - 全参构造函数</h2><p>Lombok 提供的注解，自动生成<strong>全参数构造方法</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="8-Mapper-MyBatis-映射接口">8. <code>@Mapper</code> - MyBatis 映射接口</h2><p><code>@Mapper</code> 用于标注 <strong>MyBatis 的 Mapper 接口</strong>，使其被 Spring 管理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="9-Select-MyBatis-查询语句">9. <code>@Select</code> - MyBatis 查询语句</h2><p><code>@Select</code> 用于 MyBatis <strong>查询数据</strong>，可以直接在接口上定义 SQL 语句。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;SELECT * FROM users WHERE id = #&#123;id&#125;&quot;)</span></span><br><span class="line">User <span class="title function_">findById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="10-Delete-MyBatis-删除语句">10. <code>@Delete</code> - MyBatis 删除语句</h2><p><code>@Delete</code> 用于 MyBatis <strong>删除数据</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Delete(&quot;DELETE FROM users WHERE id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="11-Insert-MyBatis-插入语句">11. <code>@Insert</code> - MyBatis 插入语句</h2><p><code>@Insert</code> 用于 MyBatis <strong>插入数据</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Insert(&quot;INSERT INTO users (name, age) VALUES (#&#123;name&#125;, #&#123;age&#125;)&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="12-GetMapping-处理-HTTP-GET-请求">12. <code>@GetMapping</code> - 处理 HTTP GET 请求</h2><p><code>@GetMapping</code> 用于 Spring MVC 处理 <strong>GET 请求</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getAllUsers</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> userService.findAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/users&quot;, method = RequestMethod.GET)</span></span><br></pre></td></tr></table></figure><hr><h2 id="13-RequestParam-获取请求参数">13. <code>@RequestParam</code> - 获取请求参数</h2><p><code>@RequestParam</code> 用于<strong>获取 URL 传递的参数</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span> <span class="type">int</span> userId)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> userService.findById(userId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问 <code>/user?id=1</code>，则 <code>userId = 1</code>。</p><hr><h2 id="14-DateTimeFormat-日期格式化">14. <code>@DateTimeFormat</code> - 日期格式化</h2><p><code>@DateTimeFormat</code> 用于<strong>格式化日期参数</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/date&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">formatDate</span><span class="params">(<span class="meta">@RequestParam(&quot;date&quot;)</span> <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> LocalDate date)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Formatted date: &quot;</span> + date;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求 <code>/date?date=2024-02-23</code>，参数 <code>date</code> 会自动转换为 <code>LocalDate</code>。</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Spring 和 MyBatis 常用注解解析&lt;/h1&gt;
&lt;h2 id=&quot;1-Override-方法重写&quot;&gt;1. &lt;code&gt;@Override&lt;/code&gt; - 方法重写&lt;/h2&gt;
&lt;p&gt;用于标注&lt;strong&gt;子类重写父类的方法&lt;/strong&gt;，有助于编译器检查，防</summary>
      
    
    
    
    <category term="springboot黑马综合案例" scheme="https://scanfup.github.io/categories/springboot%E9%BB%91%E9%A9%AC%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/"/>
    
    
    <category term="springboot黑马综合案例" scheme="https://scanfup.github.io/tags/springboot%E9%BB%91%E9%A9%AC%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>mybatis</title>
    <link href="https://scanfup.github.io/posts/15832afd.html"/>
    <id>https://scanfup.github.io/posts/15832afd.html</id>
    <published>2025-02-22T16:00:00.000Z</published>
    <updated>2025-02-23T14:14:01.745Z</updated>
    
    <content type="html"><![CDATA[<p><strong>mybatis 是一款优秀的持久层框架，用于简化jdbc的开发</strong></p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250221081317979.png" alt="image-20250221081317979"></p><h2 id="jdbc">jdbc</h2><p>jdbc是sum公司提供的一套操作关系型数据库的api</p><h2 id="lombok">lombok</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250221094800505.png" alt="image-20250221094800505"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;mybatis 是一款优秀的持久层框架，用于简化jdbc的开发&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/scanfup/img-bag1/main/image-202502210</summary>
      
    
    
    
    <category term="springboot黑马综合案例" scheme="https://scanfup.github.io/categories/springboot%E9%BB%91%E9%A9%AC%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/"/>
    
    
    <category term="springboot黑马综合案例" scheme="https://scanfup.github.io/tags/springboot%E9%BB%91%E9%A9%AC%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>sql</title>
    <link href="https://scanfup.github.io/posts/dbd66adf.html"/>
    <id>https://scanfup.github.io/posts/dbd66adf.html</id>
    <published>2025-02-22T16:00:00.000Z</published>
    <updated>2025-02-23T14:14:19.605Z</updated>
    
    <content type="html"><![CDATA[<h1>sql（单表设计）</h1><p>启动MySQL</p><p>查看已有数据库<code>show databases;</code></p><p>创建数据库：<code>create database+数据库名字 DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</code></p><p>删除数据库<code>drop database +名字</code></p><p>进入数据库：<code>use +数据库;</code></p><p>查看文件夹中所有数据表:<code>show tables;</code></p><h2 id="创建表：">创建表：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table 表名称(</span><br><span class="line">列名称 类型，</span><br><span class="line">列名称 类型，</span><br><span class="line">列名称 类型</span><br><span class="line">)default charset=utf8;</span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table tb1(</span><br><span class="line">    id int,</span><br><span class="line">    name varchar(16),</span><br><span class="line">    age int</span><br><span class="line">) default charset=utf8;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table tb1(</span><br><span class="line">    id int,</span><br><span class="line">    name varchar(16) not null, -- 不允许为空</span><br><span class="line">    age int null,             -- 允许为空</span><br><span class="line">) default charset=utf8;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table tb1(</span><br><span class="line">    id int,</span><br><span class="line">    name varchar(16) not null, -- 不允许为空</span><br><span class="line">    age int default 3 -- 插入数据时，age列的值默认为3</span><br><span class="line">) default charset=utf8;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table tb1(</span><br><span class="line">    id int primary key, -- 主键，不允许为空，不允许重复</span><br><span class="line">    name varchar(16) ,</span><br><span class="line">    age int          </span><br><span class="line">) default charset=utf8;</span><br></pre></td></tr></table></figure><p>主键一般用于表示当前行的数据的编号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table tb1(</span><br><span class="line">    id int auto_increament primary key, -- 主键，自增，内部维护</span><br><span class="line">    name varchar(16) not null, -- 不允许为空 </span><br><span class="line">    age int null,             -- 允许为空</span><br><span class="line">) default charset=utf8;</span><br></pre></td></tr></table></figure><p><strong>一般的标准情况</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table tb1(</span><br><span class="line">    id int not null auto_increment primary key,</span><br><span class="line">    name varchar(16) ,</span><br><span class="line">    age int </span><br><span class="line">) default charset=utf8;</span><br></pre></td></tr></table></figure><p>查看表结构：<code>desc tb1</code></p><p>常用数据类型：<code>tinyint int bigint</code>三个，数据范围不一样</p><p>表示小数<code>float double decimal</code></p><p>准确的小数值，m是数字总个数（符号不算)d是小数后个数，m最大值为65，d最大值为30</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb3&#123;</span><br><span class="line">id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">salary <span class="type">decimal</span>(<span class="number">8</span>,<span class="number">2</span>)</span><br><span class="line">&#125;<span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>char 定长字符串：char(11)固定用11个字符串进行存储</li><li>varchar变长字符串：varchar(11)，真实数据有多长按多长存储</li><li>mediumtext</li><li>longtext</li><li>datetime<code>YYYY-MM-DD HH:MM:SS(1000-01-01 00:00:00/9999-12-31 23:59:59)</code></li><li>date<code>YYYY-MM-DD (1000-01-01/9999-12-31)</code></li></ul><p>用户表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb7(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">primary</span> key auto_increment,<span class="comment">-- id，不空，主键，自动递增</span></span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    password <span class="type">char</span>(<span class="number">64</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    email <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    age tinyint,</span><br><span class="line">    salary <span class="type">decimal</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">    ctime datetime</span><br><span class="line">)<span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p><strong>有符号：范围是 -128 到 127。<br>无符号：范围是 0 到 255。</strong></p><h2 id="删除数据">删除数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件</span><br><span class="line"><span class="comment">---</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tb2 <span class="keyword">where</span> id<span class="operator">=</span><span class="number">4</span> <span class="keyword">and</span> name<span class="operator">=</span>&quot;侯卓林&quot;;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tb2 <span class="keyword">where</span> id<span class="operator">&gt;</span><span class="number">4</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tb2 <span class="keyword">where</span> id<span class="operator">!=</span><span class="number">4</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tb2 <span class="keyword">where</span> id <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">5</span>);</span><br></pre></td></tr></table></figure><h2 id="修改数据">修改数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 列<span class="operator">=</span>值</span><br><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 列<span class="operator">=</span>值 <span class="keyword">where</span> 条件</span><br><span class="line"><span class="comment">---</span></span><br><span class="line"><span class="keyword">update</span> tb2 <span class="keyword">set</span> email<span class="operator">=</span>&quot;好好好&quot; <span class="keyword">where</span> id<span class="operator">&gt;</span><span class="number">5</span>;</span><br><span class="line"><span class="keyword">update</span> tb2 <span class="keyword">set</span> age<span class="operator">=</span>age<span class="operator">+</span><span class="number">10</span> <span class="keyword">where</span> id<span class="operator">&gt;</span><span class="number">5</span>;</span><br></pre></td></tr></table></figure><h2 id="查询数据">查询数据</h2><h3 id="基本查询">基本查询</h3><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218171230674.png" alt="image-20250218171230674"></p><h3 id="条件查询">条件查询</h3><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218193046586.png" alt="image-20250218193046586"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名称 <span class="comment">-- 不直观，性能低</span></span><br><span class="line"><span class="keyword">select</span> 列名称，列名称 <span class="keyword">from</span> 表名称</span><br><span class="line"><span class="keyword">select</span> 列名称，列名称 <span class="keyword">from</span> 表名称 <span class="keyword">where</span> 条件</span><br><span class="line"><span class="comment">---</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb7</span><br><span class="line"><span class="comment">-- 查询id小于等于5的员工信息</span></span><br><span class="line"><span class="keyword">select</span> id,name <span class="keyword">from</span> tb7 <span class="keyword">where</span> id<span class="operator">&gt;</span><span class="number">10</span>;</span><br><span class="line"><span class="keyword">select</span> id,name <span class="keyword">from</span> tb7 <span class="keyword">where</span> name<span class="operator">=</span>&quot;xx&quot; <span class="keyword">and</span> password<span class="operator">=</span>&quot;xx&quot;;</span><br><span class="line"><span class="comment">-- 为查询的表结构起别名</span></span><br><span class="line"><span class="keyword">select</span> name 姓名,entrydate 入职日期 <span class="keyword">from</span> 表名称</span><br><span class="line"><span class="comment">-- 查询没有分配职位的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> job <span class="keyword">is</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">-- 查询密码不等于‘123456’的员工</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> password <span class="operator">!=</span> ‘<span class="number">123456</span>’</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> password <span class="operator">&lt;&gt;</span> ‘<span class="number">123456</span>’</span><br><span class="line"><span class="comment">-- 查询入职日期在‘2000-01-01’（包含）到‘2010-01-01’（包含）之间的员工信息</span></span><br><span class="line"><span class="keyword">select</span>  <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> entrydate <span class="keyword">between</span> <span class="string">&#x27;2010-01-01&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2010-12-31&#x27;</span>;</span><br><span class="line"><span class="comment">-- 查询入职日期在2010年1月1日到2010年12月31日的员工，并且性别为女</span></span><br><span class="line"><span class="keyword">select</span>  <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> entrydate <span class="keyword">between</span> <span class="string">&#x27;2010-01-01&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2010-12-31&#x27;</span> <span class="keyword">and</span> sex<span class="operator">=</span><span class="string">&#x27;2&#x27;</span>;</span><br><span class="line"><span class="comment">-- 擦汗寻职位是2，3，4的员工信息</span></span><br><span class="line"><span class="keyword">select</span>  <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> job <span class="keyword">in</span> (<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line"><span class="comment">-- 查询姓名为两个字的员工</span></span><br><span class="line"><span class="keyword">select</span>  <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;__&#x27;</span>;<span class="comment">-- 一个下划线代表一个字</span></span><br><span class="line"><span class="comment">-- 查询姓为张的员工信息</span></span><br><span class="line"><span class="keyword">select</span>  <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;张%&#x27;</span>;<span class="comment">-- %代表一个或者多个字</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="DQL聚合查询">DQL聚合查询</h3><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218194631819.png" alt="image-20250218194631819"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 聚合函数 聚合函数不对null值进行判断</span></span><br><span class="line"><span class="comment">-- 统计该企业员工数量</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(id) <span class="keyword">from</span> tb_emp;</span><br><span class="line"><span class="comment">-- 统计该企业最早入职的员工</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(entrydate) <span class="keyword">from</span> tb_emp;</span><br><span class="line"><span class="comment">-- 统计该企业最晚入职的员工</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(entrydate) <span class="keyword">from</span> tb_emp;</span><br><span class="line"><span class="comment">-- 统计该企业平均工资</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(salary) <span class="keyword">from</span> tb_emp;</span><br><span class="line"><span class="comment">-- 统计该企业工资总和</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(salary) <span class="keyword">from</span> tb_emp;</span><br></pre></td></tr></table></figure><h3 id="分组查询">分组查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 根据性别分组，统计男性和女性员工的数量</span></span><br><span class="line"><span class="keyword">select</span> sex,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> tb_emp <span class="keyword">group</span> <span class="keyword">by</span> sex;</span><br><span class="line"><span class="comment">-- 查询是入职时间在2010年1月1日之后，并且对结果根据职位进行分组，获取员工数量大于等于2的员工</span></span><br><span class="line"><span class="keyword">select</span> job,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> tb_emp <span class="keyword">where</span> entrydate<span class="operator">&gt;</span><span class="string">&#x27;2010-01-01&#x27;</span> <span class="keyword">group</span> <span class="keyword">by</span> job <span class="keyword">having</span> <span class="built_in">count</span>(<span class="operator">*</span>)<span class="operator">&gt;=</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure><h3 id="排序查询">排序查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 排序查询</span></span><br><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名[<span class="keyword">where</span> 条件列表] [<span class="keyword">group</span> <span class="keyword">by</span> 分组字段] <span class="keyword">order</span> <span class="keyword">by</span> 字段<span class="number">1</span>，排序方式<span class="number">1</span>，字段<span class="number">2</span>，排序方式<span class="number">2</span>;</span><br><span class="line"><span class="comment">-- 根据入职时间，对员工进行升序排序</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">order</span> <span class="keyword">by</span> entrydate <span class="keyword">asc</span>;<span class="comment">-- asc升序</span></span><br><span class="line"><span class="comment">-- 根据入职时间，对员工进行降序排序</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">order</span> <span class="keyword">by</span> entrydate <span class="keyword">desc</span>;</span><br><span class="line"><span class="comment">-- 根据入职时间，对员工进行升序排序，如果入职时间相同，则根据更新时间进行降序排序</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">order</span> <span class="keyword">by</span> entrydate <span class="keyword">asc</span>,updateTime <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><h3 id="分页查询">分页查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 从起始索引0开始查询员工数据，每页展示5条记录</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp limit <span class="number">0</span>,<span class="number">5</span>;</span><br><span class="line"><span class="comment">-- 查询第二页员工数据，每页展示5条记录</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp limit <span class="number">5</span>,<span class="number">5</span>;</span><br><span class="line"><span class="comment">-- 查询第三页员工数据，每页展示5条记录</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp limit <span class="number">10</span>,<span class="number">5</span>;</span><br></pre></td></tr></table></figure><h1>sql（多表设计）</h1><p><strong>多表设计的意思就是，现在有一个员工表和一个部门表，员工表里面有个部门，现在需要把员工表里放置一个部门的信息</strong></p><h2 id="一对多">一对多</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218202017302.png" alt="image-20250218202017302"></p><p><strong>但是这样创建的两张表是相互独立的，没有任何联系</strong></p><p><strong>这就引出了外键约束</strong></p><h2 id="外键约束">外键约束</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218202354233.png" alt="image-20250218202354233"></p><p><strong>如何设置外键约束</strong></p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218202647192.png" alt="image-20250218202647192" style="zoom:50%;" /><p><strong>但是物理外键有缺点，什么缺点呢？</strong></p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218202911568.png" alt="image-20250218202911568" style="zoom:50%;" /><h3 id="一对一">一对一</h3><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218204900826.png" alt="image-20250218204900826"></p><h2 id="多对多">多对多</h2><p><strong>一个学生可以选择多门课程，而一个课程也可以由多个学生选择</strong></p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218205221728.png" alt="image-20250218205221728"></p><hr><p>剩下的sql等听到了需要的时候再看吧</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;sql（单表设计）&lt;/h1&gt;
&lt;p&gt;启动MySQL&lt;/p&gt;
&lt;p&gt;查看已有数据库&lt;code&gt;show databases;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;创建数据库：&lt;code&gt;create database+数据库名字 DEFAULT CHARSET utf8 COLLA</summary>
      
    
    
    
    <category term="springboot黑马综合案例" scheme="https://scanfup.github.io/categories/springboot%E9%BB%91%E9%A9%AC%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/"/>
    
    
    <category term="springboot黑马综合案例" scheme="https://scanfup.github.io/tags/springboot%E9%BB%91%E9%A9%AC%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>tomcat</title>
    <link href="https://scanfup.github.io/posts/9240bb8c.html"/>
    <id>https://scanfup.github.io/posts/9240bb8c.html</id>
    <published>2025-02-22T16:00:00.000Z</published>
    <updated>2025-02-23T14:14:31.338Z</updated>
    
    <content type="html"><![CDATA[<h1>什么是tomcat</h1><p>Tomcat 是由Apache软件基金会开发的一个开源的轻量级Web服务器，主要用于部署和运行Java Servlet和JavaServer Pages (JSP) 技术构建的Web应用。以下是关于Tomcat的一些关键点：</p><ul><li><strong>Java Web应用容器</strong>：Tomcat作为Servlet容器，实现了Java EE（现Jakarta EE）规范中的Servlet、JSP、WebSocket等技术标准。</li><li><strong>开源免费</strong>：它是完全免费的，并且源代码开放，允许开发者根据需要进行修改和定制。</li><li><strong>轻量级与高效性</strong>：相比其他全功能的应用服务器，Tomcat更为轻便，启动速度快，资源占用少。</li><li><strong>易于配置和管理</strong>：提供了简单的XML配置文件来设置各种参数，同时也支持图形界面工具来进行管理和监控。</li><li><strong>广泛使用</strong>：由于其稳定性和灵活性，在中小型网站以及企业级应用中被广泛应用。</li></ul><p>对于Java开发者来说，Tomcat是一个非常重要的工具，它为开发、测试和部署Java Web应用程序提供了必要的环境。</p><h2 id="目录">目录</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250217193648913.png" alt="image-20250217193648913"></p><h2 id="端口号">端口号</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250217194109266.png" alt="image-20250217194109266"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;什么是tomcat&lt;/h1&gt;
&lt;p&gt;Tomcat 是由Apache软件基金会开发的一个开源的轻量级Web服务器，主要用于部署和运行Java Servlet和JavaServer Pages (JSP) 技术构建的Web应用。以下是关于Tomcat的一些关键点：&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="springboot黑马综合案例" scheme="https://scanfup.github.io/categories/springboot%E9%BB%91%E9%A9%AC%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/"/>
    
    
    <category term="springboot黑马综合案例" scheme="https://scanfup.github.io/tags/springboot%E9%BB%91%E9%A9%AC%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>分层解耦</title>
    <link href="https://scanfup.github.io/posts/3ca78541.html"/>
    <id>https://scanfup.github.io/posts/3ca78541.html</id>
    <published>2025-02-22T16:00:00.000Z</published>
    <updated>2025-02-23T14:14:49.816Z</updated>
    
    <content type="html"><![CDATA[<h2 id="三层架构">三层架构</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218085900406.png" alt="image-20250218085900406"></p><p><strong>三层架构在项目文件中的分布</strong></p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218090001132.png" alt="image-20250218090001132"></p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218091624703.png" alt="image-20250218091624703"></p><p><strong>软件设计的原则，高内聚低耦合</strong></p><p>高内聚：软件中各个功能模块内部的功能联系紧密，每个模块的功能实现具体</p><p>低耦合：软件中各个层/模块之间的依赖，关联的程度低</p><h2 id="分层解耦的思想">分层解耦的思想</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218092534276.png" alt="image-20250218092534276"></p><h2 id="IOC-DI入门">IOC&amp;DI入门</h2><p>service层以及dao层的实现类，交给IOC容器管理</p><p>为controller及service注入运行时，依赖的对象</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218121431169.png" alt="image-20250218121431169"></p><p><strong>@RestController 主要用于开发 RESTful API，适用于需要返回 JSON 或 XML 格式数据的 Web 服务</strong></p><p><strong>Bean 是 Spring 框架的核心概念之一，它代表了由 Spring 容器管理的对象。通过声明式配置和依赖注入，可以轻松地管理和组织应用程序中的组件，提高代码的可维护性和灵活性。理解 Bean 的定义、作用域和生命周期对于开发高质量的 Spring 应用程序至关重要</strong></p><h2 id="bean的声明">bean的声明</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218133309268.png" alt="image-20250218133309268"></p><ul><li><p>声明bean的时候，可以通过value属性指定bean的名字，如果没有指定，默认为类名首字母小写</p></li><li><p>使用以上四个注解都可以声明bean，但是在springboot集成web开发中，声明控制器bean只能用@controller</p></li></ul><h2 id="bean组件扫描">bean组件扫描</h2><p>被组件扫描后才能进行生效</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218133918237.png" alt="image-20250218133918237"></p><p>所以java会默认扫描启动类所在包及其子包，但是如果bean在启动类所在包之外，那么该组件不能生效</p><h2 id="bean注入相同类型解决方案-DI">bean注入相同类型解决方案|DI</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218135154886.png" alt="image-20250218135154886"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;三层架构&quot;&gt;三层架构&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218085900406.png&quot; alt=&quot;image-2025021</summary>
      
    
    
    
    <category term="springboot黑马综合案例" scheme="https://scanfup.github.io/categories/springboot%E9%BB%91%E9%A9%AC%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/"/>
    
    
    <category term="springboot黑马综合案例" scheme="https://scanfup.github.io/tags/springboot%E9%BB%91%E9%A9%AC%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>综合案例</title>
    <link href="https://scanfup.github.io/posts/40101b37.html"/>
    <id>https://scanfup.github.io/posts/40101b37.html</id>
    <published>2025-02-22T16:00:00.000Z</published>
    <updated>2025-02-23T14:11:30.392Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础环境搭建">基础环境搭建</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250221114947965.png" alt="image-20250221114947965"></p><h2 id="构成">构成</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250221164201042.png" alt="image-20250221164201042"></p><p><strong>pojo提供数据类型</strong></p><hr><h2 id="三层框架">三层框架</h2><p>首先是控制层controller，负责处理http请求，调用dervice返回数据</p><p>例如，DeptController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DeptService deptService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@RequestMapping(value = &quot;/depts&quot; , method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/depts&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;查询所有部门数据&quot;</span>);</span><br><span class="line">        List&lt;Dept&gt; deptList = deptService.list();</span><br><span class="line">        <span class="keyword">return</span> Result.success(deptList);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/depts/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;根据id删除部门:&#123;&#125;&quot;</span>,id);</span><br><span class="line">        deptService.delete(id);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这是控制层的部门部分，定义了方法，路径，使用deptservice方法去获取员工数据，下面转到deptservice文件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DeptService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有的部门数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>   存储Dept对象的集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Dept&gt; <span class="title function_">list</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>deptservice接口里面使用list方法去获取了数据</p><p>那么这个list方法的实现在deptservicelmpl.java文件里面，移步到该文件，定义了list方法和delete方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptServicelmpl</span> <span class="keyword">implements</span> <span class="title class_">DeptService</span> &#123;<span class="comment">//集成deptservice接口</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DeptMapper deptMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//这里定义list方法，返回该数据</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Dept&gt; <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Dept&gt; deptList = deptMapper.list();</span><br><span class="line">        <span class="keyword">return</span> deptList;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">        deptMapper.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后方法里的deptMapper.list()又调用了deptMapper里面的方法，将数据库返回的数据相应到了list里边，</p><p><strong>至此整个数据的响应完成</strong></p><h2 id="条件筛选查询">条件筛选查询</h2><p>首先在enpcontroler里面配置好查询筛选参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Result <span class="title function_">page</span><span class="params">(<span class="meta">@RequestParam(defaultValue = &quot;1&quot;)</span> Integer page,</span></span><br><span class="line"><span class="params">                       <span class="meta">@RequestParam(defaultValue = &quot;10&quot;)</span> Integer pageSize,</span></span><br><span class="line"><span class="params">                       String name, <span class="type">short</span> gender,</span></span><br><span class="line"><span class="params">                       <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span>LocalDate begin,</span></span><br><span class="line"><span class="params">                       <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span>LocalDate end)</span>&#123;</span><br><span class="line">        <span class="comment">//输入日志</span></span><br><span class="line">        log.info(<span class="string">&quot;分页查询参数&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;&quot;</span>,page,pageSize,name,gender,begin,end);</span><br><span class="line">        <span class="comment">//调用empservce方法返回参数</span></span><br><span class="line">        PageBean pageBean=empService.page(page,pageSize,name,gender,begin,end);</span><br><span class="line">        <span class="keyword">return</span> Result.success(pageBean);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然后再page里面实现</p><p>接口声明方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpService</span> &#123;</span><br><span class="line">    <span class="comment">//接口里边声明方法</span></span><br><span class="line">    PageBean <span class="title function_">page</span><span class="params">(Integer page, Integer pageSize, String name, Short gender, LocalDate begin, LocalDate end)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后实现方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> PageBean <span class="title function_">page</span><span class="params">(Integer page, Integer pageSize, String name, Short gender, LocalDate begin, LocalDate end)</span> &#123;</span><br><span class="line">    <span class="comment">// 设置分页参数</span></span><br><span class="line">    PageHelper.startPage(page, pageSize);</span><br><span class="line">    <span class="comment">// 执行查询</span></span><br><span class="line">    List&lt;Emp&gt; empList = empMapper.list(name, gender, begin, end);</span><br><span class="line">    <span class="comment">// 获取Page对象</span></span><br><span class="line"><span class="comment">//    Page&lt;Emp&gt; p = (Page&lt;Emp&gt;) empList;</span></span><br><span class="line">        Page&lt;Emp&gt; newPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line">        newPage.addAll(empList);</span><br><span class="line">        newPage.setTotal(empList.size());</span><br><span class="line">    <span class="comment">// 封装到pageBean中</span></span><br><span class="line">    <span class="type">PageBean</span> <span class="variable">pageBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageBean</span>(newPage.getTotal(), newPage.getResult());</span><br><span class="line">    <span class="keyword">return</span> pageBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于list的查询语句</p><p>使用EmpMapper进行映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itheima.mapper.EmpMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itheima.pojo.Emp&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">       from emp</span><br><span class="line">       <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name!=null &quot;</span>&gt;</span></span><br><span class="line">               name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class="line">           <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender!=null&quot;</span>&gt;</span></span><br><span class="line">               and gender=#&#123;gender&#125;</span><br><span class="line">           <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;begin!=null and end != null&quot;</span>&gt;</span></span><br><span class="line">               and entrydate between #&#123;begin&#125; and #&#123;end&#125;</span><br><span class="line">           <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    order by update_time desc</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里我运行的时候会报一个错</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250223214647806.png" alt="image-20250223214647806"></p><p>这是我原来的page方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> PageBean <span class="title function_">page</span><span class="params">(Integer page, Integer pageSize, String name, Short gender, LocalDate begin, LocalDate end)</span> &#123;</span><br><span class="line">        <span class="comment">// 设置分页参数</span></span><br><span class="line">        PageHelper.startPage(page, pageSize);</span><br><span class="line">        <span class="comment">// 执行查询</span></span><br><span class="line">        List&lt;Emp&gt; empList = empMapper.list(name, gender, begin, end);</span><br><span class="line">        <span class="comment">// 获取Page对象</span></span><br><span class="line">        Page&lt;Emp&gt; p = (Page&lt;Emp&gt;) empList;</span><br><span class="line">        <span class="comment">// 封装到pageBean中</span></span><br><span class="line">        <span class="type">PageBean</span> <span class="variable">pageBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageBean</span>(p.getTotal(), p.getResult());</span><br><span class="line">        <span class="keyword">return</span> pageBean;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>更改后的page方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> PageBean <span class="title function_">page</span><span class="params">(Integer page, Integer pageSize, String name, Short gender, LocalDate begin, LocalDate end)</span> &#123;</span><br><span class="line">        <span class="comment">// 设置分页参数</span></span><br><span class="line">        PageHelper.startPage(page, pageSize);</span><br><span class="line">        <span class="comment">// 执行查询</span></span><br><span class="line">        List&lt;Emp&gt; empList = empMapper.list(name, gender, begin, end);</span><br><span class="line">        <span class="comment">// 获取Page对象</span></span><br><span class="line">        Page&lt;Emp&gt; page_result = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line">        page_result.addAll(empList);</span><br><span class="line">        page_result.setTotal(empList.size()); <span class="comment">// 设置总记录数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 封装到pageBean中</span></span><br><span class="line">        <span class="type">PageBean</span> <span class="variable">pageBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageBean</span>(page_result.getTotal(), page_result.getResult());</span><br><span class="line">        <span class="keyword">return</span> pageBean;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>看不懂这个类型转化</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基础环境搭建&quot;&gt;基础环境搭建&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250221114947965.png&quot; alt=&quot;image-202</summary>
      
    
    
    
    <category term="springboot黑马综合案例" scheme="https://scanfup.github.io/categories/springboot%E9%BB%91%E9%A9%AC%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/"/>
    
    
    <category term="springboot黑马综合案例" scheme="https://scanfup.github.io/tags/springboot%E9%BB%91%E9%A9%AC%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>请求响应</title>
    <link href="https://scanfup.github.io/posts/fe670207.html"/>
    <id>https://scanfup.github.io/posts/fe670207.html</id>
    <published>2025-02-22T16:00:00.000Z</published>
    <updated>2025-02-23T14:15:04.113Z</updated>
    
    <content type="html"><![CDATA[<h2 id="请求响应">请求响应</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250217205935391.png" alt="image-20250217205935391"></p><h2 id="1-原始方式">1.原始方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数获取的原始方式</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/Param&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">Param</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="comment">//获取请求参数</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">ageS</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    <span class="comment">//将获取到的年龄转化为整形</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> Integer.parseInt(ageS);</span><br><span class="line">    <span class="comment">//打印控制台</span></span><br><span class="line">    System.out.println(<span class="string">&quot;name:&quot;</span> + name + <span class="string">&quot; age:&quot;</span> + age);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到成功接收</p><h2 id="2-springboot方法">2.springboot方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@RequestMapping(&quot;/Param&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">Param</span><span class="params">(String name,Integer age)</span> &#123;</span><br><span class="line">        <span class="comment">//获取请求参</span></span><br><span class="line">        System.out.println(<span class="string">&quot;name:&quot;</span> + name + <span class="string">&quot; age:&quot;</span> + age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也是正常返回ok</p><h2 id="3-参数名不一致（RequestsParam）">3.参数名不一致（RequestsParam）</h2><p>参数名不一致，使用@RequestsParam注解完成映射，那么请求参数名就要跟name的参数名一致，这里就是namelll</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@RequestMapping(&quot;/Param&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">Param</span><span class="params">(<span class="meta">@RequestParam(name=&quot;namelll&quot;)</span> String name,Integer age)</span> &#123;</span><br><span class="line">        <span class="comment">//获取请求参</span></span><br><span class="line">        System.out.println(<span class="string">&quot;name:&quot;</span> + name + <span class="string">&quot; age:&quot;</span> + age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250217214517811.png" alt="image-20250217214517811"></p><p>这里RequestParam里面可以加上参数required=false，加上的话也可以不用传入该参数，不加默认为true，参数不能为空</p><h2 id="2-实体参数">2.实体参数</h2><p>将请求参数封装到一个实体类对象中，请求参数名要与与实体类的属性名相同</p><h3 id="2-1-简单实体参数">2.1 简单实体参数</h3><p>User实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实体参数：简单实体对象</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/simplePojo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">simplePojo</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-复杂实体参数">2.2 复杂实体参数</h3><p>复杂实体对象指的是，在实体类中有一个或多个属性，也是实体对象类型的。</p><p>例如：User类中有一个Address类型的属性（Address是一个实体类）</p><p>User实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Address address; <span class="comment">//地址对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Address实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Controller方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实体参数：复杂实体对象</span></span><br><span class="line">     <span class="meta">@RequestMapping(&quot;/complexPojo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">complexPojo</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="3-JSON参数-RequestBody">3.JSON参数(@RequestBody)</h2><p>在前后端进行交互时，如果是比较复杂的参数，前后端通过会使用JSON格式的数据进行传输。</p><p>传递json格式的参数，在Controller中会使用实体类进行封装。</p><p>封装规则：JSON数据键名与形参对象属性名相同，定义POJO类型形参即可接收参数。需要使用 @RequestBody标识。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JSON参数</span></span><br><span class="line"> <span class="meta">@RequestMapping(&quot;/jsonParam&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">jsonParam</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>@RequestBody注解：将JSON数据映射到形参的实体类对象中（JSON中的key和实体类中的属性名保持一致）</p><h2 id="4-路径参数-PathVariable">4.路径参数(@PathVariable)</h2><p>传统的开发中请求参数是放在请求体(POST请求)传递或跟在URL后面传递(GET请求)。但在现在的开发中，经常还会直接在请求的URL中传递参数。</p><p>传统请求参数：<br><a href="http://localhost:8080/user?name=hs&amp;age=18">http://localhost:8080/user?name=hs&amp;age=18</a></p><p>直接在请求的URL中传递参数：<br><a href="http://localhost:8080/user/1">http://localhost:8080/user/1</a><br><a href="http://localhost:880/user/1/0">http://localhost:880/user/1/0</a></p><h3 id="4-1-单个路径参数">4.1 单个路径参数</h3><p>使用{xx}来标识该路径参数，需要使用@PathVariable获取路径参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//路径参数</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/pathParam/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">pathParam</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-传递多个路径参数">4.2 传递多个路径参数</h3><p>继续加/{xx}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多个路径参数</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/pathParam/&#123;id&#125;/&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">pathParam</span><span class="params">(<span class="meta">@PathVariable</span> Integer id,<span class="meta">@PathVariable</span> String name)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (id+<span class="string">&quot;,&quot;</span>+name);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="5-数组集合参数">5.数组集合参数</h2><p>数组集合参数的使用场景：在HTML的表单中，有一个表单项是支持多选的(复选框)，可以提交选择的多个值。</p><p>后端程序接收上述多个值的方式有两种：</p><p>1.数组</p><p>2.集合</p><h3 id="5-1-数组参数">5.1 数组参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/arrayParam&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">arrayParam</span><span class="params">(String[] hobby)</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> Arrays.toString(hobby);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>在前端请求时，有两种传递形式：</p><p>方式一： ?hobby=game&amp;hobby=java</p><p>方式二： ?hobby=game,java</p><h3 id="5-2-集合参数-RequestParam">5.2 集合参数(@RequestParam)</h3><p>默认情况下，请求中参数名相同的多个值，是封装到数组。如果要封装到集合，要使用@RequestParam绑定参数关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/listParam&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List <span class="title function_">listParam</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;String&gt; hobby)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hobby;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在前端请求时，有两种传递形式：</p><p>方式一： ?hobby=game&amp;hobby=java</p><p>方式二： ?hobby=game,java</p><h2 id="6-日期参数-DateTimeFormat">6.日期参数(@DateTimeFormat)</h2><p>在一些特殊的需求中，可能会涉及到日期类型数据的封装。</p><p>因为日期的格式多种多样，那么对于日期类型的参数在进行封装的时候，需要通过@DateTimeFormat注解，以及其pattern属性来设置日期的格式。</p><p>@DateTimeFormat注解的pattern属性中指定了哪种日期格式，前端的日期参数就必须按照指定的格式传递。</p><p>后端controller方法中，需要使用Date类型或LocalDateTime类型，来封装传递的参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//日期参数</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/dateParam&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> LocalDateTime <span class="title function_">dataParam</span><span class="params">(<span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span> LocalDateTime updateTime)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> updateTime;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="7-响应">7.响应</h2><h3 id="7-1-ResponseBody">7.1 @ResponseBody</h3><p>@ResponseBody注解：</p><p>类型：方法注解、类注解<br>位置：书写在Controller方法上或类上<br>作用：将方法返回值直接响应给浏览器<br>如果返回值类型是实体对象/集合，将会转换为JSON格式后在响应给浏览器<br>在类上添加的@RestController注解，是一个组合注解。@RestController = @Controller + @ResponseBody</p><p>@RestController源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span>   <span class="comment">//元注解（修饰注解的注解）</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span>  <span class="comment">//元注解</span></span><br><span class="line"><span class="meta">@Documented</span>    <span class="comment">//元注解</span></span><br><span class="line"><span class="meta">@Controller</span>   </span><br><span class="line"><span class="meta">@ResponseBody</span> </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RestController &#123;</span><br><span class="line">    <span class="meta">@AliasFor(</span></span><br><span class="line"><span class="meta">        annotation = Controller.class</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br></pre></td></tr></table></figure><p>类上有@RestController注解或@ResponseBody注解时：表示当前类下所有的方法返回值做为响应数据，方法的返回值，如果是一个POJO对象或集合时，会先转换为JSON格式，在响应给浏览器</p><h3 id="7-2-统一响应结果">7.2 统一响应结果</h3><p>统一的返回结果使用类来描述，在这个结果中包含：</p><p>响应状态码：当前请求是成功，还是失败<br>状态码信息：给页面的提示信息<br>返回的数据：给前端响应的数据（字符串、对象、集合）<br>定义在一个实体类Result来包含以上信息。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;<span class="comment">//响应码，1 代表成功; 0 代表失败</span></span><br><span class="line">    <span class="keyword">private</span> String msg;  <span class="comment">//响应码 描述字符串</span></span><br><span class="line">    <span class="keyword">private</span> Object data; <span class="comment">//返回的数据</span></span><br><span class="line"><span class="comment">//增删改 成功响应(不需要给前端返回数据)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">1</span>,<span class="string">&quot;success&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查询 成功响应(把查询结果做为返回数据响应给前端)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">(Object data)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">1</span>,<span class="string">&quot;success&quot;</span>,data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//失败响应</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">error</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">0</span>,msg,<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>改造Controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//响应统一格式的结果</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World ~&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">&quot;Hello World ~&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;请求响应&quot;&gt;请求响应&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250217205935391.png&quot; alt=&quot;image-2025021</summary>
      
    
    
    
    <category term="springboot黑马综合案例" scheme="https://scanfup.github.io/categories/springboot%E9%BB%91%E9%A9%AC%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/"/>
    
    
    <category term="springboot黑马综合案例" scheme="https://scanfup.github.io/tags/springboot%E9%BB%91%E9%A9%AC%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>js基础</title>
    <link href="https://scanfup.github.io/posts/6890f50f.html"/>
    <id>https://scanfup.github.io/posts/6890f50f.html</id>
    <published>2025-02-22T16:00:00.000Z</published>
    <updated>2025-02-23T14:16:35.245Z</updated>
    
    <content type="html"><![CDATA[<p>无论是原型对象和实例对象都有 __ proto__</p><p>原型对象有  prototype</p><p>a.prototype  如果不是undefined  就说明a对象 是原型对象</p><p>原型对象和实例对象的函数  this 指向不同</p><p>实例对象</p><p>function a(){</p><p>​console.log(this)</p><p>}</p><p>谁调用 this就指向谁</p><p>原型对象</p><p>function pro(){</p><p>​this.a =1</p><p>}</p><p>var  aaa = new pro()  this指向的是原型对象的实例对象  也就是aaa</p><p>其中 pro 就是原型对象</p><p>构造函数的属性和原型对象的属性不同</p><p>对象._ _ proto_ _ 就是找这个对象的父对象</p><p>aaa._ <em>proto</em>___ 就是 原型对象</p><p>最底层就是object</p><p>object.__ pooto__  就是null了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;无论是原型对象和实例对象都有 __ proto__&lt;/p&gt;
&lt;p&gt;原型对象有  prototype&lt;/p&gt;
&lt;p&gt;a.prototype  如果不是undefined  就说明a对象 是原型对象&lt;/p&gt;
&lt;p&gt;原型对象和实例对象的函数  this 指向不同&lt;/p&gt;
&lt;p&gt;实</summary>
      
    
    
    
    <category term="js逆向" scheme="https://scanfup.github.io/categories/js%E9%80%86%E5%90%91/"/>
    
    
    <category term="js逆向" scheme="https://scanfup.github.io/tags/js%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>js逆向过程和几个方法</title>
    <link href="https://scanfup.github.io/posts/9135e420.html"/>
    <id>https://scanfup.github.io/posts/9135e420.html</id>
    <published>2025-02-22T16:00:00.000Z</published>
    <updated>2025-02-23T14:16:14.709Z</updated>
    
    <content type="html"><![CDATA[<p>js逆向的过程</p><p>抓包—调试----脱离浏览器环境（让浏览器的js代码在本地运行）  本地环境（node.js 封装的V8引擎）</p><h1>Object.defineProperty()</h1><p>静态方法会直接在一个对象上定义一个新属性，或修改其现有属性，并返回此对象。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen"><code>Object.isFrozen()</code></a></p><p>判断对象是否已经冻结。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed"><code>Object.isSealed()</code></a></p><p>判断对象是否已经封闭。</p><p>weixin.code   是小程序  的code  是 app生成的  没办法逆向出来  只能第三方做的hook</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;js逆向的过程&lt;/p&gt;
&lt;p&gt;抓包—调试----脱离浏览器环境（让浏览器的js代码在本地运行）  本地环境（node.js 封装的V8引擎）&lt;/p&gt;
&lt;h1&gt;Object.defineProperty()&lt;/h1&gt;
&lt;p&gt;静态方法会直接在一个对象上定义一个新属性，或修改其现</summary>
      
    
    
    
    <category term="js逆向" scheme="https://scanfup.github.io/categories/js%E9%80%86%E5%90%91/"/>
    
    
    <category term="js逆向" scheme="https://scanfup.github.io/tags/js%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>网络协议</title>
    <link href="https://scanfup.github.io/posts/1cd3002f.html"/>
    <id>https://scanfup.github.io/posts/1cd3002f.html</id>
    <published>2025-02-22T16:00:00.000Z</published>
    <updated>2025-02-23T14:15:54.911Z</updated>
    
    <content type="html"><![CDATA[<h1>网络协议：</h1><h2 id="TCP">TCP</h2><p>安全</p><p>速度慢</p><p>《三次握手》</p><p>1、客户端找到服务器 ：我来了！</p><p>2、服务器 找到客户端： 你确定来了？</p><p>3、客户端再发给服务器：我确定我来了</p><p>网站基本都是走的TCP协议</p><h2 id="UDP">UDP</h2><p>不能保证数据完整性</p><p>速度快</p><p>TCP和UDP 都是底层协议，我们是管不了的</p><p>我们能处理的就是 顶层协议</p><h2 id="顶层协议">顶层协议</h2><p>由开发这个软件的开发者开发的协议</p><p>协议：我怎么样告诉你我是谁，以及我怎么告诉你数据的格式</p><p>HTTP  HTTPS</p><p>FTP  发文件的协议</p><p>SMTP  POP3  发邮件的协议</p><p>MQTT</p><p>HTTP 80端口 ——&gt; https 443端口</p><p><a href="HTTPS://hao.360.com">HTTPS://hao.360.com</a></p><p>https 协议</p><p><a href="http://360.com">360.com</a> 主域名</p><p><a href="http://hao.360.com">hao.360.com</a> 二级域名  ip地址  一个域名对应一个ip地址</p><h3 id="http-https-send">http    -&gt; https    send</h3><p>请求头</p><p>请求体</p><p>响应头</p><p>响应体</p><h3 id="websocket-websockets">websocket -&gt; websockets</h3><p>new websocket  创建websocket的位置</p><p>测试网址  <a href="http://www.websocket-test.com/">http://www.websocket-test.com/</a></p><p><img src="C:%5CUsers%5Chp%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230810172032425.png" alt="image-20230810172032425"></p><p>Status Code: 101 Switching Protocols</p><p>请求头（以下都是不能删除的）</p><ol><li>Connection: Upgrade  #代表协议升级</li><li>Host: 124.222.224.186:8800</li><li>Origin: <a href="http://www.websocket-test.com">http://www.websocket-test.com</a></li><li>Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits</li><li>Sec-WebSocket-Key: pjJ9hSUw3F+RVRsXlRz5Ow==  #升级加密的key 由客户端随机生成</li><li>Sec-WebSocket-Version: 13 #升级到什么版本</li><li>Upgrade: websocket #升级成什么协议</li><li>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64)AppleWebKit/537.36 (KHTML, like Gecko)Chrome/95.0.4638.69 Safari/537.36</li></ol><p>messages： 看发了什么信息的</p><p>虽然 此网站 显示 是明文，但是其实可以发好几种数据，</p><p>可发的数据类型 ：字节集    string   一般直接认为是字节集</p><p>websocket 是一次请求一直连接  而 http是一次请求一次连接</p><p>http  短连接</p><p>websocket  长连接</p><p>抓包 只看 三类  XHR  WS   document</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;网络协议：&lt;/h1&gt;
&lt;h2 id=&quot;TCP&quot;&gt;TCP&lt;/h2&gt;
&lt;p&gt;安全&lt;/p&gt;
&lt;p&gt;速度慢&lt;/p&gt;
&lt;p&gt;《三次握手》&lt;/p&gt;
&lt;p&gt;1、客户端找到服务器 ：我来了！&lt;/p&gt;
&lt;p&gt;2、服务器 找到客户端： 你确定来了？&lt;/p&gt;
&lt;p&gt;3、客户端再发给服务器：我确</summary>
      
    
    
    
    <category term="js逆向" scheme="https://scanfup.github.io/categories/js%E9%80%86%E5%90%91/"/>
    
    
    <category term="js逆向" scheme="https://scanfup.github.io/tags/js%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://scanfup.github.io/posts/0.html"/>
    <id>https://scanfup.github.io/posts/0.html</id>
    <published>2025-02-22T11:38:44.932Z</published>
    <updated>2025-02-22T12:28:21.069Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础巩固">基础巩固</h2><p>二月二十–三月二十</p><p>刷卷子，每周五拿一下错题本</p><h2 id="类型题">类型题</h2><p>立体几何+平面向量</p><p>解三角形+三角函数</p><p>统计：二项分布，超几何，事件概率 + 排列组合</p><p>点到直线的距离，圆的方程 + 函数（抽象函数，奇数偶数性，单调性）</p><p>不等式</p><p>log2，</p><p>导数第一问（基础）**</p><p>同构（稍微提高）构造函数</p><p>数列，（现在的卷子大题都放在最后了）变难</p><p>圆锥曲线简单题</p><p>二项式</p><p>不等式</p><p>立体几何（外接球）</p><h2 id="最后冲刺">最后冲刺</h2><p>刷高考题+错题+整章节整理</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基础巩固&quot;&gt;基础巩固&lt;/h2&gt;
&lt;p&gt;二月二十–三月二十&lt;/p&gt;
&lt;p&gt;刷卷子，每周五拿一下错题本&lt;/p&gt;
&lt;h2 id=&quot;类型题&quot;&gt;类型题&lt;/h2&gt;
&lt;p&gt;立体几何+平面向量&lt;/p&gt;
&lt;p&gt;解三角形+三角函数&lt;/p&gt;
&lt;p&gt;统计：二项分布，超几何，事件概率 + </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://scanfup.github.io/posts/0.html"/>
    <id>https://scanfup.github.io/posts/0.html</id>
    <published>2025-02-21T06:07:56.594Z</published>
    <updated>2025-02-21T06:10:48.485Z</updated>
    
    <content type="html"><![CDATA[<p>ctrl+f 向上移动一页  b向下</p><p>0移动最左 ￥移动最右</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ctrl+f 向上移动一页  b向下&lt;/p&gt;
&lt;p&gt;0移动最左 ￥移动最右&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://scanfup.github.io/posts/0.html"/>
    <id>https://scanfup.github.io/posts/0.html</id>
    <published>2025-02-17T12:14:37.131Z</published>
    <updated>2025-02-18T09:18:40.779Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2025-2-17">2025-2-17</h2><p>所以为什么做一个项目要先写一个接口，就是写完接口就可以去写注解路径了，需要请求什么路径，请求这个 路径使用什么方法，使用这个方法要有什么数据什么类，这个类里面都有什么，生成getter和setter方法，以及同string方法，所以一个接口文档是包含了很多东西的</p><ol><li>每种方法的参数接收，请求响应</li></ol><p>关于这个员工数据案例，首先前端使用axios请求了一下数据，如果数据存在那么返回data，返回的data经过前端渲染展示出来表格，那么后端是如何处理这个数据的，首先，后端拿到html文件，开始i逻辑判断，如果为1，就更新为名字，这里面更改信息又用到了之前声明变量所使用的getter和setter方法</p><h2 id="2025-2-18-周二">2025-2-18 周二</h2><p>一个项目是怎么样落地的呢？首先要想好要做一个什么项目，然后去弄个出来每个页面，这个页面都要有什么功能，以及功能外又要什么数据库，每个都应该要提前设计好，这才是软件开发的前提，不设计好之后根本就没有头绪</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2025-2-17&quot;&gt;2025-2-17&lt;/h2&gt;
&lt;p&gt;所以为什么做一个项目要先写一个接口，就是写完接口就可以去写注解路径了，需要请求什么路径，请求这个 路径使用什么方法，使用这个方法要有什么数据什么类，这个类里面都有什么，生成getter和setter方法，以</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://scanfup.github.io/posts/0.html"/>
    <id>https://scanfup.github.io/posts/0.html</id>
    <published>2025-02-13T14:09:54.130Z</published>
    <updated>2025-02-23T06:25:33.337Z</updated>
    
    <content type="html"><![CDATA[<ol><li>两侧缩进16px</li><li>对于段内的划线，使用黑色加粗</li><li>对于整段的划线，使用红色加粗</li><li>标题引号找素材</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;两侧缩进16px&lt;/li&gt;
&lt;li&gt;对于段内的划线，使用黑色加粗&lt;/li&gt;
&lt;li&gt;对于整段的划线，使用红色加粗&lt;/li&gt;
&lt;li&gt;标题引号找素材&lt;/li&gt;
&lt;/ol&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>一些在网上看到的建议</title>
    <link href="https://scanfup.github.io/posts/e8a7021a.html"/>
    <id>https://scanfup.github.io/posts/e8a7021a.html</id>
    <published>2025-02-05T16:00:00.000Z</published>
    <updated>2025-02-18T09:18:40.785Z</updated>
    
    <content type="html"><![CDATA[<p>渡有心人，送给年轻人！<br>人生最有价值的知识主次及比例<br>①预防人生意外事故、研究透彻各种不良习气危害并避之，学会休息，预防运动劳损，健体使身体稳固不易损伤的知识（60％）<br>②上好学，培养傍身技能，记住稀缺是精髓，社会正常运行必要的职业，刚需手艺，专研透了，也能养你一辈子（30％）<br>③怎么教育子女，做好社会角色分工（8％）<br>④乐器绘画舞蹈等（2％）<br>健康活着，持续健康活着，持续幸福健康活着；起步的迟没关系，只要跑的越久，就跑的越远<br>清醒的头脑，健全的四肢，充实的肠胃，是每天要核查和保持的<br>保持健康，生活便进可攻，退可守<br>警惕贪（对于喜好的过于偏执）、嗔（对于讨厌的反应过激）、痴（对不明事理表现贪与嗔的反应），一旦发作，让人失去驾驭人生大局的基本理智。<br>凡事三思:思危、思退、思变<br>这个社会需要有真实能力的人去做事<br>这个世界健康其实才是最稀缺的东西<br>只赚认知内的钱<br>其他<br>①最好一辈子不沾酒，醉酒、喝酒不爬高，醉了一定要找低矮床铺侧卧休息<br>②膝关节是人体最复杂的关节，一定不要损伤，因为最复杂，一旦损伤，修复也是最难的。安全使用膝盖的知识<br>③健身体成习惯，心平静，充分热身，量力而行，场地光线充足安全无障碍<br>④把健康比作1,一个人的事业、财富、金钱、地位、家庭等等，都是尾随在其后的0，有了1，后面的0才有意义，没有了健康这个1做支撑，即使他有数不尽的0，那终究还只是个0，健康不是一切，但没有健康就没有一切<br>⑤我们成长中，各种原因原生环境，思想上行为上多少都背负着那么一些歪理邪说成分，长大了，要懂得筛查找出，不然它就好比一颗雷，谁知道那天触发了它就炸了<br>⑥终生思考:这个世界的真实面貌是什么样的，事实是什么<br>⑦远离自私垃圾人，远离以权力背景压人的人，若不可避免，至少一定要思危，不对果断跑路<br>⑧身材: 体重/身高平方≤23kg/m²<br>推荐<br>叔本华的《人生的智慧》，梁应林《人生意外800鉴》，杨渝平《运动损伤那些事》 ，北泽杏子《讨厌!喝酒好可怕》 系列<br>预防疾病<br>病毒肝炎（疫苗）、艾滋病（洁身）、肺结核（健身营养）、膝关节半月板撕裂（软骨损伤不可再生）、椎间盘突出、老人股骨头骨折（老人死亡骨折）尘肺（呼衰）脊髓损伤、脑梗偏瘫（4小时内溶栓）生活不能自理，狂犬病（致死）<br>出门看天气防雷电溺水、高空坠物、车祸、踩空、滑倒、火灾 、拌倒<br>健康是为了生命充分绽放<br>有些错失误就一次机会</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;渡有心人，送给年轻人！&lt;br&gt;
人生最有价值的知识主次及比例&lt;br&gt;
①预防人生意外事故、研究透彻各种不良习气危害并避之，学会休息，预防运动劳损，健体使身体稳固不易损伤的知识（60％）&lt;br&gt;
②上好学，培养傍身技能，记住稀缺是精髓，社会正常运行必要的职业，刚需手艺，专研透</summary>
      
    
    
    
    <category term="杂七杂八" scheme="https://scanfup.github.io/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
    
    
    <category term="杂七杂八" scheme="https://scanfup.github.io/tags/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://scanfup.github.io/posts/0.html"/>
    <id>https://scanfup.github.io/posts/0.html</id>
    <published>2025-02-04T09:58:31.202Z</published>
    <updated>2025-02-18T09:18:40.793Z</updated>
    
    <content type="html"><![CDATA[<p>首先，git clone下来的项目要npm install下载依赖，如果是vue项目，运行通常npm run serve或者npm run dev</p><h1>vue速通一下</h1><blockquote><ol><li>使用vite创建项目（较快）</li></ol><p><code>npm create vite</code></p></blockquote><h2 id="配置文件">配置文件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">src/  </span><br><span class="line">├── assets/               # 存放静态资源，如图片、字体、视频等  </span><br><span class="line">├── components/           # 公共组件  </span><br><span class="line">├── views/                # 页面组件  </span><br><span class="line">├── router/               # 路由配置  </span><br><span class="line">├── store/                # 状态管理（<span class="title class_">Vuex</span> 或 <span class="title class_">Pinia</span>）</span><br><span class="line">├── api/                  # 后端 <span class="variable constant_">API</span> 请求  </span><br><span class="line">├── utils/                # 工具函数  </span><br><span class="line">├── assets/               # 样式文件，字体、图片等  </span><br><span class="line">└── <span class="title class_">App</span>.<span class="property">vue</span>               # 根组件</span><br></pre></td></tr></table></figure><p>vite.config.js：项目的配置文件，基于vite的配置</p><p>package.json：项目包文件，核心依赖项变成了vue3，vite</p><p>main.js入口文件，createApp创建Vue实例，吃实话vue应用，配置全局插件，引入根组件</p><p><strong>main.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line"><span class="comment">//原始new Vue()创建一个应用实例 =升级=&gt; createApp() 将创建实例进行了封装,保证每个实例的独立封闭性</span></span><br></pre></td></tr></table></figure><h2 id="基础语法">基础语法</h2><p>setup：通过setup选项提供一种新的组件内部结构，以更模块化的方式组织代码</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250204200309324.png" alt="image-20250204200309324"></p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250204200629245.png" alt="image-20250204200629245"></p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250204200422732.png" alt="image-20250204200422732"></p><p>指令</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">指令属性</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;htmlContent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;htmlContent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">渲染属性</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;item in 5&quot;</span>&gt;</span>这是内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;false&quot;</span>&gt;</span>标签内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">属性指令</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span>这是内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span>这是内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">事件指令</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;output&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;output&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">表单指令 v-model可是实现数据双向绑定</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;inputValue&quot;</span>&gt;</span><span class="comment">&lt;!-- 可以更改内部数据从而改变页面反应 --!&gt;   </span></span><br><span class="line"><span class="comment">&lt;p v-text=&quot;inputValue&quot;&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="comment">修饰符</span></span><br><span class="line"><span class="comment">&lt;input type=&quot;text&quot; v-model.trim=&quot;inputValue&quot;&gt;trim可以实现清除数据</span></span><br></pre></td></tr></table></figure><h2 id="组件开发">组件开发</h2><p>Vue CLI 是一个基于Vue.js进行快速项目搭建的工具。它是一个全局安装的npm包，为Vue.js应用程序快速创建项目模板</p><h2 id="vuex">vuex</h2><p>vuex是一个专门为vue.js应用程序开发的状态管理工具</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250204211539447.png" alt="image-20250204211539447"></p><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。以下是对 Vuex 的详细介绍：<br>核心概念</p><p>state：用于存储应用的所有状态数据，是一个普通的 JavaScript 对象。可以将其看作是一个“数据仓库”，包含了组件之间共享的数据。例如在一个电商应用中，购物车中的商品列表就可以存储在 state 中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    <span class="attr">cartItems</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>组件中获取 state 数据的方式：在 Vue 组件中，可以通过 this.$store.state 来访问 state 中的数据。如果使用计算属性，代码会更加简洁和易读：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">computed</span>: &#123;</span><br><span class="line">        <span class="title function_">cartItems</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">cartItems</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mutations：唯一可以修改 state 的地方，是一些纯函数。每个 mutation 都有一个字符串的事件类型和一个回调函数，回调函数接收 state 作为第一个参数。这种设计保证了状态变化的可预测性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="title function_">ADD_TO_CART</span>(<span class="params">state, item</span>) &#123;</span><br><span class="line">        state.<span class="property">cartItems</span>.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">触发 mutations 的方式：在组件中通过 <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;mutationType&#x27;</span>, payload) 来触发，例如：</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">addItemToCart</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> newItem = &#123; <span class="attr">name</span>: <span class="string">&#x27;Product 1&#x27;</span>, <span class="attr">price</span>: <span class="number">10</span> &#125;;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;ADD_TO_CART&#x27;</span>, newItem);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>actions：用于处理异步操作，如发送网络请求等。actions 可以触发 mutations 来间接修改 state。它也有一个上下文对象，包含了 state、commit 等属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">fetchCartItems</span>(<span class="params">&#123; commit &#125;</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://api.example.com/cart-items&#x27;</span>);</span><br><span class="line">            <span class="keyword">const</span> data = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">            <span class="title function_">commit</span>(<span class="string">&#x27;SET_CART_ITEMS&#x27;</span>, data);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error fetching cart items:&#x27;</span>, error);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">触发 actions 的方式：在组件中通过 <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;actionType&#x27;</span>, payload) 来调用，例如：</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;fetchCartItems&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getters：类似于计算属性，用于获取 state 中的数据，起到对 state 数据进行过滤、计算等作用。它的优点是可以缓存计算结果，只有当依赖的 state 数据发生变化时才会重新计算。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">    <span class="title function_">totalCartPrice</span>(<span class="params">state</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> state.<span class="property">cartItems</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">total, item</span>) =&gt;</span> total + item.<span class="property">price</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">在组件中使用 getters 的方式：与计算属性类似，通过 <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span> 访问，例如：</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">computed</span>: &#123;</span><br><span class="line">        <span class="title function_">totalCartPrice</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="property">totalCartPrice</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>项目中的应用场景</p><p>多组件共享状态：当多个组件需要共享数据时，将数据存储在 Vuex 的 state 中，避免了通过层层传递 prop 或者使用事件总线（Event Bus）带来的复杂性和维护成本。例如，在一个多页面的电商应用中，商品列表页、购物车页和结算页都需要共享购物车的状态，使用 Vuex 可以方便地实现数据的共享和同步更新。<br>复杂状态管理：对于复杂的业务逻辑，如涉及多个状态的联动变化、异步操作等，Vuex 的 mutations、actions 和 getters 提供了清晰的结构来管理和维护这些逻辑。例如在处理用户登录和权限管理时，可以在 actions 中处理登录的异步请求，通过 mutations 更新用户登录状态，使用 getters 判断用户是否具有某些权限。</p><p>优势</p><p>可预测性：由于 mutations 是唯一可以修改 state 的地方，并且是纯函数，使得应用的状态变化变得可预测。开发人员可以很容易地追踪状态的变化过程，便于调试和维护。<br>便于团队协作：Vuex 提供了一种集中式的状态管理方式，所有的状态数据和状态变化逻辑都集中在一个地方。团队成员可以更容易地理解和维护项目的状态管理逻辑，减少了因状态管理混乱而导致的错误。<br>利于代码复用：在不同的项目中，如果有相似的状态管理需求，可以方便地复用 Vuex 的模块和逻辑，提高开发效率。</p><h2 id="vue-router">vue-router</h2><h3 id="基础路由">基础路由</h3><p>使用的时候要在上面进行导入</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250204205133242.png" alt="image-20250204205133242"></p><h3 id="动态路由，子路由">动态路由，子路由</h3><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250204205724734.png" alt="image-20250204205724734"></p><h3 id="编程式导航，路由跳转">编程式导航，路由跳转</h3><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250204210620603.png" alt="image-20250204210620603"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;首先，git clone下来的项目要npm install下载依赖，如果是vue项目，运行通常npm run serve或者npm run dev&lt;/p&gt;
&lt;h1&gt;vue速通一下&lt;/h1&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;使用vite创建项目（较快）&lt;/li&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://scanfup.github.io/posts/0.html"/>
    <id>https://scanfup.github.io/posts/0.html</id>
    <published>2025-02-03T02:40:08.871Z</published>
    <updated>2025-02-18T09:18:40.792Z</updated>
    
    <content type="html"><![CDATA[<h1>简介</h1><p><strong>Webpack 是一个模块打包工具，在现代的 JavaScript 应用程序开发中扮演着至关重要的角色</strong>。以下是关于它的详细介绍：<br>核心概念</p><h2 id="模块（Module）">模块（Module）</h2><p>在 Webpack 中，一切文件（如 JavaScript、CSS、图片等）都可以被视为模块。模块之间可以相互依赖和引用。例如，一个 JavaScript 文件可能会导入另一个 JavaScript 文件、样式文件或者图片文件。<br>入口（Entry）：入口是 Webpack 开始打包的起点。从入口文件出发，Webpack 会递归地找到所有依赖的模块。常见的入口配置形式是一个字符串（指定单个入口文件路径），也可以是一个对象（用于 多入口情况）。例如：entry: ‘./src/index.js’<br>输出（Output）：指定 Webpack 打包后的文件输出路径和文件名等信息。通过 output 配置项，你可以告诉 Webpack 把打包后的文件放在哪里，以及如何命名。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="loader">loader</h2><p>Webpack 本身只能处理 JavaScript 和 JSON 文件，loader 用于让 Webpack 能够处理其他类型的文件，比如 CSS、图片等。loader 可以将这些文件转换为 Webpack 能够理解的模块。例如，css-loader 用于处理 CSS 文件，file-loader 用于处理图片等文件资源。使用时需要在 webpack.config.js 中进行配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插件（Plugin）">插件（Plugin）</h2><p>插件可以在 Webpack 构建过程的不同阶段执行更广泛的任务，比如压缩代码、分割代码块、生成 HTML 文件等。html-webpack-plugin 可以自动生成 HTML 文件，并将打包后的 JavaScript 文件引入其中；mini-css-extract-plugin 可以将 CSS 从 JavaScript 中抽离出来生成单独的 CSS 文件。插件需要先引入，然后在 plugins 数组中进行实例化配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优势">优势</h2><p>模块处理能力强大：能够处理各种类型的模块及其复杂的依赖关系，无论是 JavaScript 的 ES6 模块系统，还是 CommonJS 模块等，都能很好地整合和打包。<br>优化资源加载：可以对代码进行分割和懒加载，提高应用程序的加载速度。例如，将不同路由对应的代码分割成单独的代码块，只有在用户访问相应路由时才加载。<br>支持多种文件类型：通过丰富的 loader 和插件生态系统，能够处理 CSS、图片、字体等各种文件类型，将它们整合到最终的打包文件中。</p><h2 id="使用场景">使用场景</h2><p>单页面应用（SPA）开发：帮助管理 SPA 中众多的模块和资源，实现代码的优化加载和性能提升。<br>多页面应用（MPA）开发：可以为每个页面分别进行打包和资源处理，提高开发效率和应用性能。<br>处理复杂的样式：通过相关 loader 和插件，可以对 CSS 进行预处理（如使用 Sass、Less）、后处理（如添加浏览器前缀），并优化 CSS 的加载和合并。</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250203105210570.png" alt="image-20250203105210570"></p><h1>webpack解决变量重名问题</h1><h2 id="通过作用域进行解决">通过作用域进行解决</h2><p>Webpack 将每个文件视为一个模块，ES6 模块具有自己独立的作用域。在模块内部定义的变量、函数等只在该模块内有效，不会影响到其他模块。</p><h1>webpack加载器</h1><p>webpack非常经典的加载器</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250203111503743.png" alt="image-20250203111503743"></p><p>0位置是他自己本身，1是导出函数，2是加载器</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;简介&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Webpack 是一个模块打包工具，在现代的 JavaScript 应用程序开发中扮演着至关重要的角色&lt;/strong&gt;。以下是关于它的详细介绍：&lt;br&gt;
核心概念&lt;/p&gt;
&lt;h2 id=&quot;模块（Module）&quot;&gt;模块（Module）</summary>
      
    
    
    
    <category term="爬虫" scheme="https://scanfup.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="爬虫" scheme="https://scanfup.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://scanfup.github.io/posts/0.html"/>
    <id>https://scanfup.github.io/posts/0.html</id>
    <published>2025-01-21T12:49:02.897Z</published>
    <updated>2025-01-26T14:17:49.577Z</updated>
    
    <content type="html"><![CDATA[<ul><li>ut：时间戳</li><li>sign：签名认证，一般情况多数加密参数存在</li></ul><p>正则一般是如何提取的，有什么技巧i</p><h1>看源码</h1><p>首先看一下源码，发现源码中没有任何信息，那么就看一下网络请求</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;ut：时间戳&lt;/li&gt;
&lt;li&gt;sign：签名认证，一般情况多数加密参数存在&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;正则一般是如何提取的，有什么技巧i&lt;/p&gt;
&lt;h1&gt;看源码&lt;/h1&gt;
&lt;p&gt;首先看一下源码，发现源码中没有任何信息，那么就看一下网络请求&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://scanfup.github.io/posts/0.html"/>
    <id>https://scanfup.github.io/posts/0.html</id>
    <published>2025-01-19T05:21:21.624Z</published>
    <updated>2025-01-26T14:17:49.578Z</updated>
    
    <content type="html"><![CDATA[<p>编辑器： 秀米 135编辑器 壹伴编辑器（推荐）</p><p>正文：15，中文细体 两端缩进16</p><p>封面制作：canva,创客贴</p><p>图片：https;<a href="//www.pexels.com/zh-cn/(%E5%9B%BE%E7%89%87%E5%85%B3%E9%94%AE%E5%AD%97%E5%AF%BB%E6%89%BE)">//www.pexels.com/zh-cn/(图片关键字寻找)</a></p><p>寻找文案灵感：顶尖文案（TOPYS） 清博大数据（分析） 、 微博热搜</p><p>涨粉：受众身边</p><p>变现：流量主：500人粉丝 推</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;编辑器： 秀米 135编辑器 壹伴编辑器（推荐）&lt;/p&gt;
&lt;p&gt;正文：15，中文细体 两端缩进16&lt;/p&gt;
&lt;p&gt;封面制作：canva,创客贴&lt;/p&gt;
&lt;p&gt;图片：https;&lt;a href=&quot;//www.pexels.com/zh-cn/(%E5%9B%BE%E7%89%</summary>
      
    
    
    
    
  </entry>
  
</feed>
