<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>shix🍭</title>
  
  
  <link href="https://scanfup.github.io/atom.xml" rel="self"/>
  
  <link href="https://scanfup.github.io/"/>
  <updated>2025-03-04T03:45:18.850Z</updated>
  <id>https://scanfup.github.io/</id>
  
  <author>
    <name>shix</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>登录校验</title>
    <link href="https://scanfup.github.io/posts/3ca78541.html"/>
    <id>https://scanfup.github.io/posts/3ca78541.html</id>
    <published>2025-03-03T16:00:00.000Z</published>
    <updated>2025-03-04T03:45:18.850Z</updated>
    
    <content type="html"><![CDATA[<p>登录校验的功能以及实现方法</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250304113757696.png" alt="image-20250304113757696"></p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250304114506006.png" alt="image-20250304114506006"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;登录校验的功能以及实现方法&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250304113757696.png&quot; alt=&quot;image-2025030411</summary>
      
    
    
    
    <category term="springboot黑马综合案例" scheme="https://scanfup.github.io/categories/springboot%E9%BB%91%E9%A9%AC%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/"/>
    
    
    <category term="springboot黑马综合案例" scheme="https://scanfup.github.io/tags/springboot%E9%BB%91%E9%A9%AC%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>笔趣阁爬虫</title>
    <link href="https://scanfup.github.io/posts/c418e3a0.html"/>
    <id>https://scanfup.github.io/posts/c418e3a0.html</id>
    <published>2025-03-03T14:00:00.000Z</published>
    <updated>2025-03-03T15:25:15.437Z</updated>
    
    <content type="html"><![CDATA[<p>今晚上一篇笔趣阁给我干难受了，先是五秒盾，还有页面page参数的不规则</p><h1 id="直接请求"><a href="#直接请求" class="headerlink" title="直接请求"></a>直接请求</h1><p>首先肯定是直接请求</p><p>直接请求的代码</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;https://beqege.cc/2/21.html&quot;</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">response=requests.get(url,headers=headers)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><p>我们看一下返回值</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250303220403004.png" alt="image-20250303220403004"></p><p><strong>这里我打印了请求，正常是会返回空，none或者403相应的</strong></p><p>可以看到返回值是一串我们看不懂的文字，然后还带一个just moment—- <strong>小说反爬还有五秒盾？</strong></p><p>没办法，普通请求肯定是没办法了，对于五秒盾来说，换headers或者cookie都没有用，在这里使用一个过五秒盾的库就ok了</p><hr><p>具体如下</p><h1 id="过5s盾"><a href="#过5s盾" class="headerlink" title="过5s盾"></a>过5s盾</h1><p>代码如下</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> curl_cffi <span class="keyword">import</span> requests <span class="keyword">as</span> cffi_requests</span><br><span class="line">res = cffi_requests.get(<span class="string">&quot;https://www.beqege.cc/2/21.html&quot;</span>, impersonate=<span class="string">&#x27;chrome110&#x27;</span>, timeout=<span class="number">10</span>,verify=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;============cffi_requests的方式&quot;</span>, res.status_code, res.cookies, res.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250303220725987.png" alt="image-20250303220725987"></p><blockquote><p>提示以下这个库在使用的时候会查询整数，由于只是个人使用，直接禁用证书即可！</p></blockquote><p>可以看到可以正常返回数据了，现在我们只需要对数据进行处理就行了</p><hr><p><strong>不对，不对，破案了，这本数的章节不是随着数字一直增加的，偶尔会有一个大跳！</strong></p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250303230324162.png" alt="image-20250303230324162"></p><p>需要先找一下它大跳的规律</p><p><strong>我说我刚才按照顺序请求的时候为什么不对！</strong></p><p>我扒了一下，发现小说章节链接是这样一个规律：</p><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="comment">#21-29</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="comment">#210-299</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="comment">#2100-2999</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="comment">#21000-22455</span></span></span><br></pre></td></tr></table></figure></blockquote><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250303230739623.png" alt="image-20250303230739623"></p><p>加到一块就是2456！再加上其余的彩蛋或者番外，就刚好！</p><h1 id="代码如下（全本小说"><a href="#代码如下（全本小说" class="headerlink" title="代码如下（全本小说)"></a>代码如下（全本小说)</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> lxml</span><br><span class="line"><span class="keyword">from</span> curl_cffi <span class="keyword">import</span> requests <span class="keyword">as</span> cffi_requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment">#21-29</span></span><br><span class="line"><span class="comment">#210-299</span></span><br><span class="line"><span class="comment">#2100-2999</span></span><br><span class="line"><span class="comment">#21000-22455</span></span><br><span class="line">data = [</span><br><span class="line">    (<span class="number">21</span>, <span class="number">29</span>),</span><br><span class="line">    (<span class="number">210</span>, <span class="number">250</span>),</span><br><span class="line">    (<span class="number">2100</span>, <span class="number">2999</span>),</span><br><span class="line">    (<span class="number">21000</span>, <span class="number">22455</span>)</span><br><span class="line">]</span><br><span class="line"><span class="keyword">for</span> start, end <span class="keyword">in</span> data:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, end + <span class="number">1</span>):</span><br><span class="line">        res = cffi_requests.get(<span class="string">f&quot;https://www.beqege.cc/2/<span class="subst">&#123;i&#125;</span>.html&quot;</span>, impersonate=<span class="string">&#x27;chrome110&#x27;</span>, timeout=<span class="number">10</span>, verify=<span class="literal">False</span>)</span><br><span class="line">        res = res.text</span><br><span class="line">        soup = BeautifulSoup(res, <span class="string">&quot;lxml&quot;</span>)</span><br><span class="line">        title = soup.find(<span class="string">&quot;div&quot;</span>, <span class="built_in">id</span>=<span class="string">&quot;content&quot;</span>).text</span><br><span class="line">        head = soup.find(<span class="string">&quot;div&quot;</span>, class_=<span class="string">&quot;bookname&quot;</span>).text</span><br><span class="line">        head = head.replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        folder_path = <span class="string">f&quot;D:/小说/凡人修仙转&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(folder_path):</span><br><span class="line">            os.makedirs(folder_path)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&quot;<span class="subst">&#123;folder_path&#125;</span>/<span class="subst">&#123;head&#125;</span>.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(title)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以正常处理了！~</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250303231936169.png" alt="image-20250303231936169"></p><p><strong>这个代码处理了一下空格，以至于正常创建文件夹</strong></p><p>如果想爬取的更快一些，可以使用异步或者多线程，我这里使用的是异步</p><h1 id="多线程（全本小说）"><a href="#多线程（全本小说）" class="headerlink" title="多线程（全本小说）"></a>多线程（全本小说）</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> curl_cffi <span class="keyword">import</span> requests <span class="keyword">as</span> cffi_requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor, as_completed</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义章节范围列表 (包含起始和结束页码)</span></span><br><span class="line">CHAPTER_RANGES = [</span><br><span class="line">    (<span class="number">21</span>, <span class="number">29</span>),</span><br><span class="line">    (<span class="number">210</span>, <span class="number">299</span>),</span><br><span class="line">    <span class="comment"># (2100, 2999),</span></span><br><span class="line">    <span class="comment"># (21000, 22455)</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_page</span>(<span class="params">i, retries=<span class="number">3</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;下载单个页面并保存&quot;&quot;&quot;</span></span><br><span class="line">    folder_path = <span class="string">&quot;D:/小说/凡人修仙转&quot;</span></span><br><span class="line">    url = <span class="string">f&quot;https://www.beqege.cc/2/<span class="subst">&#123;i&#125;</span>.html&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 随机延迟（0.5-3秒）</span></span><br><span class="line">    time.sleep(random.uniform(<span class="number">0.5</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> attempt <span class="keyword">in</span> <span class="built_in">range</span>(retries):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 随机选择浏览器指纹</span></span><br><span class="line">            browsers = [<span class="string">&#x27;chrome110&#x27;</span>, <span class="string">&#x27;chrome107&#x27;</span>, <span class="string">&#x27;edge101&#x27;</span>]</span><br><span class="line">            res = cffi_requests.get(</span><br><span class="line">                url,</span><br><span class="line">                impersonate=random.choice(browsers),</span><br><span class="line">                timeout=<span class="number">10</span>,</span><br><span class="line">                verify=<span class="literal">False</span></span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 检测Cloudflare验证</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;Checking your browser before accessing&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">                <span class="keyword">raise</span> Exception(<span class="string">&quot;触发Cloudflare验证&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> res.status_code != <span class="number">200</span>:</span><br><span class="line">                <span class="keyword">raise</span> Exception(<span class="string">f&quot;HTTP状态码异常: <span class="subst">&#123;res.status_code&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">            soup = BeautifulSoup(res.text, <span class="string">&quot;lxml&quot;</span>)</span><br><span class="line">            content_div = soup.find(<span class="string">&quot;div&quot;</span>, <span class="built_in">id</span>=<span class="string">&quot;content&quot;</span>)</span><br><span class="line">            bookname_div = soup.find(<span class="string">&quot;div&quot;</span>, class_=<span class="string">&quot;bookname&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> content_div <span class="keyword">or</span> <span class="keyword">not</span> bookname_div:</span><br><span class="line">                <span class="keyword">raise</span> Exception(<span class="string">&quot;关键元素未找到&quot;</span>)</span><br><span class="line"></span><br><span class="line">            title = content_div.get_text(strip=<span class="literal">True</span>)</span><br><span class="line">            head = bookname_div.get_text(strip=<span class="literal">True</span>).replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 保存文件</span></span><br><span class="line">            os.makedirs(folder_path, exist_ok=<span class="literal">True</span>)  <span class="comment"># 自动创建目录</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&quot;<span class="subst">&#123;folder_path&#125;</span>/<span class="subst">&#123;head&#125;</span>.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(title)</span><br><span class="line"></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;页码 <span class="subst">&#123;i&#125;</span> 下载成功&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;页码 <span class="subst">&#123;i&#125;</span> 第 <span class="subst">&#123;attempt + <span class="number">1</span>&#125;</span> 次尝试失败: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> attempt &lt; retries - <span class="number">1</span>:</span><br><span class="line">                <span class="comment"># 指数退避+随机抖动</span></span><br><span class="line">                wait_time = <span class="number">2</span> ** attempt + random.uniform(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">                time.sleep(wait_time)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;页码 <span class="subst">&#123;i&#125;</span> 下载失败，已重试 <span class="subst">&#123;retries&#125;</span> 次&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_page_numbers</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;生成所有需要爬取的页码&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> (start, end) <span class="keyword">in</span> CHAPTER_RANGES:</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">from</span> <span class="built_in">range</span>(start, end + <span class="number">1</span>)  <span class="comment"># 包含结束页码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 配置线程池 (建议4-8个线程)</span></span><br><span class="line">    max_workers = <span class="number">6</span></span><br><span class="line">    total_pages = <span class="built_in">sum</span>(end - start + <span class="number">1</span> <span class="keyword">for</span> (start, end) <span class="keyword">in</span> CHAPTER_RANGES)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor(max_workers=max_workers) <span class="keyword">as</span> executor:</span><br><span class="line">        <span class="comment"># 提交所有页码的下载任务</span></span><br><span class="line">        futures = &#123;</span><br><span class="line">            executor.submit(download_page, page): page</span><br><span class="line">            <span class="keyword">for</span> page <span class="keyword">in</span> generate_page_numbers()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 进度跟踪</span></span><br><span class="line">        completed = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> future <span class="keyword">in</span> as_completed(futures):</span><br><span class="line">            completed += <span class="number">1</span></span><br><span class="line">            page = futures[future]</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                future.result()</span><br><span class="line">                status = <span class="string">&quot;成功&quot;</span></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                status = <span class="string">f&quot;失败: <span class="subst">&#123;<span class="built_in">str</span>(e)[:<span class="number">30</span>]&#125;</span>&quot;</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;进度: <span class="subst">&#123;completed&#125;</span>/<span class="subst">&#123;total_pages&#125;</span> | 页码 <span class="subst">&#123;page&#125;</span> <span class="subst">&#123;status&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 随机初始化延迟（1-5秒）</span></span><br><span class="line">    time.sleep(random.uniform(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><ol><li>增加了多浏览器指纹随即切换</li><li>随机请求延迟</li><li>自动重试失败请求</li><li>显示成功和错误日志</li></ol></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今晚上一篇笔趣阁给我干难受了，先是五秒盾，还有页面page参数的不规则&lt;/p&gt;
&lt;h1 id=&quot;直接请求&quot;&gt;&lt;a href=&quot;#直接请求&quot; class=&quot;headerlink&quot; title=&quot;直接请求&quot;&gt;&lt;/a&gt;直接请求&lt;/h1&gt;&lt;p&gt;首先肯定是直接请求&lt;/p&gt;
&lt;p&gt;直接</summary>
      
    
    
    
    <category term="爬虫" scheme="https://scanfup.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="爬虫" scheme="https://scanfup.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>某网站登录login</title>
    <link href="https://scanfup.github.io/posts/46179183.html"/>
    <id>https://scanfup.github.io/posts/46179183.html</id>
    <published>2025-02-27T16:00:00.000Z</published>
    <updated>2025-02-28T03:44:22.007Z</updated>
    
    <content type="html"><![CDATA[<p>表单有两个加密，csrf和password</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250228093647099.png" alt="image-20250228093647099"></p><p>接下来全局搜索了一下，竟然在元素里面搜到了这个参数</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250228093856816.png" alt="image-20250228093856816"></p><p>那就刷新一下再试试这个参数会不会改变</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250228093916014.png" alt="image-20250228093916014"></p><p>可以看到每次去刷新这个请求的时候，参数都会改变，</p><p>那么可以先把这个参数放一边，去看一看password的逻辑</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250228100511599.png" alt="image-20250228100511599"></p><p>刚开始自然是先搜索password的断点，但是发现在这里断不下去</p><p>那么去看一下调用堆栈</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250228100815796.png" alt="image-20250228100815796"></p><p>除了login，还发现这里有一个encrypt，这应该是加密的逻辑，全局搜索一下，再打个断点试试</p><p>跟着断点不断走来到了这里</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250228104357890.png" alt="image-20250228104357890"></p><p>看来这就是加密的函数了，拿出来补环境</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;表单有两个加密，csrf和password&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250228093647099.png&quot; alt=&quot;image-20</summary>
      
    
    
    
    <category term="js逆向" scheme="https://scanfup.github.io/categories/js%E9%80%86%E5%90%91/"/>
    
    
    <category term="js逆向" scheme="https://scanfup.github.io/tags/js%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://scanfup.github.io/posts/0.html"/>
    <id>https://scanfup.github.io/posts/0.html</id>
    <published>2025-02-27T01:43:13.572Z</published>
    <updated>2025-02-28T03:44:22.009Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> checkPaste = <span class="keyword">function</span> <span class="title function_">checkPaste</span>(<span class="params">event</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> keyCode = event.<span class="property">keyCode</span>,</span><br><span class="line">ctrlKey = event.<span class="property">ctrlKey</span>,</span><br><span class="line">metaKey = event.<span class="property">metaKey</span>,</span><br><span class="line">target = event.<span class="property">target</span>,</span><br><span class="line">type = event.<span class="property">type</span>;</span><br><span class="line"><span class="keyword">if</span> ((type === <span class="string">&quot;paste&quot;</span> || (keyCode === <span class="number">67</span> || keyCode === <span class="number">86</span>) &amp;&amp; (metaKey || ctrlKey)) &amp;&amp; target.<span class="property">nodeName</span> === <span class="string">&quot;TEXTAREA&quot;</span>) &#123;</span><br><span class="line"><span class="title function_">tipWarn</span>();</span><br><span class="line">event.<span class="title function_">preventDefault</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>解决代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name         解除OJ粘贴限制</span></span><br><span class="line"><span class="comment">// @namespace    http://tampermonkey.net/</span></span><br><span class="line"><span class="comment">// @version      1.0</span></span><br><span class="line"><span class="comment">// @description  强制允许网页中的复制粘贴</span></span><br><span class="line"><span class="comment">// @match       https://www.educoder.net/*</span></span><br><span class="line"><span class="comment">// @grant        unsafeWindow</span></span><br><span class="line"><span class="comment">// @run-at       document-start</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 劫持所有可能的事件监听器</span></span><br><span class="line">    <span class="keyword">const</span> originalAddEventListener = <span class="title class_">EventTarget</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">addEventListener</span>;</span><br><span class="line">    <span class="title class_">EventTarget</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">addEventListener</span> = <span class="keyword">function</span>(<span class="params">type, listener, options</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([<span class="string">&#x27;paste&#x27;</span>, <span class="string">&#x27;copy&#x27;</span>].<span class="title function_">includes</span>(type)) &#123;</span><br><span class="line">            <span class="keyword">const</span> stack = <span class="keyword">new</span> <span class="title class_">Error</span>().<span class="property">stack</span>;  <span class="comment">// 获取调用栈</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`[拦截] 阻止添加事件: <span class="subst">$&#123;type&#125;</span>`</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`[拦截信息] 监听器代码:`</span>, listener.<span class="title function_">toString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`[拦截信息] 调用栈:\n`</span>, stack);</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">// 直接阻止原网页绑定相关事件</span></span><br><span class="line">        &#125;</span><br><span class="line">        originalAddEventListener.<span class="title function_">call</span>(<span class="variable language_">this</span>, type, listener, options);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 暴力解除键盘限制</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keydown&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ((e.<span class="property">ctrlKey</span> || e.<span class="property">metaKey</span>) &amp;&amp; (e.<span class="property">key</span> === <span class="string">&#x27;v&#x27;</span> || e.<span class="property">key</span> === <span class="string">&#x27;V&#x27;</span> || e.<span class="property">key</span> === <span class="string">&#x27;c&#x27;</span> || e.<span class="property">key</span> === <span class="string">&#x27;C&#x27;</span>)) &#123;</span><br><span class="line">            <span class="comment">// 阻止其他事件</span></span><br><span class="line">            e.<span class="title function_">stopImmediatePropagation</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;OJ粘贴限制已解除!&#x27;</span>);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>牛客周赛round82</title>
    <link href="https://scanfup.github.io/posts/176f2458.html"/>
    <id>https://scanfup.github.io/posts/176f2458.html</id>
    <published>2025-02-26T12:57:00.000Z</published>
    <updated>2025-02-28T03:44:22.010Z</updated>
    
    <content type="html"><![CDATA[<h1 id="夹心饼干"><a href="#夹心饼干" class="headerlink" title="夹心饼干"></a>夹心饼干</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a;<span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">    <span class="keyword">if</span>(a[<span class="number">0</span>]==a[<span class="number">2</span>])&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;YES&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;NO&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="食堂大作战1-0"><a href="#食堂大作战1-0" class="headerlink" title="食堂大作战1.0"></a>食堂大作战1.0</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">int</span> arr[<span class="number">1010</span>];</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> n;<span class="built_in">cin</span>&gt;&gt;n;<span class="comment">//n个窗口</span></span><br><span class="line">    <span class="comment">//假设一个窗口固定人数排队，每个人排队时间相同 </span></span><br><span class="line">    <span class="comment">//询问是否存在合理的排队顺序</span></span><br><span class="line">    <span class="comment">//这个队里没人了窗口才会关闭</span></span><br><span class="line">    <span class="comment">//也就是说，有没有一种情况，我在每个窗口有人前排上对</span></span><br><span class="line">    <span class="comment">//也就是先去人最少的窗口嘛</span></span><br><span class="line">    <span class="comment">//升序排序就ok而且看后面要排队的窗口减去前面的时间就ok了</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)sort(arr,arr+n);</span><br><span class="line">    <span class="comment">//排序后，每个只对于前一个够等就行</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]-arr[i<span class="number">-1</span>]&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;NO&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;YES&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="食堂大作战2-0"><a href="#食堂大作战2-0" class="headerlink" title="食堂大作战2.0"></a>食堂大作战2.0</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">shix</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">cmp</span><span class="params">(shix a,shix b)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.a&lt;b.a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> n;<span class="built_in">cin</span>&gt;&gt;n;<span class="comment">//n个窗口</span></span><br><span class="line">    <span class="comment">//这个如果可以，让输出排队顺序，那直接用一个结构体存一下顺序就行了</span></span><br><span class="line">    shix arr[n+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;arr[i].a;</span><br><span class="line">        arr[i].b=i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(arr,arr+n,cmp);</span><br><span class="line">    <span class="comment">//排序后，每个只对于前一个够等就行</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i].a-arr[i<span class="number">-1</span>].a&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;NO&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;arr[i].b&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;夹心饼干&quot;&gt;&lt;a href=&quot;#夹心饼干&quot; class=&quot;headerlink&quot; title=&quot;夹心饼干&quot;&gt;&lt;/a&gt;夹心饼干&lt;/h1&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;s</summary>
      
    
    
    
    <category term="算法" scheme="https://scanfup.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://scanfup.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>头歌作业（全部，长期更新）</title>
    <link href="https://scanfup.github.io/posts/8185b835.html"/>
    <id>https://scanfup.github.io/posts/8185b835.html</id>
    <published>2025-02-23T16:00:00.000Z</published>
    <updated>2025-03-03T08:05:09.177Z</updated>
    
    <content type="html"><![CDATA[<p><strong>每个作业只包含重要的建表代码，需要先进入数据库，创建基本的数据库之后才能使用下述命令创建表结构</strong></p><hr><p><strong>别的课程作业交给各位大佬了，囊中羞涩时还请相助！</strong></p><h2 id="MySql数据库-初识MySql"><a href="#MySql数据库-初识MySql" class="headerlink" title="MySql数据库-初识MySql"></a>MySql数据库-初识MySql</h2><h3 id="第一关：创建数据库"><a href="#第一关：创建数据库" class="headerlink" title="第一关：创建数据库"></a>第一关：创建数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database MyDb;</span><br></pre></td></tr></table></figure><h3 id="第二关：创建表"><a href="#第二关：创建表" class="headerlink" title="第二关：创建表"></a>第二关：创建表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_emp(</span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">32</span>),</span><br><span class="line">    deptId <span class="type">int</span>,</span><br><span class="line">    salary <span class="type">float</span></span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="第三关：使用主键约束"><a href="#第三关：使用主键约束" class="headerlink" title="第三关：使用主键约束"></a>第三关：使用主键约束</h3><p>创建t_user1表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_user1 (  </span><br><span class="line">    userId <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,          <span class="comment">-- 用户ID  </span></span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,      <span class="comment">-- 用户名  </span></span><br><span class="line">    password <span class="type">VARCHAR</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,  <span class="comment">-- 密码  </span></span><br><span class="line">    phone <span class="type">VARCHAR</span>(<span class="number">11</span>),               <span class="comment">-- 电话号码  </span></span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">32</span>)                <span class="comment">-- 邮箱  </span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>创建t_user2表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_user2 (  </span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,       <span class="comment">-- 用户名  </span></span><br><span class="line">    phone <span class="type">VARCHAR</span>(<span class="number">11</span>),               <span class="comment">-- 电话号码  </span></span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">32</span>),               <span class="comment">-- 邮箱  </span></span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (name, phone)        <span class="comment">-- 联合主键  </span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="第四关：外键约束"><a href="#第四关：外键约束" class="headerlink" title="第四关：外键约束"></a>第四关：外键约束</h3><p>创建student表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_student(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key ,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">22</span>),</span><br><span class="line">    classId <span class="type">int</span> ,</span><br><span class="line">    <span class="keyword">constraint</span>  fk_stu_class1 <span class="keyword">foreign</span> key (classId) <span class="keyword">references</span> t_class(id)</span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>创建class表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_class(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key ,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">22</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="第五关：添加常用约束"><a href="#第五关：添加常用约束" class="headerlink" title="第五关：添加常用约束"></a>第五关：添加常用约束</h3><p>创建t_user表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_user (</span><br><span class="line">                        id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY, <span class="comment">-- 用户ID，主键，自动增长  </span></span><br><span class="line">                        username <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span>, <span class="comment">-- 用户名，非空，唯一  </span></span><br><span class="line">                        sex <span class="type">VARCHAR</span>(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;男&#x27;</span> <span class="comment">-- 性别，默认为“男”  </span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="数据库实验二：数据表中数据的插入，修改和删除"><a href="#数据库实验二：数据表中数据的插入，修改和删除" class="headerlink" title="数据库实验二：数据表中数据的插入，修改和删除"></a>数据库实验二：数据表中数据的插入，修改和删除</h2><h3 id="数据表中插入一条记录，对指定字段赋值"><a href="#数据表中插入一条记录，对指定字段赋值" class="headerlink" title="数据表中插入一条记录，对指定字段赋值"></a>数据表中插入一条记录，对指定字段赋值</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> reader (xm, dhhm) <span class="keyword">VALUES</span> (<span class="string">&#x27;林团团&#x27;</span>, <span class="string">&#x27;13507311234&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="数据表中插入一条记录，对所有字段赋值"><a href="#数据表中插入一条记录，对所有字段赋值" class="headerlink" title="数据表中插入一条记录，对所有字段赋值"></a>数据表中插入一条记录，对所有字段赋值</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> reader(dzzh,xm,xb,sf,dhhm)va1ues(<span class="number">2</span>,陈洁<span class="string">&#x27;，&#x27;</span>女<span class="string">&#x27;，&#x27;</span>教研人员<span class="string">&#x27;，13319551234)；</span></span><br></pre></td></tr></table></figure><h3 id="数据表中插入多条记录"><a href="#数据表中插入多条记录" class="headerlink" title="数据表中插入多条记录"></a>数据表中插入多条记录</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> reader(xm,xb,sf,dhhm) <span class="keyword">values</span></span><br><span class="line">    (<span class="string">&#x27;黄小小&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;研究生&#x27;</span>,<span class="number">13316789987</span>),</span><br><span class="line">    (<span class="string">&#x27;刘大任&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;工作人员&#x27;</span>,<span class="number">18012341234</span>),</span><br><span class="line">    (<span class="string">&#x27;邓朝阳&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;研究生&#x27;</span>,<span class="number">17716554432</span>);</span><br></pre></td></tr></table></figure><h3 id="在数据表中修改单条数据记录的单个字段的值"><a href="#在数据表中修改单条数据记录的单个字段的值" class="headerlink" title="在数据表中修改单条数据记录的单个字段的值"></a>在数据表中修改单条数据记录的单个字段的值</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> reader <span class="keyword">SET</span> dhhm <span class="operator">=</span> <span class="string">&#x27;17718991989&#x27;</span> <span class="keyword">WHERE</span> xm <span class="operator">=</span> <span class="string">&#x27;林团团&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="在数据表中修改单条记录的多个字段的值"><a href="#在数据表中修改单条记录的多个字段的值" class="headerlink" title="在数据表中修改单条记录的多个字段的值"></a>在数据表中修改单条记录的多个字段的值</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> reader <span class="keyword">set</span> dhhm<span class="operator">=</span><span class="string">&#x27;13315667745&#x27;</span>,sf<span class="operator">=</span><span class="string">&#x27;工作人员&#x27;</span> <span class="keyword">where</span> xm<span class="operator">=</span><span class="string">&#x27;陈洁&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="修改数据表的多条记录"><a href="#修改数据表的多条记录" class="headerlink" title="修改数据表的多条记录"></a>修改数据表的多条记录</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> reader <span class="keyword">set</span> dzzh<span class="operator">=</span>dzzh<span class="operator">+</span><span class="number">10</span>;</span><br></pre></td></tr></table></figure><h3 id="删除数据表中的记录"><a href="#删除数据表中的记录" class="headerlink" title="删除数据表中的记录"></a>删除数据表中的记录</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> reader <span class="keyword">WHERE</span> xm <span class="operator">=</span> <span class="string">&#x27;陈洁&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="删除数据表中的多条记录"><a href="#删除数据表中的多条记录" class="headerlink" title="删除数据表中的多条记录"></a>删除数据表中的多条记录</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> reader <span class="keyword">where</span> sf<span class="operator">=</span><span class="string">&#x27;研究生&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="删除数据表中的所有数据"><a href="#删除数据表中的所有数据" class="headerlink" title="删除数据表中的所有数据"></a>删除数据表中的所有数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> reader;</span><br></pre></td></tr></table></figure><h2 id="数据库实验三-数据查询一"><a href="#数据库实验三-数据查询一" class="headerlink" title="数据库实验三 数据查询一"></a>数据库实验三 数据查询一</h2><h3 id="第一关：按条件查询单表的所有字段"><a href="#第一关：按条件查询单表的所有字段" class="headerlink" title="第一关：按条件查询单表的所有字段"></a>第一关：按条件查询单表的所有字段</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">use province;</span><br><span class="line"> #代码开始</span><br><span class="line"> #第一题</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> jdxx <span class="keyword">where</span> qxmc<span class="operator">=</span>&quot;开福区&quot;;</span><br><span class="line"> #第二题</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> jdxx <span class="keyword">where</span> qxmc <span class="keyword">in</span>(&quot;开福区&quot;,&quot;岳麓区&quot;);</span><br><span class="line"></span><br><span class="line"> #第三题</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> jdxx <span class="keyword">where</span> cs<span class="operator">=</span>&quot;长沙市&quot; <span class="keyword">and</span> name<span class="operator">=</span>&quot;西湖街道&quot;;</span><br><span class="line">  </span><br><span class="line"> #代码结束</span><br></pre></td></tr></table></figure><h3 id="第二关：查询唯一值"><a href="#第二关：查询唯一值" class="headerlink" title="第二关：查询唯一值"></a>第二关：查询唯一值</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">use province</span><br><span class="line"> #代码开始</span><br><span class="line"> </span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> qxmc <span class="keyword">from</span> jdxx <span class="keyword">where</span> sf<span class="operator">=</span>&quot;湖南省&quot;;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> qxmc <span class="keyword">from</span> jdxx <span class="keyword">where</span> cs<span class="operator">=</span>&quot;长沙市&quot;;</span><br><span class="line"> </span><br><span class="line"> #代码结束</span><br></pre></td></tr></table></figure><h3 id="第三关：统计查询"><a href="#第三关：统计查询" class="headerlink" title="第三关：统计查询"></a>第三关：统计查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">use province;</span><br><span class="line">#代码开始</span><br><span class="line">#答案<span class="number">1</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(name)  <span class="keyword">from</span> jdxx <span class="keyword">where</span> sf<span class="operator">=</span>&quot;湖南省&quot;;</span><br><span class="line">#答案</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(name)  <span class="keyword">from</span> jdxx <span class="keyword">where</span> cs<span class="operator">=</span>&quot;长沙市&quot;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span>  <span class="built_in">count</span>(<span class="keyword">distinct</span> qxmc)  <span class="keyword">from</span> jdxx <span class="keyword">where</span> sf<span class="operator">=</span>&quot;湖南省&quot;;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> qxmc)  <span class="keyword">from</span> jdxx <span class="keyword">where</span> cs<span class="operator">=</span>&quot;长沙市&quot;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="第四关：分组查询"><a href="#第四关：分组查询" class="headerlink" title="第四关：分组查询"></a>第四关：分组查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">use province;</span><br><span class="line"><span class="keyword">SELECT</span> sf, <span class="built_in">count</span>(<span class="operator">*</span>) </span><br><span class="line"><span class="keyword">FROM</span> jdxx  </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> sf;  </span><br><span class="line"><span class="keyword">SELECT</span> cs, <span class="built_in">count</span>(<span class="operator">*</span>) </span><br><span class="line"><span class="keyword">FROM</span> jdxx  </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> cs  </span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">count</span>(name) <span class="operator">&gt;</span> <span class="number">200</span>;  </span><br><span class="line"><span class="keyword">SELECT</span> qxmc, <span class="built_in">count</span>(<span class="operator">*</span>) </span><br><span class="line"><span class="keyword">FROM</span> jdxx  </span><br><span class="line"><span class="keyword">WHERE</span> cs <span class="operator">=</span> <span class="string">&#x27;长沙市&#x27;</span>  </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> qxmc;  </span><br></pre></td></tr></table></figure><h3 id="第五关：数据排序"><a href="#第五关：数据排序" class="headerlink" title="第五关：数据排序"></a>第五关：数据排序</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> use province;</span><br><span class="line"> #代码开始</span><br><span class="line"> #第一题</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span>  </span><br><span class="line"><span class="keyword">FROM</span> jdtj  </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> jdgs <span class="keyword">DESC</span>  </span><br><span class="line">LIMIT <span class="number">10</span>;  </span><br><span class="line"> #第二题</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span>  </span><br><span class="line"><span class="keyword">FROM</span> jdtj  </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> jdgs <span class="keyword">ASC</span>  </span><br><span class="line">LIMIT <span class="number">10</span>;  </span><br><span class="line"> #第三题</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span>  </span><br><span class="line"><span class="keyword">FROM</span> jdtj  </span><br><span class="line"><span class="keyword">WHERE</span> jdgs <span class="operator">&gt;</span> <span class="number">35</span>  </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> jdgs <span class="keyword">DESC</span>, sf <span class="keyword">ASC</span>;  </span><br><span class="line"> #代码结束</span><br></pre></td></tr></table></figure><h2 id="数据库实验一：数据库和数据表的建立，修改和删除"><a href="#数据库实验一：数据库和数据表的建立，修改和删除" class="headerlink" title="数据库实验一：数据库和数据表的建立，修改和删除"></a>数据库实验一：数据库和数据表的建立，修改和删除</h2><h3 id="第一关：建立数据库"><a href="#第一关：建立数据库" class="headerlink" title="第一关：建立数据库"></a>第一关：建立数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database jwxt;</span><br><span class="line"><span class="keyword">show</span> databases;</span><br></pre></td></tr></table></figure><h3 id="第二关：建立学生数据表"><a href="#第二关：建立学生数据表" class="headerlink" title="第二关：建立学生数据表"></a>第二关：建立学生数据表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 使用数据库 jwxt  </span></span><br><span class="line">USE jwxt;  </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建 student 表  </span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student (  </span><br><span class="line">    studentid <span class="type">CHAR</span>(<span class="number">12</span>) <span class="keyword">PRIMARY</span> KEY,  </span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">10</span>),  </span><br><span class="line">    birthday <span class="type">DATE</span>,  </span><br><span class="line">    sex ENUM(<span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;女&#x27;</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;男&#x27;</span>,  </span><br><span class="line">    nativeplace <span class="type">VARCHAR</span>(<span class="number">3</span>),  </span><br><span class="line">    political ENUM(<span class="string">&#x27;党员&#x27;</span>, <span class="string">&#x27;团员&#x27;</span>, <span class="string">&#x27;群众&#x27;</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;群众&#x27;</span>,  </span><br><span class="line">    interest <span class="keyword">SET</span>(<span class="string">&#x27;运动&#x27;</span>, <span class="string">&#x27;旅游&#x27;</span>, <span class="string">&#x27;阅读&#x27;</span>, <span class="string">&#x27;写作&#x27;</span>, <span class="string">&#x27;音乐&#x27;</span>, <span class="string">&#x27;影视&#x27;</span>, <span class="string">&#x27;电子竞技&#x27;</span>, <span class="string">&#x27;其他&#x27;</span>),  </span><br><span class="line">    resume TEXT,  </span><br><span class="line">    photo <span class="type">VARCHAR</span>(<span class="number">20</span>)  </span><br><span class="line">);  </span><br><span class="line"><span class="comment">-- 显示 student 表的结构  </span></span><br><span class="line"><span class="keyword">DESC</span> student;  </span><br></pre></td></tr></table></figure><h3 id="第三关：建立课程数据表"><a href="#第三关：建立课程数据表" class="headerlink" title="第三关：建立课程数据表"></a>第三关：建立课程数据表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 使用数据库 jwxt  </span></span><br><span class="line">USE jwxt;  </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建 course 表  </span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> course (  </span><br><span class="line">    courseid <span class="type">CHAR</span>(<span class="number">4</span>) <span class="keyword">PRIMARY</span> KEY,  </span><br><span class="line">    coursename <span class="type">VARCHAR</span>(<span class="number">10</span>),  </span><br><span class="line">    department <span class="type">VARCHAR</span>(<span class="number">20</span>),  </span><br><span class="line">    credit TINYINT UNSIGNED,  </span><br><span class="line">    required TINYINT(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="number">1</span>,  </span><br><span class="line">    <span class="keyword">period</span> TINYINT UNSIGNED,  </span><br><span class="line">    introduce <span class="type">VARCHAR</span>(<span class="number">100</span>)  </span><br><span class="line">);  </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 显示 course 表的结构  </span></span><br><span class="line"><span class="keyword">DESC</span> course;  </span><br></pre></td></tr></table></figure><h3 id="第四关：建立成绩数据表"><a href="#第四关：建立成绩数据表" class="headerlink" title="第四关：建立成绩数据表"></a>第四关：建立成绩数据表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 使用数据库 jwxt  </span></span><br><span class="line">USE jwxt;  </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建 score 表  </span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> score (  </span><br><span class="line">    studentid <span class="type">VARCHAR</span>(<span class="number">12</span>),  <span class="comment">-- 学号  </span></span><br><span class="line">    courseid <span class="type">VARCHAR</span>(<span class="number">4</span>),     <span class="comment">-- 课程编号  </span></span><br><span class="line">    session <span class="keyword">YEAR</span>,            <span class="comment">-- 学年  </span></span><br><span class="line">    score <span class="type">DECIMAL</span>(<span class="number">4</span>, <span class="number">1</span>) ,  <span class="comment">-- 分数，长度4位，小数位1位  </span></span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (studentid, courseid, session)  <span class="comment">-- 主键组合  </span></span><br><span class="line">);  </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 显示 score 表的结构  </span></span><br><span class="line"><span class="keyword">DESC</span> score;  </span><br></pre></td></tr></table></figure><h3 id="第五关：修改数据表名字"><a href="#第五关：修改数据表名字" class="headerlink" title="第五关：修改数据表名字"></a>第五关：修改数据表名字</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">use jwxt;</span><br><span class="line">#代码开始</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student rename xs;</span><br><span class="line"> </span><br><span class="line"> #代码结束</span><br><span class="line"> <span class="keyword">describe</span> xs;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="第六关：在数据表中添加字段"><a href="#第六关：在数据表中添加字段" class="headerlink" title="第六关：在数据表中添加字段"></a>第六关：在数据表中添加字段</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> use jwxt;</span><br><span class="line">#代码开始</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">add</span> address <span class="type">varchar</span>(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"> #代码结束</span><br><span class="line"> <span class="keyword">describe</span> student;</span><br></pre></td></tr></table></figure><h3 id="第七关：修改数据表的字段名称"><a href="#第七关：修改数据表的字段名称" class="headerlink" title="第七关：修改数据表的字段名称"></a>第七关：修改数据表的字段名称</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> use jwxt;</span><br><span class="line"> #代码开始</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> course change coursename kcmc <span class="type">varchar</span>(<span class="number">10</span>);</span><br><span class="line"> #代码结束</span><br><span class="line"> <span class="keyword">describe</span> course;</span><br></pre></td></tr></table></figure><h3 id="第八关：修改数据表的字段类型"><a href="#第八关：修改数据表的字段类型" class="headerlink" title="第八关：修改数据表的字段类型"></a>第八关：修改数据表的字段类型</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use jwxt;</span><br><span class="line">#代码开始</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> course modify introduce text;</span><br><span class="line">#代码结束</span><br><span class="line"><span class="keyword">describe</span> course;</span><br></pre></td></tr></table></figure><h3 id="第九关：删除数据表中的字段"><a href="#第九关：删除数据表中的字段" class="headerlink" title="第九关：删除数据表中的字段"></a>第九关：删除数据表中的字段</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> use jwxt;</span><br><span class="line"> #代码开始</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">drop</span> address;</span><br><span class="line"> #代码结束</span><br><span class="line"> <span class="keyword">describe</span> student;</span><br></pre></td></tr></table></figure><h3 id="第十关：删除数据表"><a href="#第十关：删除数据表" class="headerlink" title="第十关：删除数据表"></a>第十关：删除数据表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> use jwxt;</span><br><span class="line"> #代码开始</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> student;</span><br><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line"> #代码结束</span><br></pre></td></tr></table></figure><h3 id="第十一关：删除数据库"><a href="#第十一关：删除数据库" class="headerlink" title="第十一关：删除数据库"></a>第十一关：删除数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> #代码开始</span><br><span class="line"><span class="keyword">drop</span> database jwxt;</span><br><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line"> #代码结束</span><br></pre></td></tr></table></figure><h2 id="数据库教学案例三-数据查询一"><a href="#数据库教学案例三-数据查询一" class="headerlink" title="数据库教学案例三 数据查询一"></a>数据库教学案例三 数据查询一</h2><h3 id="第一关：查询数据表的所有字段或指定字段及表达式"><a href="#第一关：查询数据表的所有字段或指定字段及表达式" class="headerlink" title="第一关：查询数据表的所有字段或指定字段及表达式"></a>第一关：查询数据表的所有字段或指定字段及表达式</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> use jwxt;</span><br><span class="line"> #代码开始</span><br><span class="line"> #第一题</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span>  </span><br><span class="line"><span class="keyword">FROM</span> student;  </span><br><span class="line"> #第二题</span><br><span class="line"><span class="keyword">SELECT</span> name, birthday  </span><br><span class="line"><span class="keyword">FROM</span> student;  </span><br><span class="line"></span><br><span class="line"> #第三题</span><br><span class="line"><span class="keyword">SELECT</span>   </span><br><span class="line">    name,   </span><br><span class="line">   DATE_FORMAT(birthday, <span class="string">&#x27;%c月%e日&#x27;</span>) <span class="keyword">AS</span> 生日 </span><br><span class="line">        <span class="keyword">FROM</span> student;  </span><br><span class="line"> # 第四题</span><br><span class="line"><span class="keyword">SELECT</span>   </span><br><span class="line">    name,  </span><br><span class="line">        <span class="keyword">YEAR</span>(CURDATE()) <span class="operator">-</span> <span class="keyword">YEAR</span>(birthday)<span class="number">-1</span> <span class="keyword">AS</span> 年龄  </span><br><span class="line">        <span class="keyword">FROM</span> student;   </span><br><span class="line"> </span><br><span class="line"> #代码结束</span><br></pre></td></tr></table></figure><h3 id="第二关：按条件查询单表"><a href="#第二关：按条件查询单表" class="headerlink" title="第二关：按条件查询单表"></a>第二关：按条件查询单表</h3><p>不会写，求大佬</p><h3 id="第三关：查询唯一值："><a href="#第三关：查询唯一值：" class="headerlink" title="第三关：查询唯一值："></a>第三关：查询唯一值：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">use jwxt</span><br><span class="line"> #代码开始</span><br><span class="line"> #第一题</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> nativeplace <span class="keyword">FROM</span> student;  </span><br><span class="line"></span><br><span class="line"> #第二题</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">distinct</span> <span class="keyword">YEAR</span>(birthday) <span class="keyword">AS</span> <span class="string">&#x27;year(birthday)&#x27;</span> <span class="keyword">FROM</span> student;  </span><br><span class="line"> </span><br><span class="line"> #代码结束</span><br></pre></td></tr></table></figure><h2 id="数据库实验一-数据库和数据表的建立、修改和删除"><a href="#数据库实验一-数据库和数据表的建立、修改和删除" class="headerlink" title="数据库实验一 数据库和数据表的建立、修改和删除"></a>数据库实验一 数据库和数据表的建立、修改和删除</h2><h3 id="第一关：建立数据库-1"><a href="#第一关：建立数据库-1" class="headerlink" title="第一关：建立数据库"></a>第一关：建立数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> #代码开始</span><br><span class="line"><span class="keyword">drop</span> database database_name;</span><br><span class="line"><span class="keyword">create</span> database library;</span><br><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line"> #代码结束</span><br></pre></td></tr></table></figure><h3 id="第二关：建立读者数据表"><a href="#第二关：建立读者数据表" class="headerlink" title="第二关：建立读者数据表"></a>第二关：建立读者数据表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> #代码开始</span><br><span class="line">use library;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dz (</span><br><span class="line">    dzzh <span class="type">INT</span>(<span class="number">3</span>) UNSIGNED ZEROFILL <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,   </span><br><span class="line">    xm <span class="type">VARCHAR</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,                   <span class="comment">-- 姓名，不能为空  </span></span><br><span class="line">    xb ENUM(<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;男&#x27;</span>,           <span class="comment">-- 性别，默认为男  </span></span><br><span class="line">    sf ENUM(<span class="string">&#x27;研究生&#x27;</span>,<span class="string">&#x27;工作人员&#x27;</span>,<span class="string">&#x27;教研人员&#x27;</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;研究生&#x27;</span>,  <span class="comment">-- 身份  </span></span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (dzzh)                        <span class="comment">-- 设置 dzzh 为主键  </span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">DESCRIBE</span> dz;  </span><br><span class="line"> #代码结束</span><br></pre></td></tr></table></figure><h3 id="第三关：修改数据表名字"><a href="#第三关：修改数据表名字" class="headerlink" title="第三关：修改数据表名字"></a>第三关：修改数据表名字</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">use library;</span><br><span class="line">#代码开始</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> dz rename reader;</span><br><span class="line"> </span><br><span class="line"> #代码结束</span><br><span class="line"> <span class="keyword">describe</span> reader;</span><br></pre></td></tr></table></figure><h3 id="第四关：在数据表中添加字段"><a href="#第四关：在数据表中添加字段" class="headerlink" title="第四关：在数据表中添加字段"></a>第四关：在数据表中添加字段</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> use library;</span><br><span class="line">#代码开始</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> reader <span class="keyword">add</span> dhhm <span class="type">varchar</span>(<span class="number">11</span>);</span><br><span class="line"> </span><br><span class="line"> #代码结束</span><br><span class="line"> <span class="keyword">describe</span> reader;</span><br></pre></td></tr></table></figure><h3 id="第五关：修改数据表的字段名称"><a href="#第五关：修改数据表的字段名称" class="headerlink" title="第五关：修改数据表的字段名称"></a>第五关：修改数据表的字段名称</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> use library;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> reader   </span><br><span class="line">CHANGE dhhm mobile <span class="type">VARCHAR</span>(<span class="number">11</span>);  <span class="comment">-- 这里假设长度为 15，根据需要调整  </span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">describe</span> reader;</span><br></pre></td></tr></table></figure><h3 id="第六关：修改数据表的字段类型"><a href="#第六关：修改数据表的字段类型" class="headerlink" title="第六关：修改数据表的字段类型"></a>第六关：修改数据表的字段类型</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use library;</span><br><span class="line">#代码开始</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> reader modify dhhm <span class="type">varchar</span>(<span class="number">12</span>);</span><br><span class="line">#代码结束</span><br><span class="line"><span class="keyword">describe</span> reader;</span><br></pre></td></tr></table></figure><h3 id="第七关：删除数据表中的字段"><a href="#第七关：删除数据表中的字段" class="headerlink" title="第七关：删除数据表中的字段"></a>第七关：删除数据表中的字段</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> use library;</span><br><span class="line"> #代码开始</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> reader <span class="keyword">drop</span> dhhm;</span><br><span class="line"> #代码结束</span><br><span class="line"> <span class="keyword">describe</span> reader;</span><br></pre></td></tr></table></figure><h3 id="第八关：删除数据表"><a href="#第八关：删除数据表" class="headerlink" title="第八关：删除数据表"></a>第八关：删除数据表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> use library;</span><br><span class="line"> #代码开始</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> reader;</span><br><span class="line"><span class="keyword">show</span> tables; </span><br><span class="line"> #代码结束</span><br></pre></td></tr></table></figure><h3 id="第九关：删除数据库"><a href="#第九关：删除数据库" class="headerlink" title="第九关：删除数据库"></a>第九关：删除数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> #代码开始</span><br><span class="line"><span class="keyword">drop</span> database library;</span><br><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line"> #代码结束</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;每个作业只包含重要的建表代码，需要先进入数据库，创建基本的数据库之后才能使用下述命令创建表结构&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;别的课程作业交给各位大佬了，囊中羞涩时还请相助！&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;MySql数</summary>
      
    
    
    
    <category term="大学课程" scheme="https://scanfup.github.io/categories/%E5%A4%A7%E5%AD%A6%E8%AF%BE%E7%A8%8B/"/>
    
    
    <category term="大学课程" scheme="https://scanfup.github.io/tags/%E5%A4%A7%E5%AD%A6%E8%AF%BE%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>注解</title>
    <link href="https://scanfup.github.io/posts/a70f4376.html"/>
    <id>https://scanfup.github.io/posts/a70f4376.html</id>
    <published>2025-02-22T16:00:00.000Z</published>
    <updated>2025-03-04T02:48:07.864Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-和-MyBatis-常用注解解析"><a href="#Spring-和-MyBatis-常用注解解析" class="headerlink" title="Spring 和 MyBatis 常用注解解析"></a>Spring 和 MyBatis 常用注解解析</h1><h2 id="1-Override-方法重写"><a href="#1-Override-方法重写" class="headerlink" title="1. @Override - 方法重写"></a>1. <code>@Override</code> - 方法重写</h2><p>用于标注<strong>子类重写父类的方法</strong>，有助于编译器检查，防止拼写错误或方法签名不匹配。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-Service-标记业务层服务"><a href="#2-Service-标记业务层服务" class="headerlink" title="2. @Service - 标记业务层服务"></a>2. <code>@Service</code> - 标记业务层服务</h2><p><code>@Service</code> 是 Spring 的<strong>组件注解</strong>，用于标记<strong>业务逻辑层</strong>的类，使其被 Spring 容器管理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;User registered!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-Autowired-依赖注入"><a href="#3-Autowired-依赖注入" class="headerlink" title="3. @Autowired - 依赖注入"></a>3. <code>@Autowired</code> - 依赖注入</h2><p><code>@Autowired</code> 用于<strong>自动注入</strong> Spring 容器中的 Bean，常用于<strong>构造函数、方法或字段</strong>上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="4-Slf4j-日志支持"><a href="#4-Slf4j-日志支持" class="headerlink" title="4. @Slf4j - 日志支持"></a>4. <code>@Slf4j</code> - 日志支持</h2><p><code>@Slf4j</code> 是 Lombok 提供的注解，自动生成 <code>log</code> 变量，可用于<strong>日志记录</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;Executing service...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="5-Data-Lombok-的-Getter、Setter、toString"><a href="#5-Data-Lombok-的-Getter、Setter、toString" class="headerlink" title="5. @Data - Lombok 的 Getter、Setter、toString"></a>5. <code>@Data</code> - Lombok 的 Getter、Setter、toString</h2><p><code>@Data</code> 是 Lombok 提供的快捷注解，自动生成<strong>Getter、Setter、toString、equals、hashCode</strong> 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="6-NoArgsConstructor-无参构造函数"><a href="#6-NoArgsConstructor-无参构造函数" class="headerlink" title="6. @NoArgsConstructor - 无参构造函数"></a>6. <code>@NoArgsConstructor</code> - 无参构造函数</h2><p>Lombok 提供的注解，自动生成<strong>无参构造方法</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;&#125; <span class="comment">// 无参构造</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="7-AllArgsConstructor-全参构造函数"><a href="#7-AllArgsConstructor-全参构造函数" class="headerlink" title="7. @AllArgsConstructor - 全参构造函数"></a>7. <code>@AllArgsConstructor</code> - 全参构造函数</h2><p>Lombok 提供的注解，自动生成<strong>全参数构造方法</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="8-Mapper-MyBatis-映射接口"><a href="#8-Mapper-MyBatis-映射接口" class="headerlink" title="8. @Mapper - MyBatis 映射接口"></a>8. <code>@Mapper</code> - MyBatis 映射接口</h2><p><code>@Mapper</code> 用于标注 <strong>MyBatis 的 Mapper 接口</strong>，使其被 Spring 管理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="9-Select-MyBatis-查询语句"><a href="#9-Select-MyBatis-查询语句" class="headerlink" title="9. @Select - MyBatis 查询语句"></a>9. <code>@Select</code> - MyBatis 查询语句</h2><p><code>@Select</code> 用于 MyBatis <strong>查询数据</strong>，可以直接在接口上定义 SQL 语句。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;SELECT * FROM users WHERE id = #&#123;id&#125;&quot;)</span></span><br><span class="line">User <span class="title function_">findById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="10-Delete-MyBatis-删除语句"><a href="#10-Delete-MyBatis-删除语句" class="headerlink" title="10. @Delete - MyBatis 删除语句"></a>10. <code>@Delete</code> - MyBatis 删除语句</h2><p><code>@Delete</code> 用于 MyBatis <strong>删除数据</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Delete(&quot;DELETE FROM users WHERE id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="11-Insert-MyBatis-插入语句"><a href="#11-Insert-MyBatis-插入语句" class="headerlink" title="11. @Insert - MyBatis 插入语句"></a>11. <code>@Insert</code> - MyBatis 插入语句</h2><p><code>@Insert</code> 用于 MyBatis <strong>插入数据</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Insert(&quot;INSERT INTO users (name, age) VALUES (#&#123;name&#125;, #&#123;age&#125;)&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="12-GetMapping-处理-HTTP-GET-请求"><a href="#12-GetMapping-处理-HTTP-GET-请求" class="headerlink" title="12. @GetMapping - 处理 HTTP GET 请求"></a>12. <code>@GetMapping</code> - 处理 HTTP GET 请求</h2><p><code>@GetMapping</code> 用于 Spring MVC 处理 <strong>GET 请求</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getAllUsers</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> userService.findAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/users&quot;, method = RequestMethod.GET)</span></span><br></pre></td></tr></table></figure><hr><h2 id="13-RequestParam-获取请求参数"><a href="#13-RequestParam-获取请求参数" class="headerlink" title="13. @RequestParam - 获取请求参数"></a>13. <code>@RequestParam</code> - 获取请求参数</h2><p><code>@RequestParam</code> 用于<strong>获取 URL 传递的参数</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span> <span class="type">int</span> userId)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> userService.findById(userId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问 <code>/user?id=1</code>，则 <code>userId = 1</code>。</p><hr><h2 id="14-DateTimeFormat-日期格式化"><a href="#14-DateTimeFormat-日期格式化" class="headerlink" title="14. @DateTimeFormat - 日期格式化"></a>14. <code>@DateTimeFormat</code> - 日期格式化</h2><p><code>@DateTimeFormat</code> 用于<strong>格式化日期参数</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/date&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">formatDate</span><span class="params">(<span class="meta">@RequestParam(&quot;date&quot;)</span> <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> LocalDate date)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Formatted date: &quot;</span> + date;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求 <code>/date?date=2024-02-23</code>，参数 <code>date</code> 会自动转换为 <code>LocalDate</code>。</p><hr><p>在 Java 的 Spring 框架中，<code>@RequestBody</code> 和 <code>@PathVariable</code> 是常见的注解，主要用于处理 HTTP 请求的数据。以下是它们的详细解释：</p><h2 id="15-RequestBody"><a href="#15-RequestBody" class="headerlink" title="15. @RequestBody"></a><strong>15. <code>@RequestBody</code></strong></h2><ul><li><strong>作用</strong>：用于将 HTTP 请求体（Request Body）转换为 Java 对象（通常是 JSON 或 XML 格式）。</li><li><strong>使用场景</strong>：当客户端发送 JSON 数据时，后端可以使用 <code>@RequestBody</code> 将其解析为 Java 对象。</li></ul><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping(&quot;/create&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">createUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        <span class="comment">// user 对象会自动从请求体中解析</span></span><br><span class="line">        <span class="keyword">return</span> user;  <span class="comment">// 假设直接返回用户对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解释：</strong></p><ul><li><p><code>@RequestBody</code> 作用在 <code>User</code> 类型的参数上，Spring 会自动将请求体中的 JSON 解析为 <code>User</code> 对象。</p></li><li><p>客户端请求示例（JSON 格式）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;林林&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">25</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="16-PathVariable"><a href="#16-PathVariable" class="headerlink" title="16. @PathVariable"></a><strong>16. <code>@PathVariable</code></strong></h2><ul><li><strong>作用</strong>：用于获取 URL 路径中的变量，并将其绑定到方法参数上。</li><li><strong>使用场景</strong>：当 URL 需要携带动态参数时，比如获取用户 ID、商品 ID 等。</li></ul><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUserById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long userId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;用户ID：&quot;</span> + userId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="17-RestController-注解解析"><a href="#17-RestController-注解解析" class="headerlink" title="17.@RestController 注解解析"></a><strong>17.<code>@RestController</code> 注解解析</strong></h2><p>在 Spring Boot 开发中，<code>@RestController</code> 是一个常见的注解，主要用于构建 RESTful Web 服务。</p><hr><h3 id="1-RestController-的作用"><a href="#1-RestController-的作用" class="headerlink" title="1. @RestController 的作用"></a><strong>1. <code>@RestController</code> 的作用</strong></h3><ul><li>```<br>@RestController<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   是 `<span class="variable">@Controller</span><span class="built_in">`和 `</span><span class="variable">@ResponseBody</span><span class="built_in">` 的组合注解，作用是：</span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">  1. **标记该类是一个控制器**，用于处理 HTTP 请求（等同于 `</span><span class="variable">@Controller</span><span class="built_in">`）。</span></span><br><span class="line"><span class="built_in">  2. **返回 JSON 或 XML 格式的数据**，不需要额外加 `</span><span class="variable">@ResponseBody</span><span class="built_in">`（等同于 `</span><span class="variable">@ResponseBody</span><span class="built_in">`）。</span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">------</span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">### **2. `</span><span class="variable">@RestController</span><span class="built_in">` 的使用**</span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">**示例：**</span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">`</span><span class="built_in">``</span>java</span><br><span class="line">import org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="variable">@RestController</span></span><br><span class="line"><span class="variable">@RequestMapping</span>(<span class="string">&quot;/users&quot;</span>)</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">@GetMapping</span>(<span class="string">&quot;/&#123;id&#125;&quot;</span>)</span><br><span class="line">    public User <span class="built_in">getUser</span>(<span class="variable">@PathVariable</span>(<span class="string">&quot;id&quot;</span>) Long id) &#123;</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">new</span> <span class="selector-tag">User</span>(id, <span class="string">&quot;林林&quot;</span>, <span class="number">25</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>对应的 HTTP 请求：</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /users/1</span><br></pre></td></tr></table></figure><p><strong>返回 JSON 数据：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;林林&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">25</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-和-MyBatis-常用注解解析&quot;&gt;&lt;a href=&quot;#Spring-和-MyBatis-常用注解解析&quot; class=&quot;headerlink&quot; title=&quot;Spring 和 MyBatis 常用注解解析&quot;&gt;&lt;/a&gt;Spring 和 MyBatis </summary>
      
    
    
    
    <category term="springboot黑马综合案例" scheme="https://scanfup.github.io/categories/springboot%E9%BB%91%E9%A9%AC%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/"/>
    
    
    <category term="springboot黑马综合案例" scheme="https://scanfup.github.io/tags/springboot%E9%BB%91%E9%A9%AC%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>mybatis</title>
    <link href="https://scanfup.github.io/posts/15832afd.html"/>
    <id>https://scanfup.github.io/posts/15832afd.html</id>
    <published>2025-02-22T16:00:00.000Z</published>
    <updated>2025-02-24T13:25:26.123Z</updated>
    
    <content type="html"><![CDATA[<p><strong>mybatis 是一款优秀的持久层框架，用于简化jdbc的开发</strong></p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250221081317979.png" alt="image-20250221081317979"></p><h2 id="jdbc"><a href="#jdbc" class="headerlink" title="jdbc"></a>jdbc</h2><p>jdbc是sum公司提供的一套操作关系型数据库的api</p><h2 id="lombok"><a href="#lombok" class="headerlink" title="lombok"></a>lombok</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250221094800505.png" alt="image-20250221094800505"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;mybatis 是一款优秀的持久层框架，用于简化jdbc的开发&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/scanfup/img-bag1/main/image-202502210</summary>
      
    
    
    
    <category term="springboot黑马综合案例" scheme="https://scanfup.github.io/categories/springboot%E9%BB%91%E9%A9%AC%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/"/>
    
    
    <category term="springboot黑马综合案例" scheme="https://scanfup.github.io/tags/springboot%E9%BB%91%E9%A9%AC%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>sql</title>
    <link href="https://scanfup.github.io/posts/dbd66adf.html"/>
    <id>https://scanfup.github.io/posts/dbd66adf.html</id>
    <published>2025-02-22T16:00:00.000Z</published>
    <updated>2025-02-24T13:25:26.125Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sql（单表设计）"><a href="#sql（单表设计）" class="headerlink" title="sql（单表设计）"></a>sql（单表设计）</h1><p>启动MySQL</p><p>查看已有数据库<code>show databases;</code></p><p>创建数据库：<code>create database+数据库名字 DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</code></p><p>删除数据库<code>drop database +名字</code></p><p>进入数据库：<code>use +数据库;</code></p><p>查看文件夹中所有数据表:<code>show tables;</code></p><h2 id="创建表："><a href="#创建表：" class="headerlink" title="创建表："></a>创建表：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table 表名称(</span><br><span class="line">列名称 类型，</span><br><span class="line">列名称 类型，</span><br><span class="line">列名称 类型</span><br><span class="line">)default charset=utf8;</span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table tb1(</span><br><span class="line">    id int,</span><br><span class="line">    name varchar(16),</span><br><span class="line">    age int</span><br><span class="line">) default charset=utf8;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table tb1(</span><br><span class="line">    id int,</span><br><span class="line">    name varchar(16) not null, -- 不允许为空</span><br><span class="line">    age int null,             -- 允许为空</span><br><span class="line">) default charset=utf8;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table tb1(</span><br><span class="line">    id int,</span><br><span class="line">    name varchar(16) not null, -- 不允许为空</span><br><span class="line">    age int default 3 -- 插入数据时，age列的值默认为3</span><br><span class="line">) default charset=utf8;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table tb1(</span><br><span class="line">    id int primary key, -- 主键，不允许为空，不允许重复</span><br><span class="line">    name varchar(16) ,</span><br><span class="line">    age int          </span><br><span class="line">) default charset=utf8;</span><br></pre></td></tr></table></figure><p>主键一般用于表示当前行的数据的编号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table tb1(</span><br><span class="line">    id int auto_increament primary key, -- 主键，自增，内部维护</span><br><span class="line">    name varchar(16) not null, -- 不允许为空 </span><br><span class="line">    age int null,             -- 允许为空</span><br><span class="line">) default charset=utf8;</span><br></pre></td></tr></table></figure><p><strong>一般的标准情况</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table tb1(</span><br><span class="line">    id int not null auto_increment primary key,</span><br><span class="line">    name varchar(16) ,</span><br><span class="line">    age int </span><br><span class="line">) default charset=utf8;</span><br></pre></td></tr></table></figure><p>查看表结构：<code>desc tb1</code></p><p>常用数据类型：<code>tinyint int bigint</code>三个，数据范围不一样</p><p>表示小数<code>float double decimal</code></p><p>准确的小数值，m是数字总个数（符号不算)d是小数后个数，m最大值为65，d最大值为30</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb3&#123;</span><br><span class="line">id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">salary <span class="type">decimal</span>(<span class="number">8</span>,<span class="number">2</span>)</span><br><span class="line">&#125;<span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>char 定长字符串：char(11)固定用11个字符串进行存储</li><li>varchar变长字符串：varchar(11)，真实数据有多长按多长存储    </li><li>mediumtext</li><li>longtext</li><li>datetime<code>YYYY-MM-DD HH:MM:SS(1000-01-01 00:00:00/9999-12-31 23:59:59)</code></li><li>date<code>YYYY-MM-DD (1000-01-01/9999-12-31)</code></li></ul><p>用户表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb7(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">primary</span> key auto_increment,<span class="comment">-- id，不空，主键，自动递增</span></span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    password <span class="type">char</span>(<span class="number">64</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    email <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    age tinyint,</span><br><span class="line">    salary <span class="type">decimal</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">    ctime datetime</span><br><span class="line">)<span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p><strong>有符号：范围是 -128 到 127。<br>无符号：范围是 0 到 255。</strong></p><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件</span><br><span class="line"><span class="comment">---</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tb2 <span class="keyword">where</span> id<span class="operator">=</span><span class="number">4</span> <span class="keyword">and</span> name<span class="operator">=</span>&quot;侯卓林&quot;;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tb2 <span class="keyword">where</span> id<span class="operator">&gt;</span><span class="number">4</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tb2 <span class="keyword">where</span> id<span class="operator">!=</span><span class="number">4</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tb2 <span class="keyword">where</span> id <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">5</span>);</span><br></pre></td></tr></table></figure><h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 列<span class="operator">=</span>值</span><br><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 列<span class="operator">=</span>值 <span class="keyword">where</span> 条件</span><br><span class="line"><span class="comment">---</span></span><br><span class="line"><span class="keyword">update</span> tb2 <span class="keyword">set</span> email<span class="operator">=</span>&quot;好好好&quot; <span class="keyword">where</span> id<span class="operator">&gt;</span><span class="number">5</span>;</span><br><span class="line"><span class="keyword">update</span> tb2 <span class="keyword">set</span> age<span class="operator">=</span>age<span class="operator">+</span><span class="number">10</span> <span class="keyword">where</span> id<span class="operator">&gt;</span><span class="number">5</span>;</span><br></pre></td></tr></table></figure><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><h3 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h3><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218171230674.png" alt="image-20250218171230674"></p><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218193046586.png" alt="image-20250218193046586"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名称 <span class="comment">-- 不直观，性能低</span></span><br><span class="line"><span class="keyword">select</span> 列名称，列名称 <span class="keyword">from</span> 表名称</span><br><span class="line"><span class="keyword">select</span> 列名称，列名称 <span class="keyword">from</span> 表名称 <span class="keyword">where</span> 条件</span><br><span class="line"><span class="comment">---</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb7</span><br><span class="line"><span class="comment">-- 查询id小于等于5的员工信息</span></span><br><span class="line"><span class="keyword">select</span> id,name <span class="keyword">from</span> tb7 <span class="keyword">where</span> id<span class="operator">&gt;</span><span class="number">10</span>;</span><br><span class="line"><span class="keyword">select</span> id,name <span class="keyword">from</span> tb7 <span class="keyword">where</span> name<span class="operator">=</span>&quot;xx&quot; <span class="keyword">and</span> password<span class="operator">=</span>&quot;xx&quot;;</span><br><span class="line"><span class="comment">-- 为查询的表结构起别名</span></span><br><span class="line"><span class="keyword">select</span> name 姓名,entrydate 入职日期 <span class="keyword">from</span> 表名称</span><br><span class="line"><span class="comment">-- 查询没有分配职位的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> job <span class="keyword">is</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">-- 查询密码不等于‘123456’的员工</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> password <span class="operator">!=</span> ‘<span class="number">123456</span>’</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> password <span class="operator">&lt;&gt;</span> ‘<span class="number">123456</span>’</span><br><span class="line"><span class="comment">-- 查询入职日期在‘2000-01-01’（包含）到‘2010-01-01’（包含）之间的员工信息</span></span><br><span class="line"><span class="keyword">select</span>  <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> entrydate <span class="keyword">between</span> <span class="string">&#x27;2010-01-01&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2010-12-31&#x27;</span>;</span><br><span class="line"><span class="comment">-- 查询入职日期在2010年1月1日到2010年12月31日的员工，并且性别为女</span></span><br><span class="line"><span class="keyword">select</span>  <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> entrydate <span class="keyword">between</span> <span class="string">&#x27;2010-01-01&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2010-12-31&#x27;</span> <span class="keyword">and</span> sex<span class="operator">=</span><span class="string">&#x27;2&#x27;</span>;</span><br><span class="line"><span class="comment">-- 擦汗寻职位是2，3，4的员工信息</span></span><br><span class="line"><span class="keyword">select</span>  <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> job <span class="keyword">in</span> (<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line"><span class="comment">-- 查询姓名为两个字的员工</span></span><br><span class="line"><span class="keyword">select</span>  <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;__&#x27;</span>;<span class="comment">-- 一个下划线代表一个字</span></span><br><span class="line"><span class="comment">-- 查询姓为张的员工信息</span></span><br><span class="line"><span class="keyword">select</span>  <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;张%&#x27;</span>;<span class="comment">-- %代表一个或者多个字</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="DQL聚合查询"><a href="#DQL聚合查询" class="headerlink" title="DQL聚合查询"></a>DQL聚合查询</h3><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218194631819.png" alt="image-20250218194631819"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 聚合函数 聚合函数不对null值进行判断</span></span><br><span class="line"><span class="comment">-- 统计该企业员工数量</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(id) <span class="keyword">from</span> tb_emp;</span><br><span class="line"><span class="comment">-- 统计该企业最早入职的员工</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(entrydate) <span class="keyword">from</span> tb_emp;</span><br><span class="line"><span class="comment">-- 统计该企业最晚入职的员工</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(entrydate) <span class="keyword">from</span> tb_emp;</span><br><span class="line"><span class="comment">-- 统计该企业平均工资</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(salary) <span class="keyword">from</span> tb_emp;</span><br><span class="line"><span class="comment">-- 统计该企业工资总和</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(salary) <span class="keyword">from</span> tb_emp;</span><br></pre></td></tr></table></figure><h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 根据性别分组，统计男性和女性员工的数量</span></span><br><span class="line"><span class="keyword">select</span> sex,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> tb_emp <span class="keyword">group</span> <span class="keyword">by</span> sex;</span><br><span class="line"><span class="comment">-- 查询是入职时间在2010年1月1日之后，并且对结果根据职位进行分组，获取员工数量大于等于2的员工</span></span><br><span class="line"><span class="keyword">select</span> job,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> tb_emp <span class="keyword">where</span> entrydate<span class="operator">&gt;</span><span class="string">&#x27;2010-01-01&#x27;</span> <span class="keyword">group</span> <span class="keyword">by</span> job <span class="keyword">having</span> <span class="built_in">count</span>(<span class="operator">*</span>)<span class="operator">&gt;=</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure><h3 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 排序查询</span></span><br><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名[<span class="keyword">where</span> 条件列表] [<span class="keyword">group</span> <span class="keyword">by</span> 分组字段] <span class="keyword">order</span> <span class="keyword">by</span> 字段<span class="number">1</span>，排序方式<span class="number">1</span>，字段<span class="number">2</span>，排序方式<span class="number">2</span>;</span><br><span class="line"><span class="comment">-- 根据入职时间，对员工进行升序排序</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">order</span> <span class="keyword">by</span> entrydate <span class="keyword">asc</span>;<span class="comment">-- asc升序</span></span><br><span class="line"><span class="comment">-- 根据入职时间，对员工进行降序排序</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">order</span> <span class="keyword">by</span> entrydate <span class="keyword">desc</span>;</span><br><span class="line"><span class="comment">-- 根据入职时间，对员工进行升序排序，如果入职时间相同，则根据更新时间进行降序排序</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">order</span> <span class="keyword">by</span> entrydate <span class="keyword">asc</span>,updateTime <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 从起始索引0开始查询员工数据，每页展示5条记录</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp limit <span class="number">0</span>,<span class="number">5</span>;</span><br><span class="line"><span class="comment">-- 查询第二页员工数据，每页展示5条记录</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp limit <span class="number">5</span>,<span class="number">5</span>;</span><br><span class="line"><span class="comment">-- 查询第三页员工数据，每页展示5条记录</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp limit <span class="number">10</span>,<span class="number">5</span>;</span><br></pre></td></tr></table></figure><h1 id="sql（多表设计）"><a href="#sql（多表设计）" class="headerlink" title="sql（多表设计）"></a>sql（多表设计）</h1><p><strong>多表设计的意思就是，现在有一个员工表和一个部门表，员工表里面有个部门，现在需要把员工表里放置一个部门的信息</strong></p><h2 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218202017302.png" alt="image-20250218202017302"></p><p><strong>但是这样创建的两张表是相互独立的，没有任何联系</strong></p><p><strong>这就引出了外键约束</strong></p><h2 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218202354233.png" alt="image-20250218202354233"></p><p><strong>如何设置外键约束</strong></p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218202647192.png" alt="image-20250218202647192" style="zoom:50%;" /></p><p><strong>但是物理外键有缺点，什么缺点呢？</strong></p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218202911568.png" alt="image-20250218202911568" style="zoom:50%;" /></p><h3 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h3><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218204900826.png" alt="image-20250218204900826"></p><h2 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h2><p><strong>一个学生可以选择多门课程，而一个课程也可以由多个学生选择</strong></p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218205221728.png" alt="image-20250218205221728"></p><hr><p>剩下的sql等听到了需要的时候再看吧</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;sql（单表设计）&quot;&gt;&lt;a href=&quot;#sql（单表设计）&quot; class=&quot;headerlink&quot; title=&quot;sql（单表设计）&quot;&gt;&lt;/a&gt;sql（单表设计）&lt;/h1&gt;&lt;p&gt;启动MySQL&lt;/p&gt;
&lt;p&gt;查看已有数据库&lt;code&gt;show databases</summary>
      
    
    
    
    <category term="springboot黑马综合案例" scheme="https://scanfup.github.io/categories/springboot%E9%BB%91%E9%A9%AC%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/"/>
    
    
    <category term="springboot黑马综合案例" scheme="https://scanfup.github.io/tags/springboot%E9%BB%91%E9%A9%AC%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>tomcat</title>
    <link href="https://scanfup.github.io/posts/9240bb8c.html"/>
    <id>https://scanfup.github.io/posts/9240bb8c.html</id>
    <published>2025-02-22T16:00:00.000Z</published>
    <updated>2025-02-24T13:25:26.126Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是tomcat"><a href="#什么是tomcat" class="headerlink" title="什么是tomcat"></a>什么是tomcat</h1><p>Tomcat 是由Apache软件基金会开发的一个开源的轻量级Web服务器，主要用于部署和运行Java Servlet和JavaServer Pages (JSP) 技术构建的Web应用。以下是关于Tomcat的一些关键点：</p><ul><li><strong>Java Web应用容器</strong>：Tomcat作为Servlet容器，实现了Java EE（现Jakarta EE）规范中的Servlet、JSP、WebSocket等技术标准。</li><li><strong>开源免费</strong>：它是完全免费的，并且源代码开放，允许开发者根据需要进行修改和定制。</li><li><strong>轻量级与高效性</strong>：相比其他全功能的应用服务器，Tomcat更为轻便，启动速度快，资源占用少。</li><li><strong>易于配置和管理</strong>：提供了简单的XML配置文件来设置各种参数，同时也支持图形界面工具来进行管理和监控。</li><li><strong>广泛使用</strong>：由于其稳定性和灵活性，在中小型网站以及企业级应用中被广泛应用。</li></ul><p>对于Java开发者来说，Tomcat是一个非常重要的工具，它为开发、测试和部署Java Web应用程序提供了必要的环境。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250217193648913.png" alt="image-20250217193648913"></p><h2 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250217194109266.png" alt="image-20250217194109266"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是tomcat&quot;&gt;&lt;a href=&quot;#什么是tomcat&quot; class=&quot;headerlink&quot; title=&quot;什么是tomcat&quot;&gt;&lt;/a&gt;什么是tomcat&lt;/h1&gt;&lt;p&gt;Tomcat 是由Apache软件基金会开发的一个开源的轻量级Web服务器，主要用于</summary>
      
    
    
    
    <category term="springboot黑马综合案例" scheme="https://scanfup.github.io/categories/springboot%E9%BB%91%E9%A9%AC%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/"/>
    
    
    <category term="springboot黑马综合案例" scheme="https://scanfup.github.io/tags/springboot%E9%BB%91%E9%A9%AC%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>分层解耦</title>
    <link href="https://scanfup.github.io/posts/3ca78541.html"/>
    <id>https://scanfup.github.io/posts/3ca78541.html</id>
    <published>2025-02-22T16:00:00.000Z</published>
    <updated>2025-02-24T13:25:26.127Z</updated>
    
    <content type="html"><![CDATA[<h2 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218085900406.png" alt="image-20250218085900406"></p><p><strong>三层架构在项目文件中的分布</strong></p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218090001132.png" alt="image-20250218090001132"></p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218091624703.png" alt="image-20250218091624703"></p><p><strong>软件设计的原则，高内聚低耦合</strong></p><p>高内聚：软件中各个功能模块内部的功能联系紧密，每个模块的功能实现具体</p><p>低耦合：软件中各个层/模块之间的依赖，关联的程度低</p><h2 id="分层解耦的思想"><a href="#分层解耦的思想" class="headerlink" title="分层解耦的思想"></a>分层解耦的思想</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218092534276.png" alt="image-20250218092534276"></p><h2 id="IOC-amp-DI入门"><a href="#IOC-amp-DI入门" class="headerlink" title="IOC&amp;DI入门"></a>IOC&amp;DI入门</h2><p>service层以及dao层的实现类，交给IOC容器管理</p><p>为controller及service注入运行时，依赖的对象</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218121431169.png" alt="image-20250218121431169"></p><p><strong>@RestController 主要用于开发 RESTful API，适用于需要返回 JSON 或 XML 格式数据的 Web 服务</strong></p><p><strong>Bean 是 Spring 框架的核心概念之一，它代表了由 Spring 容器管理的对象。通过声明式配置和依赖注入，可以轻松地管理和组织应用程序中的组件，提高代码的可维护性和灵活性。理解 Bean 的定义、作用域和生命周期对于开发高质量的 Spring 应用程序至关重要</strong></p><h2 id="bean的声明"><a href="#bean的声明" class="headerlink" title="bean的声明"></a>bean的声明</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218133309268.png" alt="image-20250218133309268"></p><ul><li><p>声明bean的时候，可以通过value属性指定bean的名字，如果没有指定，默认为类名首字母小写</p></li><li><p>使用以上四个注解都可以声明bean，但是在springboot集成web开发中，声明控制器bean只能用@controller</p></li></ul><h2 id="bean组件扫描"><a href="#bean组件扫描" class="headerlink" title="bean组件扫描"></a>bean组件扫描</h2><p>被组件扫描后才能进行生效</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218133918237.png" alt="image-20250218133918237"></p><p>所以java会默认扫描启动类所在包及其子包，但是如果bean在启动类所在包之外，那么该组件不能生效</p><h2 id="bean注入相同类型解决方案-DI"><a href="#bean注入相同类型解决方案-DI" class="headerlink" title="bean注入相同类型解决方案|DI"></a>bean注入相同类型解决方案|DI</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218135154886.png" alt="image-20250218135154886"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;三层架构&quot;&gt;&lt;a href=&quot;#三层架构&quot; class=&quot;headerlink&quot; title=&quot;三层架构&quot;&gt;&lt;/a&gt;三层架构&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/scanfup/img-bag1/m</summary>
      
    
    
    
    <category term="springboot黑马综合案例" scheme="https://scanfup.github.io/categories/springboot%E9%BB%91%E9%A9%AC%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/"/>
    
    
    <category term="springboot黑马综合案例" scheme="https://scanfup.github.io/tags/springboot%E9%BB%91%E9%A9%AC%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>综合案例</title>
    <link href="https://scanfup.github.io/posts/40101b37.html"/>
    <id>https://scanfup.github.io/posts/40101b37.html</id>
    <published>2025-02-22T16:00:00.000Z</published>
    <updated>2025-02-25T12:58:38.264Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础环境搭建"><a href="#基础环境搭建" class="headerlink" title="基础环境搭建"></a>基础环境搭建</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250221114947965.png" alt="image-20250221114947965"></p><h2 id="构成"><a href="#构成" class="headerlink" title="构成"></a>构成</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250221164201042.png" alt="image-20250221164201042"></p><p><strong>pojo提供数据类型</strong></p><hr><h2 id="三层框架"><a href="#三层框架" class="headerlink" title="三层框架"></a>三层框架</h2><p>首先是控制层controller，负责处理http请求，调用dervice返回数据</p><p>例如，DeptController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DeptService deptService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@RequestMapping(value = &quot;/depts&quot; , method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/depts&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;查询所有部门数据&quot;</span>);</span><br><span class="line">        List&lt;Dept&gt; deptList = deptService.list();</span><br><span class="line">        <span class="keyword">return</span> Result.success(deptList);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/depts/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;根据id删除部门:&#123;&#125;&quot;</span>,id);</span><br><span class="line">        deptService.delete(id);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这是控制层的部门部分，定义了方法，路径，使用deptservice方法去获取员工数据，下面转到deptservice文件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DeptService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有的部门数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>   存储Dept对象的集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Dept&gt; <span class="title function_">list</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>deptservice接口里面使用list方法去获取了数据</p><p>那么这个list方法的实现在deptservicelmpl.java文件里面，移步到该文件，定义了list方法和delete方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptServicelmpl</span> <span class="keyword">implements</span> <span class="title class_">DeptService</span> &#123;<span class="comment">//集成deptservice接口</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DeptMapper deptMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//这里定义list方法，返回该数据</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Dept&gt; <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Dept&gt; deptList = deptMapper.list();</span><br><span class="line">        <span class="keyword">return</span> deptList;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">        deptMapper.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后方法里的deptMapper.list()又调用了deptMapper里面的方法，将数据库返回的数据相应到了list里边，</p><p><strong>至此整个数据的响应完成</strong></p><h2 id="条件筛选查询"><a href="#条件筛选查询" class="headerlink" title="条件筛选查询"></a>条件筛选查询</h2><p>首先在enpcontroler里面配置好查询筛选参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Result <span class="title function_">page</span><span class="params">(<span class="meta">@RequestParam(defaultValue = &quot;1&quot;)</span> Integer page,</span></span><br><span class="line"><span class="params">                       <span class="meta">@RequestParam(defaultValue = &quot;10&quot;)</span> Integer pageSize,</span></span><br><span class="line"><span class="params">                       String name, <span class="type">short</span> gender,</span></span><br><span class="line"><span class="params">                       <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span>LocalDate begin,</span></span><br><span class="line"><span class="params">                       <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span>LocalDate end)</span>&#123;</span><br><span class="line">        <span class="comment">//输入日志</span></span><br><span class="line">        log.info(<span class="string">&quot;分页查询参数&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;&quot;</span>,page,pageSize,name,gender,begin,end);</span><br><span class="line">        <span class="comment">//调用empservce方法返回参数</span></span><br><span class="line">        PageBean pageBean=empService.page(page,pageSize,name,gender,begin,end);</span><br><span class="line">        <span class="keyword">return</span> Result.success(pageBean);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然后再page里面实现</p><p>接口声明方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpService</span> &#123;</span><br><span class="line">    <span class="comment">//接口里边声明方法</span></span><br><span class="line">    PageBean <span class="title function_">page</span><span class="params">(Integer page, Integer pageSize, String name, Short gender, LocalDate begin, LocalDate end)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后实现方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> PageBean <span class="title function_">page</span><span class="params">(Integer page, Integer pageSize, String name, Short gender, LocalDate begin, LocalDate end)</span> &#123;</span><br><span class="line">    <span class="comment">// 设置分页参数</span></span><br><span class="line">    PageHelper.startPage(page, pageSize);</span><br><span class="line">    <span class="comment">// 执行查询</span></span><br><span class="line">    List&lt;Emp&gt; empList = empMapper.list(name, gender, begin, end);</span><br><span class="line">    <span class="comment">// 获取Page对象</span></span><br><span class="line"><span class="comment">//    Page&lt;Emp&gt; p = (Page&lt;Emp&gt;) empList;</span></span><br><span class="line">        Page&lt;Emp&gt; newPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line">        newPage.addAll(empList);</span><br><span class="line">        newPage.setTotal(empList.size());</span><br><span class="line">    <span class="comment">// 封装到pageBean中</span></span><br><span class="line">    <span class="type">PageBean</span> <span class="variable">pageBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageBean</span>(newPage.getTotal(), newPage.getResult());</span><br><span class="line">    <span class="keyword">return</span> pageBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于list的查询语句</p><p>使用EmpMapper进行映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itheima.mapper.EmpMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itheima.pojo.Emp&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">       from emp</span><br><span class="line">       <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name!=null &quot;</span>&gt;</span></span><br><span class="line">               name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class="line">           <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender!=null&quot;</span>&gt;</span></span><br><span class="line">               and gender=#&#123;gender&#125;</span><br><span class="line">           <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;begin!=null and end != null&quot;</span>&gt;</span></span><br><span class="line">               and entrydate between #&#123;begin&#125; and #&#123;end&#125;</span><br><span class="line">           <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    order by update_time desc</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里我运行的时候会报一个错</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250223214647806.png" alt="image-20250223214647806"></p><p>这是我原来的page方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> PageBean <span class="title function_">page</span><span class="params">(Integer page, Integer pageSize, String name, Short gender, LocalDate begin, LocalDate end)</span> &#123;</span><br><span class="line">        <span class="comment">// 设置分页参数</span></span><br><span class="line">        PageHelper.startPage(page, pageSize);</span><br><span class="line">        <span class="comment">// 执行查询</span></span><br><span class="line">        List&lt;Emp&gt; empList = empMapper.list(name, gender, begin, end);</span><br><span class="line">        <span class="comment">// 获取Page对象</span></span><br><span class="line">        Page&lt;Emp&gt; p = (Page&lt;Emp&gt;) empList;</span><br><span class="line">        <span class="comment">// 封装到pageBean中</span></span><br><span class="line">        <span class="type">PageBean</span> <span class="variable">pageBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageBean</span>(p.getTotal(), p.getResult());</span><br><span class="line">        <span class="keyword">return</span> pageBean;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>更改后的page方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> PageBean <span class="title function_">page</span><span class="params">(Integer page, Integer pageSize, String name, Short gender, LocalDate begin, LocalDate end)</span> &#123;</span><br><span class="line">        <span class="comment">// 设置分页参数</span></span><br><span class="line">        PageHelper.startPage(page, pageSize);</span><br><span class="line">        <span class="comment">// 执行查询</span></span><br><span class="line">        List&lt;Emp&gt; empList = empMapper.list(name, gender, begin, end);</span><br><span class="line">        <span class="comment">// 获取Page对象</span></span><br><span class="line">        Page&lt;Emp&gt; page_result = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line">        page_result.addAll(empList);</span><br><span class="line">        page_result.setTotal(empList.size()); <span class="comment">// 设置总记录数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 封装到pageBean中</span></span><br><span class="line">        <span class="type">PageBean</span> <span class="variable">pageBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageBean</span>(page_result.getTotal(), page_result.getResult());</span><br><span class="line">        <span class="keyword">return</span> pageBean;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="from表单，图片上传功能"><a href="#from表单，图片上传功能" class="headerlink" title="from表单，图片上传功能"></a>from表单，图片上传功能</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250225152742962.png" alt="image-20250225152742962"></p><p>文件上传，如果文件为图片，那么必须带上<code>enctype=&quot;multipart/form-data&quot;</code></p><hr><p><strong>UUID（Universally Unique Identifier）是一种标准的128位标识符，通常用于唯一标识信息。在Java中，UUID 可以用于生成唯一的ID，例如在创建新记录时为实体生成唯一的标识符</strong></p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250225154246653.png" alt="image-20250225154246653"></p><p><strong>这个设置在resouces中的application.properties中设置</strong></p><h2 id="SDK"><a href="#SDK" class="headerlink" title="SDK"></a>SDK</h2><p>SDK（Software Development Kit）是一组工具、库和文档，用于帮助开发者更方便地开发、集成和部署软件应用。SDK 提供了预定义的接口和功能，使得开发者可以快速构建应用程序而无需从头开始编写所有代码。</p><h2 id="springboot配置文件"><a href="#springboot配置文件" class="headerlink" title="springboot配置文件"></a>springboot配置文件</h2><p><strong>总结来说，该项目的文件功能过于分散，不便于维护以及集中管理</strong></p><h3 id="参数配置化"><a href="#参数配置化" class="headerlink" title="参数配置化"></a>参数配置化</h3><blockquote><p>那么对于阿里云的配置文件，可以直接放到springboot配置文件中的application中，java提供了value注解，通常用于外部配置的属性注入，具体用法为：@value(“${配置文件中的key}”) — 参数配置化</p></blockquote><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250225191304706.png" alt="image-20250225191304706"></p><h3 id="yml配置文件"><a href="#yml配置文件" class="headerlink" title="yml配置文件"></a>yml配置文件</h3><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250225191746606.png" alt="image-20250225191746606"></p><h3 id="conconfigurationproperties"><a href="#conconfigurationproperties" class="headerlink" title="conconfigurationproperties"></a>conconfigurationproperties</h3><p>关于阿里云的配置，阿里云在yml文件中的配置，以及conconfiguratuionproperties注解对于阿里云配置文件的映射，避免多次给值，这个等到需要的时候在学</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基础环境搭建&quot;&gt;&lt;a href=&quot;#基础环境搭建&quot; class=&quot;headerlink&quot; title=&quot;基础环境搭建&quot;&gt;&lt;/a&gt;基础环境搭建&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/scanfup/im</summary>
      
    
    
    
    <category term="springboot黑马综合案例" scheme="https://scanfup.github.io/categories/springboot%E9%BB%91%E9%A9%AC%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/"/>
    
    
    <category term="springboot黑马综合案例" scheme="https://scanfup.github.io/tags/springboot%E9%BB%91%E9%A9%AC%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>请求响应</title>
    <link href="https://scanfup.github.io/posts/fe670207.html"/>
    <id>https://scanfup.github.io/posts/fe670207.html</id>
    <published>2025-02-22T16:00:00.000Z</published>
    <updated>2025-02-24T13:25:26.130Z</updated>
    
    <content type="html"><![CDATA[<h2 id="请求响应"><a href="#请求响应" class="headerlink" title="请求响应"></a>请求响应</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250217205935391.png" alt="image-20250217205935391"></p><h2 id="1-原始方式"><a href="#1-原始方式" class="headerlink" title="1.原始方式"></a>1.原始方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数获取的原始方式</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/Param&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">Param</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="comment">//获取请求参数</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">ageS</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    <span class="comment">//将获取到的年龄转化为整形</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> Integer.parseInt(ageS);</span><br><span class="line">    <span class="comment">//打印控制台</span></span><br><span class="line">    System.out.println(<span class="string">&quot;name:&quot;</span> + name + <span class="string">&quot; age:&quot;</span> + age);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到成功接收</p><h2 id="2-springboot方法"><a href="#2-springboot方法" class="headerlink" title="2.springboot方法"></a>2.springboot方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@RequestMapping(&quot;/Param&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">Param</span><span class="params">(String name,Integer age)</span> &#123;</span><br><span class="line">        <span class="comment">//获取请求参</span></span><br><span class="line">        System.out.println(<span class="string">&quot;name:&quot;</span> + name + <span class="string">&quot; age:&quot;</span> + age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也是正常返回ok</p><h2 id="3-参数名不一致（RequestsParam）"><a href="#3-参数名不一致（RequestsParam）" class="headerlink" title="3.参数名不一致（RequestsParam）"></a>3.参数名不一致（RequestsParam）</h2><p>参数名不一致，使用@RequestsParam注解完成映射，那么请求参数名就要跟name的参数名一致，这里就是namelll</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@RequestMapping(&quot;/Param&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">Param</span><span class="params">(<span class="meta">@RequestParam(name=&quot;namelll&quot;)</span> String name,Integer age)</span> &#123;</span><br><span class="line">        <span class="comment">//获取请求参</span></span><br><span class="line">        System.out.println(<span class="string">&quot;name:&quot;</span> + name + <span class="string">&quot; age:&quot;</span> + age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250217214517811.png" alt="image-20250217214517811"></p><p>这里RequestParam里面可以加上参数required=false，加上的话也可以不用传入该参数，不加默认为true，参数不能为空</p><h2 id="2-实体参数"><a href="#2-实体参数" class="headerlink" title="2.实体参数"></a>2.实体参数</h2><p>将请求参数封装到一个实体类对象中，请求参数名要与与实体类的属性名相同</p><h3 id="2-1-简单实体参数"><a href="#2-1-简单实体参数" class="headerlink" title="2.1 简单实体参数"></a>2.1 简单实体参数</h3><p>User实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实体参数：简单实体对象</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/simplePojo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">simplePojo</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-复杂实体参数"><a href="#2-2-复杂实体参数" class="headerlink" title="2.2 复杂实体参数"></a>2.2 复杂实体参数</h3><p>复杂实体对象指的是，在实体类中有一个或多个属性，也是实体对象类型的。</p><p>例如：User类中有一个Address类型的属性（Address是一个实体类）</p><p>User实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Address address; <span class="comment">//地址对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Address实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Controller方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实体参数：复杂实体对象</span></span><br><span class="line">     <span class="meta">@RequestMapping(&quot;/complexPojo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">complexPojo</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="3-JSON参数-RequestBody"><a href="#3-JSON参数-RequestBody" class="headerlink" title="3.JSON参数(@RequestBody)"></a>3.JSON参数(@RequestBody)</h2><p>在前后端进行交互时，如果是比较复杂的参数，前后端通过会使用JSON格式的数据进行传输。</p><p>传递json格式的参数，在Controller中会使用实体类进行封装。</p><p>封装规则：JSON数据键名与形参对象属性名相同，定义POJO类型形参即可接收参数。需要使用 @RequestBody标识。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JSON参数</span></span><br><span class="line"> <span class="meta">@RequestMapping(&quot;/jsonParam&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">jsonParam</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>@RequestBody注解：将JSON数据映射到形参的实体类对象中（JSON中的key和实体类中的属性名保持一致）</p><h2 id="4-路径参数-PathVariable"><a href="#4-路径参数-PathVariable" class="headerlink" title="4.路径参数(@PathVariable)"></a>4.路径参数(@PathVariable)</h2><p>传统的开发中请求参数是放在请求体(POST请求)传递或跟在URL后面传递(GET请求)。但在现在的开发中，经常还会直接在请求的URL中传递参数。</p><p>传统请求参数：<br><a href="http://localhost:8080/user?name=hs&amp;age=18">http://localhost:8080/user?name=hs&amp;age=18</a></p><p>直接在请求的URL中传递参数：<br><a href="http://localhost:8080/user/1">http://localhost:8080/user/1</a><br><a href="http://localhost:880/user/1/0">http://localhost:880/user/1/0</a></p><h3 id="4-1-单个路径参数"><a href="#4-1-单个路径参数" class="headerlink" title="4.1 单个路径参数"></a>4.1 单个路径参数</h3><p>使用{xx}来标识该路径参数，需要使用@PathVariable获取路径参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//路径参数</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/pathParam/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">pathParam</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-传递多个路径参数"><a href="#4-2-传递多个路径参数" class="headerlink" title="4.2 传递多个路径参数"></a>4.2 传递多个路径参数</h3><p>继续加/{xx}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多个路径参数</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/pathParam/&#123;id&#125;/&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">pathParam</span><span class="params">(<span class="meta">@PathVariable</span> Integer id,<span class="meta">@PathVariable</span> String name)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (id+<span class="string">&quot;,&quot;</span>+name);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="5-数组集合参数"><a href="#5-数组集合参数" class="headerlink" title="5.数组集合参数"></a>5.数组集合参数</h2><p>数组集合参数的使用场景：在HTML的表单中，有一个表单项是支持多选的(复选框)，可以提交选择的多个值。</p><p>后端程序接收上述多个值的方式有两种：</p><p>1.数组</p><p>2.集合</p><h3 id="5-1-数组参数"><a href="#5-1-数组参数" class="headerlink" title="5.1 数组参数"></a>5.1 数组参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/arrayParam&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">arrayParam</span><span class="params">(String[] hobby)</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> Arrays.toString(hobby);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>在前端请求时，有两种传递形式：</p><p>方式一： ?hobby=game&amp;hobby=java</p><p>方式二： ?hobby=game,java</p><h3 id="5-2-集合参数-RequestParam"><a href="#5-2-集合参数-RequestParam" class="headerlink" title="5.2 集合参数(@RequestParam)"></a>5.2 集合参数(@RequestParam)</h3><p>默认情况下，请求中参数名相同的多个值，是封装到数组。如果要封装到集合，要使用@RequestParam绑定参数关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/listParam&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List <span class="title function_">listParam</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;String&gt; hobby)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hobby;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在前端请求时，有两种传递形式：</p><p>方式一： ?hobby=game&amp;hobby=java</p><p>方式二： ?hobby=game,java</p><h2 id="6-日期参数-DateTimeFormat"><a href="#6-日期参数-DateTimeFormat" class="headerlink" title="6.日期参数(@DateTimeFormat)"></a>6.日期参数(@DateTimeFormat)</h2><p>在一些特殊的需求中，可能会涉及到日期类型数据的封装。</p><p>因为日期的格式多种多样，那么对于日期类型的参数在进行封装的时候，需要通过@DateTimeFormat注解，以及其pattern属性来设置日期的格式。</p><p>@DateTimeFormat注解的pattern属性中指定了哪种日期格式，前端的日期参数就必须按照指定的格式传递。</p><p>后端controller方法中，需要使用Date类型或LocalDateTime类型，来封装传递的参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//日期参数</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/dateParam&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> LocalDateTime <span class="title function_">dataParam</span><span class="params">(<span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span> LocalDateTime updateTime)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> updateTime;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="7-响应"><a href="#7-响应" class="headerlink" title="7.响应"></a>7.响应</h2><h3 id="7-1-ResponseBody"><a href="#7-1-ResponseBody" class="headerlink" title="7.1 @ResponseBody"></a>7.1 @ResponseBody</h3><p>@ResponseBody注解：</p><p>类型：方法注解、类注解<br>位置：书写在Controller方法上或类上<br>作用：将方法返回值直接响应给浏览器<br>如果返回值类型是实体对象/集合，将会转换为JSON格式后在响应给浏览器<br>在类上添加的@RestController注解，是一个组合注解。@RestController = @Controller + @ResponseBody</p><p>@RestController源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span>   <span class="comment">//元注解（修饰注解的注解）</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span>  <span class="comment">//元注解</span></span><br><span class="line"><span class="meta">@Documented</span>    <span class="comment">//元注解</span></span><br><span class="line"><span class="meta">@Controller</span>   </span><br><span class="line"><span class="meta">@ResponseBody</span> </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RestController &#123;</span><br><span class="line">    <span class="meta">@AliasFor(</span></span><br><span class="line"><span class="meta">        annotation = Controller.class</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br></pre></td></tr></table></figure><p>类上有@RestController注解或@ResponseBody注解时：表示当前类下所有的方法返回值做为响应数据，方法的返回值，如果是一个POJO对象或集合时，会先转换为JSON格式，在响应给浏览器</p><h3 id="7-2-统一响应结果"><a href="#7-2-统一响应结果" class="headerlink" title="7.2 统一响应结果"></a>7.2 统一响应结果</h3><p>统一的返回结果使用类来描述，在这个结果中包含：</p><p>响应状态码：当前请求是成功，还是失败<br>状态码信息：给页面的提示信息<br>返回的数据：给前端响应的数据（字符串、对象、集合）<br>定义在一个实体类Result来包含以上信息。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;<span class="comment">//响应码，1 代表成功; 0 代表失败</span></span><br><span class="line">    <span class="keyword">private</span> String msg;  <span class="comment">//响应码 描述字符串</span></span><br><span class="line">    <span class="keyword">private</span> Object data; <span class="comment">//返回的数据</span></span><br><span class="line"><span class="comment">//增删改 成功响应(不需要给前端返回数据)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">1</span>,<span class="string">&quot;success&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查询 成功响应(把查询结果做为返回数据响应给前端)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">(Object data)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">1</span>,<span class="string">&quot;success&quot;</span>,data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//失败响应</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">error</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">0</span>,msg,<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>改造Controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//响应统一格式的结果</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World ~&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">&quot;Hello World ~&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;请求响应&quot;&gt;&lt;a href=&quot;#请求响应&quot; class=&quot;headerlink&quot; title=&quot;请求响应&quot;&gt;&lt;/a&gt;请求响应&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/scanfup/img-bag1/m</summary>
      
    
    
    
    <category term="springboot黑马综合案例" scheme="https://scanfup.github.io/categories/springboot%E9%BB%91%E9%A9%AC%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/"/>
    
    
    <category term="springboot黑马综合案例" scheme="https://scanfup.github.io/tags/springboot%E9%BB%91%E9%A9%AC%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>js基础</title>
    <link href="https://scanfup.github.io/posts/6890f50f.html"/>
    <id>https://scanfup.github.io/posts/6890f50f.html</id>
    <published>2025-02-22T16:00:00.000Z</published>
    <updated>2025-02-24T13:25:26.133Z</updated>
    
    <content type="html"><![CDATA[<p>无论是原型对象和实例对象都有 <strong> proto</strong></p><p>原型对象有  prototype</p><p>a.prototype  如果不是undefined  就说明a对象 是原型对象</p><p>原型对象和实例对象的函数  this 指向不同</p><p>实例对象</p><p>function a(){</p><p>​    console.log(this)</p><p>}</p><p>谁调用 this就指向谁</p><p>原型对象</p><p>function pro(){</p><p>​    this.a =1</p><p>}</p><p>var  aaa = new pro()  this指向的是原型对象的实例对象  也就是aaa</p><p>其中 pro 就是原型对象</p><p>构造函数的属性和原型对象的属性不同</p><p>对象.<em> </em> proto<em> </em> 就是找这个对象的父对象</p><p>aaa.<em> <em>proto__</em></em> 就是 原型对象</p><p>最底层就是object</p><p>object.<strong> pooto</strong>  就是null了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;无论是原型对象和实例对象都有 &lt;strong&gt; proto&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原型对象有  prototype&lt;/p&gt;
&lt;p&gt;a.prototype  如果不是undefined  就说明a对象 是原型对象&lt;/p&gt;
&lt;p&gt;原型对象和实例对象的函数  this </summary>
      
    
    
    
    <category term="js逆向" scheme="https://scanfup.github.io/categories/js%E9%80%86%E5%90%91/"/>
    
    
    <category term="js逆向" scheme="https://scanfup.github.io/tags/js%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>js逆向过程和几个方法</title>
    <link href="https://scanfup.github.io/posts/9135e420.html"/>
    <id>https://scanfup.github.io/posts/9135e420.html</id>
    <published>2025-02-22T16:00:00.000Z</published>
    <updated>2025-02-24T13:25:26.134Z</updated>
    
    <content type="html"><![CDATA[<p>js逆向的过程</p><p>抓包—-调试——脱离浏览器环境（让浏览器的js代码在本地运行）  本地环境（node.js 封装的V8引擎）</p><h1 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty()"></a>Object.defineProperty()</h1><p>静态方法会直接在一个对象上定义一个新属性，或修改其现有属性，并返回此对象。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen"><code>Object.isFrozen()</code></a></p><p>判断对象是否已经冻结。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed"><code>Object.isSealed()</code></a></p><p>判断对象是否已经封闭。</p><p>weixin.code   是小程序  的code  是 app生成的  没办法逆向出来  只能第三方做的hook </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;js逆向的过程&lt;/p&gt;
&lt;p&gt;抓包—-调试——脱离浏览器环境（让浏览器的js代码在本地运行）  本地环境（node.js 封装的V8引擎）&lt;/p&gt;
&lt;h1 id=&quot;Object-defineProperty&quot;&gt;&lt;a href=&quot;#Object-defineProperty&quot;</summary>
      
    
    
    
    <category term="js逆向" scheme="https://scanfup.github.io/categories/js%E9%80%86%E5%90%91/"/>
    
    
    <category term="js逆向" scheme="https://scanfup.github.io/tags/js%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>网络协议</title>
    <link href="https://scanfup.github.io/posts/1cd3002f.html"/>
    <id>https://scanfup.github.io/posts/1cd3002f.html</id>
    <published>2025-02-22T16:00:00.000Z</published>
    <updated>2025-02-24T13:25:26.135Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络协议："><a href="#网络协议：" class="headerlink" title="网络协议："></a>网络协议：</h1><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><p>安全   </p><p>速度慢</p><p>《三次握手》</p><p>1、客户端找到服务器 ：我来了！</p><p>2、服务器 找到客户端： 你确定来了？</p><p>3、客户端再发给服务器：我确定我来了</p><p>网站基本都是走的TCP协议</p><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><p>不能保证数据完整性</p><p>速度快</p><p>TCP和UDP 都是底层协议，我们是管不了的</p><p>我们能处理的就是 顶层协议</p><h2 id="顶层协议"><a href="#顶层协议" class="headerlink" title="顶层协议"></a>顶层协议</h2><p>由开发这个软件的开发者开发的协议</p><p>协议：我怎么样告诉你我是谁，以及我怎么告诉你数据的格式</p><p>HTTP  HTTPS</p><p>FTP  发文件的协议</p><p>SMTP  POP3  发邮件的协议</p><p>MQTT    </p><p>HTTP 80端口 ——&gt; https 443端口</p><p>HTTPS://hao.360.com</p><p>https 协议</p><p>360.com 主域名</p><p>hao.360.com 二级域名  ip地址  一个域名对应一个ip地址</p><h3 id="http-gt-https-send"><a href="#http-gt-https-send" class="headerlink" title="http    -&gt; https    send"></a>http    -&gt; https    send</h3><p>请求头</p><p>请求体</p><p>响应头</p><p>响应体</p><h3 id="websocket-gt-websockets"><a href="#websocket-gt-websockets" class="headerlink" title="websocket -&gt; websockets"></a>websocket -&gt; websockets</h3><p>new websocket  创建websocket的位置</p><p>测试网址  <a href="http://www.websocket-test.com/">http://www.websocket-test.com/</a></p><p><img src="C:\Users\hp\AppData\Roaming\Typora\typora-user-images\image-20230810172032425.png" alt="image-20230810172032425"></p><p>Status Code: 101 Switching Protocols</p><p>请求头（以下都是不能删除的）</p><ol><li>Connection: Upgrade  #代表协议升级</li><li>Host: 124.222.224.186:8800</li><li>Origin: <a href="http://www.websocket-test.com">http://www.websocket-test.com</a></li><li>Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits </li><li>Sec-WebSocket-Key: pjJ9hSUw3F+RVRsXlRz5Ow==  #升级加密的key 由客户端随机生成</li><li>Sec-WebSocket-Version: 13 #升级到什么版本</li><li>Upgrade: websocket #升级成什么协议</li><li>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64)AppleWebKit/537.36 (KHTML, like Gecko)Chrome/95.0.4638.69 Safari/537.36</li></ol><p>messages： 看发了什么信息的</p><p>虽然 此网站 显示 是明文，但是其实可以发好几种数据， </p><p>可发的数据类型 ：字节集    string   一般直接认为是字节集 </p><p>websocket 是一次请求一直连接  而 http是一次请求一次连接 </p><p>http  短连接</p><p>websocket  长连接</p><p>抓包 只看 三类  XHR  WS   document  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;网络协议：&quot;&gt;&lt;a href=&quot;#网络协议：&quot; class=&quot;headerlink&quot; title=&quot;网络协议：&quot;&gt;&lt;/a&gt;网络协议：&lt;/h1&gt;&lt;h2 id=&quot;TCP&quot;&gt;&lt;a href=&quot;#TCP&quot; class=&quot;headerlink&quot; title=&quot;TCP&quot;&gt;&lt;/</summary>
      
    
    
    
    <category term="js逆向" scheme="https://scanfup.github.io/categories/js%E9%80%86%E5%90%91/"/>
    
    
    <category term="js逆向" scheme="https://scanfup.github.io/tags/js%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://scanfup.github.io/posts/0.html"/>
    <id>https://scanfup.github.io/posts/0.html</id>
    <published>2025-02-22T11:38:44.932Z</published>
    <updated>2025-02-24T13:25:26.137Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础巩固"><a href="#基础巩固" class="headerlink" title="基础巩固"></a>基础巩固</h2><p>二月二十—三月二十</p><p>刷卷子，每周五拿一下错题本</p><h2 id="类型题"><a href="#类型题" class="headerlink" title="类型题"></a>类型题</h2><p>立体几何+平面向量</p><p>解三角形+三角函数</p><p>统计：二项分布，超几何，事件概率 + 排列组合</p><p>点到直线的距离，圆的方程 + 函数（抽象函数，奇数偶数性，单调性）</p><p>不等式</p><p>log2，</p><p>导数第一问（基础）**</p><p>同构（稍微提高）构造函数 </p><p>数列，（现在的卷子大题都放在最后了）变难</p><p>圆锥曲线简单题</p><p>二项式</p><p>不等式</p><p>立体几何（外接球）</p><h2 id="最后冲刺"><a href="#最后冲刺" class="headerlink" title="最后冲刺"></a>最后冲刺</h2><p>刷高考题+错题+整章节整理</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基础巩固&quot;&gt;&lt;a href=&quot;#基础巩固&quot; class=&quot;headerlink&quot; title=&quot;基础巩固&quot;&gt;&lt;/a&gt;基础巩固&lt;/h2&gt;&lt;p&gt;二月二十—三月二十&lt;/p&gt;
&lt;p&gt;刷卷子，每周五拿一下错题本&lt;/p&gt;
&lt;h2 id=&quot;类型题&quot;&gt;&lt;a href=&quot;#类型题&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://scanfup.github.io/posts/0.html"/>
    <id>https://scanfup.github.io/posts/0.html</id>
    <published>2025-02-21T06:07:56.594Z</published>
    <updated>2025-02-24T13:25:26.116Z</updated>
    
    <content type="html"><![CDATA[<p>ctrl+f 向上移动一页  b向下</p><p>0移动最左 ￥移动最右</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ctrl+f 向上移动一页  b向下&lt;/p&gt;
&lt;p&gt;0移动最左 ￥移动最右&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://scanfup.github.io/posts/0.html"/>
    <id>https://scanfup.github.io/posts/0.html</id>
    <published>2025-02-17T12:14:37.131Z</published>
    <updated>2025-02-18T09:18:40.779Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2025-2-17"><a href="#2025-2-17" class="headerlink" title="2025-2-17"></a>2025-2-17</h2><p>所以为什么做一个项目要先写一个接口，就是写完接口就可以去写注解路径了，需要请求什么路径，请求这个 路径使用什么方法，使用这个方法要有什么数据什么类，这个类里面都有什么，生成getter和setter方法，以及同string方法，所以一个接口文档是包含了很多东西的</p><ol><li>每种方法的参数接收，请求响应</li></ol><p>关于这个员工数据案例，首先前端使用axios请求了一下数据，如果数据存在那么返回data，返回的data经过前端渲染展示出来表格，那么后端是如何处理这个数据的，首先，后端拿到html文件，开始i逻辑判断，如果为1，就更新为名字，这里面更改信息又用到了之前声明变量所使用的getter和setter方法</p><h2 id="2025-2-18-周二"><a href="#2025-2-18-周二" class="headerlink" title="2025-2-18 周二"></a>2025-2-18 周二</h2><p>一个项目是怎么样落地的呢？首先要想好要做一个什么项目，然后去弄个出来每个页面，这个页面都要有什么功能，以及功能外又要什么数据库，每个都应该要提前设计好，这才是软件开发的前提，不设计好之后根本就没有头绪</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2025-2-17&quot;&gt;&lt;a href=&quot;#2025-2-17&quot; class=&quot;headerlink&quot; title=&quot;2025-2-17&quot;&gt;&lt;/a&gt;2025-2-17&lt;/h2&gt;&lt;p&gt;所以为什么做一个项目要先写一个接口，就是写完接口就可以去写注解路径了，需要请求什么路</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://scanfup.github.io/posts/0.html"/>
    <id>https://scanfup.github.io/posts/0.html</id>
    <published>2025-02-13T14:09:54.130Z</published>
    <updated>2025-02-23T06:25:33.337Z</updated>
    
    <content type="html"><![CDATA[<ol><li>两侧缩进16px</li><li>对于段内的划线，使用黑色加粗</li><li>对于整段的划线，使用红色加粗</li><li>标题引号找素材</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;两侧缩进16px&lt;/li&gt;
&lt;li&gt;对于段内的划线，使用黑色加粗&lt;/li&gt;
&lt;li&gt;对于整段的划线，使用红色加粗&lt;/li&gt;
&lt;li&gt;标题引号找素材&lt;/li&gt;
&lt;/ol&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
