<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>头歌作业（全部，长期更新）</title>
      <link href="/posts/8185b835.html"/>
      <url>/posts/8185b835.html</url>
      
        <content type="html"><![CDATA[<p><strong>每个作业只包含重要的建表代码，需要先进入数据库，创建基本的数据库之后才能使用下述命令创建表结构</strong></p><h2 id="MySql数据库-初识MySql">MySql数据库-初识MySql</h2><h3 id="第一关：创建数据库">第一关：创建数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database MyDb;</span><br></pre></td></tr></table></figure><h3 id="第二关：创建表">第二关：创建表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_emp(</span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">32</span>),</span><br><span class="line">    deptId <span class="type">int</span>,</span><br><span class="line">    salary <span class="type">float</span></span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="第三关：使用主键约束">第三关：使用主键约束</h3><p>创建t_user1表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_user1 (  </span><br><span class="line">    userId <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,          <span class="comment">-- 用户ID  </span></span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,      <span class="comment">-- 用户名  </span></span><br><span class="line">    password <span class="type">VARCHAR</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,  <span class="comment">-- 密码  </span></span><br><span class="line">    phone <span class="type">VARCHAR</span>(<span class="number">11</span>),               <span class="comment">-- 电话号码  </span></span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">32</span>)                <span class="comment">-- 邮箱  </span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>创建t_user2表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_user2 (  </span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,       <span class="comment">-- 用户名  </span></span><br><span class="line">    phone <span class="type">VARCHAR</span>(<span class="number">11</span>),               <span class="comment">-- 电话号码  </span></span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">32</span>),               <span class="comment">-- 邮箱  </span></span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (name, phone)        <span class="comment">-- 联合主键  </span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="第四关：外键约束">第四关：外键约束</h3><p>创建student表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_student(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key ,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">22</span>),</span><br><span class="line">    classId <span class="type">int</span> ,</span><br><span class="line">    <span class="keyword">constraint</span>  fk_stu_class1 <span class="keyword">foreign</span> key (classId) <span class="keyword">references</span> t_class(id)</span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>创建class表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_class(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key ,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">22</span>),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="第五关：添加常用约束">第五关：添加常用约束</h3><p>创建t_user表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_user (</span><br><span class="line">                        id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY, <span class="comment">-- 用户ID，主键，自动增长  </span></span><br><span class="line">                        username <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span>, <span class="comment">-- 用户名，非空，唯一  </span></span><br><span class="line">                        sex <span class="type">VARCHAR</span>(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;男&#x27;</span> <span class="comment">-- 性别，默认为“男”  </span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="数据表中数据的插入，修改和删除">数据表中数据的插入，修改和删除</h2><h3 id="数据表中插入一条记录，对指定字段赋值">数据表中插入一条记录，对指定字段赋值</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> reader (xm, dhhm) <span class="keyword">VALUES</span> (<span class="string">&#x27;林团团&#x27;</span>, <span class="string">&#x27;13507311234&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="数据表中插入一条记录，对所有字段赋值">数据表中插入一条记录，对所有字段赋值</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> reader(dzzh,xm,xb,sf,dhhm)va1ues(<span class="number">2</span>,陈洁<span class="string">&#x27;，&#x27;</span>女<span class="string">&#x27;，&#x27;</span>教研人员<span class="string">&#x27;，13319551234)；</span></span><br></pre></td></tr></table></figure><h3 id="数据表中插入多条记录">数据表中插入多条记录</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> reader(xm,xb,sf,dhhm) <span class="keyword">values</span></span><br><span class="line">    (<span class="string">&#x27;黄小小&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;研究生&#x27;</span>,<span class="number">13316789987</span>),</span><br><span class="line">    (<span class="string">&#x27;刘大任&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;工作人员&#x27;</span>,<span class="number">18012341234</span>),</span><br><span class="line">    (<span class="string">&#x27;邓朝阳&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;研究生&#x27;</span>,<span class="number">17716554432</span>);</span><br></pre></td></tr></table></figure><h3 id="在数据表中修改单条数据记录的单个字段的值">在数据表中修改单条数据记录的单个字段的值</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> reader <span class="keyword">SET</span> dhhm <span class="operator">=</span> <span class="string">&#x27;17718991989&#x27;</span> <span class="keyword">WHERE</span> xm <span class="operator">=</span> <span class="string">&#x27;林团团&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="在数据表中修改单条记录的多个字段的值">在数据表中修改单条记录的多个字段的值</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> reader <span class="keyword">set</span> dhhm<span class="operator">=</span><span class="string">&#x27;13315667745&#x27;</span>,sf<span class="operator">=</span><span class="string">&#x27;工作人员&#x27;</span> <span class="keyword">where</span> xm<span class="operator">=</span><span class="string">&#x27;陈洁&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="修改数据表的多条记录">修改数据表的多条记录</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> reader <span class="keyword">set</span> dzzh<span class="operator">=</span>dzzh<span class="operator">+</span><span class="number">10</span>;</span><br></pre></td></tr></table></figure><h3 id="删除数据表中的记录">删除数据表中的记录</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> reader <span class="keyword">WHERE</span> xm <span class="operator">=</span> <span class="string">&#x27;陈洁&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="删除数据表中的多条记录">删除数据表中的多条记录</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> reader <span class="keyword">where</span> sf<span class="operator">=</span><span class="string">&#x27;研究生&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="删除数据表中的所有数据">删除数据表中的所有数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> reader;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 大学课程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大学课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis</title>
      <link href="/posts/15832afd.html"/>
      <url>/posts/15832afd.html</url>
      
        <content type="html"><![CDATA[<p><strong>mybatis 是一款优秀的持久层框架，用于简化jdbc的开发</strong></p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250221081317979.png" alt="image-20250221081317979"></p><h2 id="jdbc">jdbc</h2><p>jdbc是sum公司提供的一套操作关系型数据库的api</p><h2 id="lombok">lombok</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250221094800505.png" alt="image-20250221094800505"></p>]]></content>
      
      
      <categories>
          
          <category> springboot黑马综合案例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot黑马综合案例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注解</title>
      <link href="/posts/a70f4376.html"/>
      <url>/posts/a70f4376.html</url>
      
        <content type="html"><![CDATA[<h1>Spring 和 MyBatis 常用注解解析</h1><h2 id="1-Override-方法重写">1. <code>@Override</code> - 方法重写</h2><p>用于标注<strong>子类重写父类的方法</strong>，有助于编译器检查，防止拼写错误或方法签名不匹配。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-Service-标记业务层服务">2. <code>@Service</code> - 标记业务层服务</h2><p><code>@Service</code> 是 Spring 的<strong>组件注解</strong>，用于标记<strong>业务逻辑层</strong>的类，使其被 Spring 容器管理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;User registered!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-Autowired-依赖注入">3. <code>@Autowired</code> - 依赖注入</h2><p><code>@Autowired</code> 用于<strong>自动注入</strong> Spring 容器中的 Bean，常用于<strong>构造函数、方法或字段</strong>上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="4-Slf4j-日志支持">4. <code>@Slf4j</code> - 日志支持</h2><p><code>@Slf4j</code> 是 Lombok 提供的注解，自动生成 <code>log</code> 变量，可用于<strong>日志记录</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;Executing service...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="5-Data-Lombok-的-Getter、Setter、toString">5. <code>@Data</code> - Lombok 的 Getter、Setter、toString</h2><p><code>@Data</code> 是 Lombok 提供的快捷注解，自动生成<strong>Getter、Setter、toString、equals、hashCode</strong> 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="6-NoArgsConstructor-无参构造函数">6. <code>@NoArgsConstructor</code> - 无参构造函数</h2><p>Lombok 提供的注解，自动生成<strong>无参构造方法</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;&#125; <span class="comment">// 无参构造</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="7-AllArgsConstructor-全参构造函数">7. <code>@AllArgsConstructor</code> - 全参构造函数</h2><p>Lombok 提供的注解，自动生成<strong>全参数构造方法</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="8-Mapper-MyBatis-映射接口">8. <code>@Mapper</code> - MyBatis 映射接口</h2><p><code>@Mapper</code> 用于标注 <strong>MyBatis 的 Mapper 接口</strong>，使其被 Spring 管理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="9-Select-MyBatis-查询语句">9. <code>@Select</code> - MyBatis 查询语句</h2><p><code>@Select</code> 用于 MyBatis <strong>查询数据</strong>，可以直接在接口上定义 SQL 语句。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;SELECT * FROM users WHERE id = #&#123;id&#125;&quot;)</span></span><br><span class="line">User <span class="title function_">findById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="10-Delete-MyBatis-删除语句">10. <code>@Delete</code> - MyBatis 删除语句</h2><p><code>@Delete</code> 用于 MyBatis <strong>删除数据</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Delete(&quot;DELETE FROM users WHERE id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="11-Insert-MyBatis-插入语句">11. <code>@Insert</code> - MyBatis 插入语句</h2><p><code>@Insert</code> 用于 MyBatis <strong>插入数据</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Insert(&quot;INSERT INTO users (name, age) VALUES (#&#123;name&#125;, #&#123;age&#125;)&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="12-GetMapping-处理-HTTP-GET-请求">12. <code>@GetMapping</code> - 处理 HTTP GET 请求</h2><p><code>@GetMapping</code> 用于 Spring MVC 处理 <strong>GET 请求</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getAllUsers</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> userService.findAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/users&quot;, method = RequestMethod.GET)</span></span><br></pre></td></tr></table></figure><hr><h2 id="13-RequestParam-获取请求参数">13. <code>@RequestParam</code> - 获取请求参数</h2><p><code>@RequestParam</code> 用于<strong>获取 URL 传递的参数</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span> <span class="type">int</span> userId)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> userService.findById(userId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问 <code>/user?id=1</code>，则 <code>userId = 1</code>。</p><hr><h2 id="14-DateTimeFormat-日期格式化">14. <code>@DateTimeFormat</code> - 日期格式化</h2><p><code>@DateTimeFormat</code> 用于<strong>格式化日期参数</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/date&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">formatDate</span><span class="params">(<span class="meta">@RequestParam(&quot;date&quot;)</span> <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> LocalDate date)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Formatted date: &quot;</span> + date;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求 <code>/date?date=2024-02-23</code>，参数 <code>date</code> 会自动转换为 <code>LocalDate</code>。</p><hr>]]></content>
      
      
      <categories>
          
          <category> springboot黑马综合案例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot黑马综合案例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql</title>
      <link href="/posts/dbd66adf.html"/>
      <url>/posts/dbd66adf.html</url>
      
        <content type="html"><![CDATA[<h1>sql（单表设计）</h1><p>启动MySQL</p><p>查看已有数据库<code>show databases;</code></p><p>创建数据库：<code>create database+数据库名字 DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</code></p><p>删除数据库<code>drop database +名字</code></p><p>进入数据库：<code>use +数据库;</code></p><p>查看文件夹中所有数据表:<code>show tables;</code></p><h2 id="创建表：">创建表：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table 表名称(</span><br><span class="line">列名称 类型，</span><br><span class="line">列名称 类型，</span><br><span class="line">列名称 类型</span><br><span class="line">)default charset=utf8;</span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table tb1(</span><br><span class="line">    id int,</span><br><span class="line">    name varchar(16),</span><br><span class="line">    age int</span><br><span class="line">) default charset=utf8;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table tb1(</span><br><span class="line">    id int,</span><br><span class="line">    name varchar(16) not null, -- 不允许为空</span><br><span class="line">    age int null,             -- 允许为空</span><br><span class="line">) default charset=utf8;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table tb1(</span><br><span class="line">    id int,</span><br><span class="line">    name varchar(16) not null, -- 不允许为空</span><br><span class="line">    age int default 3 -- 插入数据时，age列的值默认为3</span><br><span class="line">) default charset=utf8;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table tb1(</span><br><span class="line">    id int primary key, -- 主键，不允许为空，不允许重复</span><br><span class="line">    name varchar(16) ,</span><br><span class="line">    age int          </span><br><span class="line">) default charset=utf8;</span><br></pre></td></tr></table></figure><p>主键一般用于表示当前行的数据的编号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table tb1(</span><br><span class="line">    id int auto_increament primary key, -- 主键，自增，内部维护</span><br><span class="line">    name varchar(16) not null, -- 不允许为空 </span><br><span class="line">    age int null,             -- 允许为空</span><br><span class="line">) default charset=utf8;</span><br></pre></td></tr></table></figure><p><strong>一般的标准情况</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table tb1(</span><br><span class="line">    id int not null auto_increment primary key,</span><br><span class="line">    name varchar(16) ,</span><br><span class="line">    age int </span><br><span class="line">) default charset=utf8;</span><br></pre></td></tr></table></figure><p>查看表结构：<code>desc tb1</code></p><p>常用数据类型：<code>tinyint int bigint</code>三个，数据范围不一样</p><p>表示小数<code>float double decimal</code></p><p>准确的小数值，m是数字总个数（符号不算)d是小数后个数，m最大值为65，d最大值为30</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb3&#123;</span><br><span class="line">id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">salary <span class="type">decimal</span>(<span class="number">8</span>,<span class="number">2</span>)</span><br><span class="line">&#125;<span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>char 定长字符串：char(11)固定用11个字符串进行存储</li><li>varchar变长字符串：varchar(11)，真实数据有多长按多长存储</li><li>mediumtext</li><li>longtext</li><li>datetime<code>YYYY-MM-DD HH:MM:SS(1000-01-01 00:00:00/9999-12-31 23:59:59)</code></li><li>date<code>YYYY-MM-DD (1000-01-01/9999-12-31)</code></li></ul><p>用户表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb7(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">primary</span> key auto_increment,<span class="comment">-- id，不空，主键，自动递增</span></span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    password <span class="type">char</span>(<span class="number">64</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    email <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    age tinyint,</span><br><span class="line">    salary <span class="type">decimal</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">    ctime datetime</span><br><span class="line">)<span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p><strong>有符号：范围是 -128 到 127。<br>无符号：范围是 0 到 255。</strong></p><h2 id="删除数据">删除数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件</span><br><span class="line"><span class="comment">---</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tb2 <span class="keyword">where</span> id<span class="operator">=</span><span class="number">4</span> <span class="keyword">and</span> name<span class="operator">=</span>&quot;侯卓林&quot;;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tb2 <span class="keyword">where</span> id<span class="operator">&gt;</span><span class="number">4</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tb2 <span class="keyword">where</span> id<span class="operator">!=</span><span class="number">4</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tb2 <span class="keyword">where</span> id <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">5</span>);</span><br></pre></td></tr></table></figure><h2 id="修改数据">修改数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 列<span class="operator">=</span>值</span><br><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 列<span class="operator">=</span>值 <span class="keyword">where</span> 条件</span><br><span class="line"><span class="comment">---</span></span><br><span class="line"><span class="keyword">update</span> tb2 <span class="keyword">set</span> email<span class="operator">=</span>&quot;好好好&quot; <span class="keyword">where</span> id<span class="operator">&gt;</span><span class="number">5</span>;</span><br><span class="line"><span class="keyword">update</span> tb2 <span class="keyword">set</span> age<span class="operator">=</span>age<span class="operator">+</span><span class="number">10</span> <span class="keyword">where</span> id<span class="operator">&gt;</span><span class="number">5</span>;</span><br></pre></td></tr></table></figure><h2 id="查询数据">查询数据</h2><h3 id="基本查询">基本查询</h3><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218171230674.png" alt="image-20250218171230674"></p><h3 id="条件查询">条件查询</h3><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218193046586.png" alt="image-20250218193046586"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名称 <span class="comment">-- 不直观，性能低</span></span><br><span class="line"><span class="keyword">select</span> 列名称，列名称 <span class="keyword">from</span> 表名称</span><br><span class="line"><span class="keyword">select</span> 列名称，列名称 <span class="keyword">from</span> 表名称 <span class="keyword">where</span> 条件</span><br><span class="line"><span class="comment">---</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb7</span><br><span class="line"><span class="comment">-- 查询id小于等于5的员工信息</span></span><br><span class="line"><span class="keyword">select</span> id,name <span class="keyword">from</span> tb7 <span class="keyword">where</span> id<span class="operator">&gt;</span><span class="number">10</span>;</span><br><span class="line"><span class="keyword">select</span> id,name <span class="keyword">from</span> tb7 <span class="keyword">where</span> name<span class="operator">=</span>&quot;xx&quot; <span class="keyword">and</span> password<span class="operator">=</span>&quot;xx&quot;;</span><br><span class="line"><span class="comment">-- 为查询的表结构起别名</span></span><br><span class="line"><span class="keyword">select</span> name 姓名,entrydate 入职日期 <span class="keyword">from</span> 表名称</span><br><span class="line"><span class="comment">-- 查询没有分配职位的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> job <span class="keyword">is</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">-- 查询密码不等于‘123456’的员工</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> password <span class="operator">!=</span> ‘<span class="number">123456</span>’</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> password <span class="operator">&lt;&gt;</span> ‘<span class="number">123456</span>’</span><br><span class="line"><span class="comment">-- 查询入职日期在‘2000-01-01’（包含）到‘2010-01-01’（包含）之间的员工信息</span></span><br><span class="line"><span class="keyword">select</span>  <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> entrydate <span class="keyword">between</span> <span class="string">&#x27;2010-01-01&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2010-12-31&#x27;</span>;</span><br><span class="line"><span class="comment">-- 查询入职日期在2010年1月1日到2010年12月31日的员工，并且性别为女</span></span><br><span class="line"><span class="keyword">select</span>  <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> entrydate <span class="keyword">between</span> <span class="string">&#x27;2010-01-01&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2010-12-31&#x27;</span> <span class="keyword">and</span> sex<span class="operator">=</span><span class="string">&#x27;2&#x27;</span>;</span><br><span class="line"><span class="comment">-- 擦汗寻职位是2，3，4的员工信息</span></span><br><span class="line"><span class="keyword">select</span>  <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> job <span class="keyword">in</span> (<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line"><span class="comment">-- 查询姓名为两个字的员工</span></span><br><span class="line"><span class="keyword">select</span>  <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;__&#x27;</span>;<span class="comment">-- 一个下划线代表一个字</span></span><br><span class="line"><span class="comment">-- 查询姓为张的员工信息</span></span><br><span class="line"><span class="keyword">select</span>  <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;张%&#x27;</span>;<span class="comment">-- %代表一个或者多个字</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="DQL聚合查询">DQL聚合查询</h3><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218194631819.png" alt="image-20250218194631819"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 聚合函数 聚合函数不对null值进行判断</span></span><br><span class="line"><span class="comment">-- 统计该企业员工数量</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(id) <span class="keyword">from</span> tb_emp;</span><br><span class="line"><span class="comment">-- 统计该企业最早入职的员工</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(entrydate) <span class="keyword">from</span> tb_emp;</span><br><span class="line"><span class="comment">-- 统计该企业最晚入职的员工</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(entrydate) <span class="keyword">from</span> tb_emp;</span><br><span class="line"><span class="comment">-- 统计该企业平均工资</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(salary) <span class="keyword">from</span> tb_emp;</span><br><span class="line"><span class="comment">-- 统计该企业工资总和</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(salary) <span class="keyword">from</span> tb_emp;</span><br></pre></td></tr></table></figure><h3 id="分组查询">分组查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 根据性别分组，统计男性和女性员工的数量</span></span><br><span class="line"><span class="keyword">select</span> sex,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> tb_emp <span class="keyword">group</span> <span class="keyword">by</span> sex;</span><br><span class="line"><span class="comment">-- 查询是入职时间在2010年1月1日之后，并且对结果根据职位进行分组，获取员工数量大于等于2的员工</span></span><br><span class="line"><span class="keyword">select</span> job,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> tb_emp <span class="keyword">where</span> entrydate<span class="operator">&gt;</span><span class="string">&#x27;2010-01-01&#x27;</span> <span class="keyword">group</span> <span class="keyword">by</span> job <span class="keyword">having</span> <span class="built_in">count</span>(<span class="operator">*</span>)<span class="operator">&gt;=</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure><h3 id="排序查询">排序查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 排序查询</span></span><br><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名[<span class="keyword">where</span> 条件列表] [<span class="keyword">group</span> <span class="keyword">by</span> 分组字段] <span class="keyword">order</span> <span class="keyword">by</span> 字段<span class="number">1</span>，排序方式<span class="number">1</span>，字段<span class="number">2</span>，排序方式<span class="number">2</span>;</span><br><span class="line"><span class="comment">-- 根据入职时间，对员工进行升序排序</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">order</span> <span class="keyword">by</span> entrydate <span class="keyword">asc</span>;<span class="comment">-- asc升序</span></span><br><span class="line"><span class="comment">-- 根据入职时间，对员工进行降序排序</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">order</span> <span class="keyword">by</span> entrydate <span class="keyword">desc</span>;</span><br><span class="line"><span class="comment">-- 根据入职时间，对员工进行升序排序，如果入职时间相同，则根据更新时间进行降序排序</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">order</span> <span class="keyword">by</span> entrydate <span class="keyword">asc</span>,updateTime <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><h3 id="分页查询">分页查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 从起始索引0开始查询员工数据，每页展示5条记录</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp limit <span class="number">0</span>,<span class="number">5</span>;</span><br><span class="line"><span class="comment">-- 查询第二页员工数据，每页展示5条记录</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp limit <span class="number">5</span>,<span class="number">5</span>;</span><br><span class="line"><span class="comment">-- 查询第三页员工数据，每页展示5条记录</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp limit <span class="number">10</span>,<span class="number">5</span>;</span><br></pre></td></tr></table></figure><h1>sql（多表设计）</h1><p><strong>多表设计的意思就是，现在有一个员工表和一个部门表，员工表里面有个部门，现在需要把员工表里放置一个部门的信息</strong></p><h2 id="一对多">一对多</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218202017302.png" alt="image-20250218202017302"></p><p><strong>但是这样创建的两张表是相互独立的，没有任何联系</strong></p><p><strong>这就引出了外键约束</strong></p><h2 id="外键约束">外键约束</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218202354233.png" alt="image-20250218202354233"></p><p><strong>如何设置外键约束</strong></p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218202647192.png" alt="image-20250218202647192" style="zoom:50%;" /><p><strong>但是物理外键有缺点，什么缺点呢？</strong></p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218202911568.png" alt="image-20250218202911568" style="zoom:50%;" /><h3 id="一对一">一对一</h3><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218204900826.png" alt="image-20250218204900826"></p><h2 id="多对多">多对多</h2><p><strong>一个学生可以选择多门课程，而一个课程也可以由多个学生选择</strong></p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218205221728.png" alt="image-20250218205221728"></p><hr><p>剩下的sql等听到了需要的时候再看吧</p>]]></content>
      
      
      <categories>
          
          <category> springboot黑马综合案例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot黑马综合案例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tomcat</title>
      <link href="/posts/9240bb8c.html"/>
      <url>/posts/9240bb8c.html</url>
      
        <content type="html"><![CDATA[<h1>什么是tomcat</h1><p>Tomcat 是由Apache软件基金会开发的一个开源的轻量级Web服务器，主要用于部署和运行Java Servlet和JavaServer Pages (JSP) 技术构建的Web应用。以下是关于Tomcat的一些关键点：</p><ul><li><strong>Java Web应用容器</strong>：Tomcat作为Servlet容器，实现了Java EE（现Jakarta EE）规范中的Servlet、JSP、WebSocket等技术标准。</li><li><strong>开源免费</strong>：它是完全免费的，并且源代码开放，允许开发者根据需要进行修改和定制。</li><li><strong>轻量级与高效性</strong>：相比其他全功能的应用服务器，Tomcat更为轻便，启动速度快，资源占用少。</li><li><strong>易于配置和管理</strong>：提供了简单的XML配置文件来设置各种参数，同时也支持图形界面工具来进行管理和监控。</li><li><strong>广泛使用</strong>：由于其稳定性和灵活性，在中小型网站以及企业级应用中被广泛应用。</li></ul><p>对于Java开发者来说，Tomcat是一个非常重要的工具，它为开发、测试和部署Java Web应用程序提供了必要的环境。</p><h2 id="目录">目录</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250217193648913.png" alt="image-20250217193648913"></p><h2 id="端口号">端口号</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250217194109266.png" alt="image-20250217194109266"></p>]]></content>
      
      
      <categories>
          
          <category> springboot黑马综合案例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot黑马综合案例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分层解耦</title>
      <link href="/posts/3ca78541.html"/>
      <url>/posts/3ca78541.html</url>
      
        <content type="html"><![CDATA[<h2 id="三层架构">三层架构</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218085900406.png" alt="image-20250218085900406"></p><p><strong>三层架构在项目文件中的分布</strong></p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218090001132.png" alt="image-20250218090001132"></p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218091624703.png" alt="image-20250218091624703"></p><p><strong>软件设计的原则，高内聚低耦合</strong></p><p>高内聚：软件中各个功能模块内部的功能联系紧密，每个模块的功能实现具体</p><p>低耦合：软件中各个层/模块之间的依赖，关联的程度低</p><h2 id="分层解耦的思想">分层解耦的思想</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218092534276.png" alt="image-20250218092534276"></p><h2 id="IOC-DI入门">IOC&amp;DI入门</h2><p>service层以及dao层的实现类，交给IOC容器管理</p><p>为controller及service注入运行时，依赖的对象</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218121431169.png" alt="image-20250218121431169"></p><p><strong>@RestController 主要用于开发 RESTful API，适用于需要返回 JSON 或 XML 格式数据的 Web 服务</strong></p><p><strong>Bean 是 Spring 框架的核心概念之一，它代表了由 Spring 容器管理的对象。通过声明式配置和依赖注入，可以轻松地管理和组织应用程序中的组件，提高代码的可维护性和灵活性。理解 Bean 的定义、作用域和生命周期对于开发高质量的 Spring 应用程序至关重要</strong></p><h2 id="bean的声明">bean的声明</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218133309268.png" alt="image-20250218133309268"></p><ul><li><p>声明bean的时候，可以通过value属性指定bean的名字，如果没有指定，默认为类名首字母小写</p></li><li><p>使用以上四个注解都可以声明bean，但是在springboot集成web开发中，声明控制器bean只能用@controller</p></li></ul><h2 id="bean组件扫描">bean组件扫描</h2><p>被组件扫描后才能进行生效</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218133918237.png" alt="image-20250218133918237"></p><p>所以java会默认扫描启动类所在包及其子包，但是如果bean在启动类所在包之外，那么该组件不能生效</p><h2 id="bean注入相同类型解决方案-DI">bean注入相同类型解决方案|DI</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250218135154886.png" alt="image-20250218135154886"></p>]]></content>
      
      
      <categories>
          
          <category> springboot黑马综合案例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot黑马综合案例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>综合案例</title>
      <link href="/posts/40101b37.html"/>
      <url>/posts/40101b37.html</url>
      
        <content type="html"><![CDATA[<h2 id="基础环境搭建">基础环境搭建</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250221114947965.png" alt="image-20250221114947965"></p><h2 id="构成">构成</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250221164201042.png" alt="image-20250221164201042"></p><p><strong>pojo提供数据类型</strong></p><hr><h2 id="三层框架">三层框架</h2><p>首先是控制层controller，负责处理http请求，调用dervice返回数据</p><p>例如，DeptController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DeptService deptService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@RequestMapping(value = &quot;/depts&quot; , method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/depts&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;查询所有部门数据&quot;</span>);</span><br><span class="line">        List&lt;Dept&gt; deptList = deptService.list();</span><br><span class="line">        <span class="keyword">return</span> Result.success(deptList);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/depts/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;根据id删除部门:&#123;&#125;&quot;</span>,id);</span><br><span class="line">        deptService.delete(id);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这是控制层的部门部分，定义了方法，路径，使用deptservice方法去获取员工数据，下面转到deptservice文件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DeptService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有的部门数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>   存储Dept对象的集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Dept&gt; <span class="title function_">list</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>deptservice接口里面使用list方法去获取了数据</p><p>那么这个list方法的实现在deptservicelmpl.java文件里面，移步到该文件，定义了list方法和delete方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptServicelmpl</span> <span class="keyword">implements</span> <span class="title class_">DeptService</span> &#123;<span class="comment">//集成deptservice接口</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DeptMapper deptMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//这里定义list方法，返回该数据</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Dept&gt; <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Dept&gt; deptList = deptMapper.list();</span><br><span class="line">        <span class="keyword">return</span> deptList;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">        deptMapper.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后方法里的deptMapper.list()又调用了deptMapper里面的方法，将数据库返回的数据相应到了list里边，</p><p><strong>至此整个数据的响应完成</strong></p><h2 id="条件筛选查询">条件筛选查询</h2><p>首先在enpcontroler里面配置好查询筛选参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Result <span class="title function_">page</span><span class="params">(<span class="meta">@RequestParam(defaultValue = &quot;1&quot;)</span> Integer page,</span></span><br><span class="line"><span class="params">                       <span class="meta">@RequestParam(defaultValue = &quot;10&quot;)</span> Integer pageSize,</span></span><br><span class="line"><span class="params">                       String name, <span class="type">short</span> gender,</span></span><br><span class="line"><span class="params">                       <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span>LocalDate begin,</span></span><br><span class="line"><span class="params">                       <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span>LocalDate end)</span>&#123;</span><br><span class="line">        <span class="comment">//输入日志</span></span><br><span class="line">        log.info(<span class="string">&quot;分页查询参数&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;&quot;</span>,page,pageSize,name,gender,begin,end);</span><br><span class="line">        <span class="comment">//调用empservce方法返回参数</span></span><br><span class="line">        PageBean pageBean=empService.page(page,pageSize,name,gender,begin,end);</span><br><span class="line">        <span class="keyword">return</span> Result.success(pageBean);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然后再page里面实现</p><p>接口声明方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpService</span> &#123;</span><br><span class="line">    <span class="comment">//接口里边声明方法</span></span><br><span class="line">    PageBean <span class="title function_">page</span><span class="params">(Integer page, Integer pageSize, String name, Short gender, LocalDate begin, LocalDate end)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后实现方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> PageBean <span class="title function_">page</span><span class="params">(Integer page, Integer pageSize, String name, Short gender, LocalDate begin, LocalDate end)</span> &#123;</span><br><span class="line">    <span class="comment">// 设置分页参数</span></span><br><span class="line">    PageHelper.startPage(page, pageSize);</span><br><span class="line">    <span class="comment">// 执行查询</span></span><br><span class="line">    List&lt;Emp&gt; empList = empMapper.list(name, gender, begin, end);</span><br><span class="line">    <span class="comment">// 获取Page对象</span></span><br><span class="line"><span class="comment">//    Page&lt;Emp&gt; p = (Page&lt;Emp&gt;) empList;</span></span><br><span class="line">        Page&lt;Emp&gt; newPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line">        newPage.addAll(empList);</span><br><span class="line">        newPage.setTotal(empList.size());</span><br><span class="line">    <span class="comment">// 封装到pageBean中</span></span><br><span class="line">    <span class="type">PageBean</span> <span class="variable">pageBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageBean</span>(newPage.getTotal(), newPage.getResult());</span><br><span class="line">    <span class="keyword">return</span> pageBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于list的查询语句</p><p>使用EmpMapper进行映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itheima.mapper.EmpMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itheima.pojo.Emp&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">       from emp</span><br><span class="line">       <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name!=null &quot;</span>&gt;</span></span><br><span class="line">               name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class="line">           <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender!=null&quot;</span>&gt;</span></span><br><span class="line">               and gender=#&#123;gender&#125;</span><br><span class="line">           <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;begin!=null and end != null&quot;</span>&gt;</span></span><br><span class="line">               and entrydate between #&#123;begin&#125; and #&#123;end&#125;</span><br><span class="line">           <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    order by update_time desc</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里我运行的时候会报一个错</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250223214647806.png" alt="image-20250223214647806"></p><p>这是我原来的page方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> PageBean <span class="title function_">page</span><span class="params">(Integer page, Integer pageSize, String name, Short gender, LocalDate begin, LocalDate end)</span> &#123;</span><br><span class="line">        <span class="comment">// 设置分页参数</span></span><br><span class="line">        PageHelper.startPage(page, pageSize);</span><br><span class="line">        <span class="comment">// 执行查询</span></span><br><span class="line">        List&lt;Emp&gt; empList = empMapper.list(name, gender, begin, end);</span><br><span class="line">        <span class="comment">// 获取Page对象</span></span><br><span class="line">        Page&lt;Emp&gt; p = (Page&lt;Emp&gt;) empList;</span><br><span class="line">        <span class="comment">// 封装到pageBean中</span></span><br><span class="line">        <span class="type">PageBean</span> <span class="variable">pageBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageBean</span>(p.getTotal(), p.getResult());</span><br><span class="line">        <span class="keyword">return</span> pageBean;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>更改后的page方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> PageBean <span class="title function_">page</span><span class="params">(Integer page, Integer pageSize, String name, Short gender, LocalDate begin, LocalDate end)</span> &#123;</span><br><span class="line">        <span class="comment">// 设置分页参数</span></span><br><span class="line">        PageHelper.startPage(page, pageSize);</span><br><span class="line">        <span class="comment">// 执行查询</span></span><br><span class="line">        List&lt;Emp&gt; empList = empMapper.list(name, gender, begin, end);</span><br><span class="line">        <span class="comment">// 获取Page对象</span></span><br><span class="line">        Page&lt;Emp&gt; page_result = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line">        page_result.addAll(empList);</span><br><span class="line">        page_result.setTotal(empList.size()); <span class="comment">// 设置总记录数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 封装到pageBean中</span></span><br><span class="line">        <span class="type">PageBean</span> <span class="variable">pageBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageBean</span>(page_result.getTotal(), page_result.getResult());</span><br><span class="line">        <span class="keyword">return</span> pageBean;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="from表单，图片上传功能">from表单，图片上传功能</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250225152742962.png" alt="image-20250225152742962"></p><p>文件上传，如果文件为图片，那么必须带上<code>enctype=&quot;multipart/form-data&quot;</code></p><hr><p><strong>UUID（Universally Unique Identifier）是一种标准的128位标识符，通常用于唯一标识信息。在Java中，UUID 可以用于生成唯一的ID，例如在创建新记录时为实体生成唯一的标识符</strong></p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250225154246653.png" alt="image-20250225154246653"></p><p><strong>这个设置在resouces中的application.properties中设置</strong></p><h2 id="SDK">SDK</h2><p>SDK（Software Development Kit）是一组工具、库和文档，用于帮助开发者更方便地开发、集成和部署软件应用。SDK 提供了预定义的接口和功能，使得开发者可以快速构建应用程序而无需从头开始编写所有代码。</p><h2 id="springboot配置文件">springboot配置文件</h2><p><strong>总结来说，该项目的文件功能过于分散，不便于维护以及集中管理</strong></p><h3 id="参数配置化">参数配置化</h3><blockquote><p>那么对于阿里云的配置文件，可以直接放到springboot配置文件中的application中，java提供了value注解，通常用于外部配置的属性注入，具体用法为：@value(“${配置文件中的key}”) – 参数配置化</p></blockquote><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250225191304706.png" alt="image-20250225191304706"></p><h3 id="yml配置文件">yml配置文件</h3><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250225191746606.png" alt="image-20250225191746606"></p><h3 id="conconfigurationproperties">conconfigurationproperties</h3><p>关于阿里云的配置，阿里云在yml文件中的配置，以及conconfiguratuionproperties注解对于阿里云配置文件的映射，避免多次给值，这个等到需要的时候在学</p>]]></content>
      
      
      <categories>
          
          <category> springboot黑马综合案例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot黑马综合案例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>请求响应</title>
      <link href="/posts/fe670207.html"/>
      <url>/posts/fe670207.html</url>
      
        <content type="html"><![CDATA[<h2 id="请求响应">请求响应</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250217205935391.png" alt="image-20250217205935391"></p><h2 id="1-原始方式">1.原始方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数获取的原始方式</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/Param&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">Param</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="comment">//获取请求参数</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">ageS</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    <span class="comment">//将获取到的年龄转化为整形</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> Integer.parseInt(ageS);</span><br><span class="line">    <span class="comment">//打印控制台</span></span><br><span class="line">    System.out.println(<span class="string">&quot;name:&quot;</span> + name + <span class="string">&quot; age:&quot;</span> + age);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到成功接收</p><h2 id="2-springboot方法">2.springboot方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@RequestMapping(&quot;/Param&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">Param</span><span class="params">(String name,Integer age)</span> &#123;</span><br><span class="line">        <span class="comment">//获取请求参</span></span><br><span class="line">        System.out.println(<span class="string">&quot;name:&quot;</span> + name + <span class="string">&quot; age:&quot;</span> + age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也是正常返回ok</p><h2 id="3-参数名不一致（RequestsParam）">3.参数名不一致（RequestsParam）</h2><p>参数名不一致，使用@RequestsParam注解完成映射，那么请求参数名就要跟name的参数名一致，这里就是namelll</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@RequestMapping(&quot;/Param&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">Param</span><span class="params">(<span class="meta">@RequestParam(name=&quot;namelll&quot;)</span> String name,Integer age)</span> &#123;</span><br><span class="line">        <span class="comment">//获取请求参</span></span><br><span class="line">        System.out.println(<span class="string">&quot;name:&quot;</span> + name + <span class="string">&quot; age:&quot;</span> + age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250217214517811.png" alt="image-20250217214517811"></p><p>这里RequestParam里面可以加上参数required=false，加上的话也可以不用传入该参数，不加默认为true，参数不能为空</p><h2 id="2-实体参数">2.实体参数</h2><p>将请求参数封装到一个实体类对象中，请求参数名要与与实体类的属性名相同</p><h3 id="2-1-简单实体参数">2.1 简单实体参数</h3><p>User实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实体参数：简单实体对象</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/simplePojo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">simplePojo</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-复杂实体参数">2.2 复杂实体参数</h3><p>复杂实体对象指的是，在实体类中有一个或多个属性，也是实体对象类型的。</p><p>例如：User类中有一个Address类型的属性（Address是一个实体类）</p><p>User实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Address address; <span class="comment">//地址对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Address实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Controller方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实体参数：复杂实体对象</span></span><br><span class="line">     <span class="meta">@RequestMapping(&quot;/complexPojo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">complexPojo</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="3-JSON参数-RequestBody">3.JSON参数(@RequestBody)</h2><p>在前后端进行交互时，如果是比较复杂的参数，前后端通过会使用JSON格式的数据进行传输。</p><p>传递json格式的参数，在Controller中会使用实体类进行封装。</p><p>封装规则：JSON数据键名与形参对象属性名相同，定义POJO类型形参即可接收参数。需要使用 @RequestBody标识。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JSON参数</span></span><br><span class="line"> <span class="meta">@RequestMapping(&quot;/jsonParam&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">jsonParam</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>@RequestBody注解：将JSON数据映射到形参的实体类对象中（JSON中的key和实体类中的属性名保持一致）</p><h2 id="4-路径参数-PathVariable">4.路径参数(@PathVariable)</h2><p>传统的开发中请求参数是放在请求体(POST请求)传递或跟在URL后面传递(GET请求)。但在现在的开发中，经常还会直接在请求的URL中传递参数。</p><p>传统请求参数：<br><a href="http://localhost:8080/user?name=hs&amp;age=18">http://localhost:8080/user?name=hs&amp;age=18</a></p><p>直接在请求的URL中传递参数：<br><a href="http://localhost:8080/user/1">http://localhost:8080/user/1</a><br><a href="http://localhost:880/user/1/0">http://localhost:880/user/1/0</a></p><h3 id="4-1-单个路径参数">4.1 单个路径参数</h3><p>使用{xx}来标识该路径参数，需要使用@PathVariable获取路径参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//路径参数</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/pathParam/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">pathParam</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-传递多个路径参数">4.2 传递多个路径参数</h3><p>继续加/{xx}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多个路径参数</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/pathParam/&#123;id&#125;/&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">pathParam</span><span class="params">(<span class="meta">@PathVariable</span> Integer id,<span class="meta">@PathVariable</span> String name)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (id+<span class="string">&quot;,&quot;</span>+name);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="5-数组集合参数">5.数组集合参数</h2><p>数组集合参数的使用场景：在HTML的表单中，有一个表单项是支持多选的(复选框)，可以提交选择的多个值。</p><p>后端程序接收上述多个值的方式有两种：</p><p>1.数组</p><p>2.集合</p><h3 id="5-1-数组参数">5.1 数组参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/arrayParam&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">arrayParam</span><span class="params">(String[] hobby)</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> Arrays.toString(hobby);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>在前端请求时，有两种传递形式：</p><p>方式一： ?hobby=game&amp;hobby=java</p><p>方式二： ?hobby=game,java</p><h3 id="5-2-集合参数-RequestParam">5.2 集合参数(@RequestParam)</h3><p>默认情况下，请求中参数名相同的多个值，是封装到数组。如果要封装到集合，要使用@RequestParam绑定参数关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/listParam&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List <span class="title function_">listParam</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;String&gt; hobby)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hobby;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在前端请求时，有两种传递形式：</p><p>方式一： ?hobby=game&amp;hobby=java</p><p>方式二： ?hobby=game,java</p><h2 id="6-日期参数-DateTimeFormat">6.日期参数(@DateTimeFormat)</h2><p>在一些特殊的需求中，可能会涉及到日期类型数据的封装。</p><p>因为日期的格式多种多样，那么对于日期类型的参数在进行封装的时候，需要通过@DateTimeFormat注解，以及其pattern属性来设置日期的格式。</p><p>@DateTimeFormat注解的pattern属性中指定了哪种日期格式，前端的日期参数就必须按照指定的格式传递。</p><p>后端controller方法中，需要使用Date类型或LocalDateTime类型，来封装传递的参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//日期参数</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/dateParam&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> LocalDateTime <span class="title function_">dataParam</span><span class="params">(<span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span> LocalDateTime updateTime)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> updateTime;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="7-响应">7.响应</h2><h3 id="7-1-ResponseBody">7.1 @ResponseBody</h3><p>@ResponseBody注解：</p><p>类型：方法注解、类注解<br>位置：书写在Controller方法上或类上<br>作用：将方法返回值直接响应给浏览器<br>如果返回值类型是实体对象/集合，将会转换为JSON格式后在响应给浏览器<br>在类上添加的@RestController注解，是一个组合注解。@RestController = @Controller + @ResponseBody</p><p>@RestController源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span>   <span class="comment">//元注解（修饰注解的注解）</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span>  <span class="comment">//元注解</span></span><br><span class="line"><span class="meta">@Documented</span>    <span class="comment">//元注解</span></span><br><span class="line"><span class="meta">@Controller</span>   </span><br><span class="line"><span class="meta">@ResponseBody</span> </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RestController &#123;</span><br><span class="line">    <span class="meta">@AliasFor(</span></span><br><span class="line"><span class="meta">        annotation = Controller.class</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br></pre></td></tr></table></figure><p>类上有@RestController注解或@ResponseBody注解时：表示当前类下所有的方法返回值做为响应数据，方法的返回值，如果是一个POJO对象或集合时，会先转换为JSON格式，在响应给浏览器</p><h3 id="7-2-统一响应结果">7.2 统一响应结果</h3><p>统一的返回结果使用类来描述，在这个结果中包含：</p><p>响应状态码：当前请求是成功，还是失败<br>状态码信息：给页面的提示信息<br>返回的数据：给前端响应的数据（字符串、对象、集合）<br>定义在一个实体类Result来包含以上信息。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;<span class="comment">//响应码，1 代表成功; 0 代表失败</span></span><br><span class="line">    <span class="keyword">private</span> String msg;  <span class="comment">//响应码 描述字符串</span></span><br><span class="line">    <span class="keyword">private</span> Object data; <span class="comment">//返回的数据</span></span><br><span class="line"><span class="comment">//增删改 成功响应(不需要给前端返回数据)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">1</span>,<span class="string">&quot;success&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查询 成功响应(把查询结果做为返回数据响应给前端)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">(Object data)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">1</span>,<span class="string">&quot;success&quot;</span>,data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//失败响应</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">error</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">0</span>,msg,<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>改造Controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//响应统一格式的结果</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World ~&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">&quot;Hello World ~&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> springboot黑马综合案例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot黑马综合案例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js基础</title>
      <link href="/posts/6890f50f.html"/>
      <url>/posts/6890f50f.html</url>
      
        <content type="html"><![CDATA[<p>无论是原型对象和实例对象都有 __ proto__</p><p>原型对象有  prototype</p><p>a.prototype  如果不是undefined  就说明a对象 是原型对象</p><p>原型对象和实例对象的函数  this 指向不同</p><p>实例对象</p><p>function a(){</p><p>​console.log(this)</p><p>}</p><p>谁调用 this就指向谁</p><p>原型对象</p><p>function pro(){</p><p>​this.a =1</p><p>}</p><p>var  aaa = new pro()  this指向的是原型对象的实例对象  也就是aaa</p><p>其中 pro 就是原型对象</p><p>构造函数的属性和原型对象的属性不同</p><p>对象._ _ proto_ _ 就是找这个对象的父对象</p><p>aaa._ <em>proto</em>___ 就是 原型对象</p><p>最底层就是object</p><p>object.__ pooto__  就是null了</p>]]></content>
      
      
      <categories>
          
          <category> js逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js逆向过程和几个方法</title>
      <link href="/posts/9135e420.html"/>
      <url>/posts/9135e420.html</url>
      
        <content type="html"><![CDATA[<p>js逆向的过程</p><p>抓包—调试----脱离浏览器环境（让浏览器的js代码在本地运行）  本地环境（node.js 封装的V8引擎）</p><h1>Object.defineProperty()</h1><p>静态方法会直接在一个对象上定义一个新属性，或修改其现有属性，并返回此对象。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen"><code>Object.isFrozen()</code></a></p><p>判断对象是否已经冻结。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed"><code>Object.isSealed()</code></a></p><p>判断对象是否已经封闭。</p><p>weixin.code   是小程序  的code  是 app生成的  没办法逆向出来  只能第三方做的hook</p>]]></content>
      
      
      <categories>
          
          <category> js逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络协议</title>
      <link href="/posts/1cd3002f.html"/>
      <url>/posts/1cd3002f.html</url>
      
        <content type="html"><![CDATA[<h1>网络协议：</h1><h2 id="TCP">TCP</h2><p>安全</p><p>速度慢</p><p>《三次握手》</p><p>1、客户端找到服务器 ：我来了！</p><p>2、服务器 找到客户端： 你确定来了？</p><p>3、客户端再发给服务器：我确定我来了</p><p>网站基本都是走的TCP协议</p><h2 id="UDP">UDP</h2><p>不能保证数据完整性</p><p>速度快</p><p>TCP和UDP 都是底层协议，我们是管不了的</p><p>我们能处理的就是 顶层协议</p><h2 id="顶层协议">顶层协议</h2><p>由开发这个软件的开发者开发的协议</p><p>协议：我怎么样告诉你我是谁，以及我怎么告诉你数据的格式</p><p>HTTP  HTTPS</p><p>FTP  发文件的协议</p><p>SMTP  POP3  发邮件的协议</p><p>MQTT</p><p>HTTP 80端口 ——&gt; https 443端口</p><p><a href="HTTPS://hao.360.com">HTTPS://hao.360.com</a></p><p>https 协议</p><p><a href="http://360.com">360.com</a> 主域名</p><p><a href="http://hao.360.com">hao.360.com</a> 二级域名  ip地址  一个域名对应一个ip地址</p><h3 id="http-https-send">http    -&gt; https    send</h3><p>请求头</p><p>请求体</p><p>响应头</p><p>响应体</p><h3 id="websocket-websockets">websocket -&gt; websockets</h3><p>new websocket  创建websocket的位置</p><p>测试网址  <a href="http://www.websocket-test.com/">http://www.websocket-test.com/</a></p><p><img src="C:%5CUsers%5Chp%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230810172032425.png" alt="image-20230810172032425"></p><p>Status Code: 101 Switching Protocols</p><p>请求头（以下都是不能删除的）</p><ol><li>Connection: Upgrade  #代表协议升级</li><li>Host: 124.222.224.186:8800</li><li>Origin: <a href="http://www.websocket-test.com">http://www.websocket-test.com</a></li><li>Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits</li><li>Sec-WebSocket-Key: pjJ9hSUw3F+RVRsXlRz5Ow==  #升级加密的key 由客户端随机生成</li><li>Sec-WebSocket-Version: 13 #升级到什么版本</li><li>Upgrade: websocket #升级成什么协议</li><li>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64)AppleWebKit/537.36 (KHTML, like Gecko)Chrome/95.0.4638.69 Safari/537.36</li></ol><p>messages： 看发了什么信息的</p><p>虽然 此网站 显示 是明文，但是其实可以发好几种数据，</p><p>可发的数据类型 ：字节集    string   一般直接认为是字节集</p><p>websocket 是一次请求一直连接  而 http是一次请求一次连接</p><p>http  短连接</p><p>websocket  长连接</p><p>抓包 只看 三类  XHR  WS   document</p>]]></content>
      
      
      <categories>
          
          <category> js逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<h2 id="基础巩固">基础巩固</h2><p>二月二十–三月二十</p><p>刷卷子，每周五拿一下错题本</p><h2 id="类型题">类型题</h2><p>立体几何+平面向量</p><p>解三角形+三角函数</p><p>统计：二项分布，超几何，事件概率 + 排列组合</p><p>点到直线的距离，圆的方程 + 函数（抽象函数，奇数偶数性，单调性）</p><p>不等式</p><p>log2，</p><p>导数第一问（基础）**</p><p>同构（稍微提高）构造函数</p><p>数列，（现在的卷子大题都放在最后了）变难</p><p>圆锥曲线简单题</p><p>二项式</p><p>不等式</p><p>立体几何（外接球）</p><h2 id="最后冲刺">最后冲刺</h2><p>刷高考题+错题+整章节整理</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<p>ctrl+f 向上移动一页  b向下</p><p>0移动最左 ￥移动最右</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<h2 id="2025-2-17">2025-2-17</h2><p>所以为什么做一个项目要先写一个接口，就是写完接口就可以去写注解路径了，需要请求什么路径，请求这个 路径使用什么方法，使用这个方法要有什么数据什么类，这个类里面都有什么，生成getter和setter方法，以及同string方法，所以一个接口文档是包含了很多东西的</p><ol><li>每种方法的参数接收，请求响应</li></ol><p>关于这个员工数据案例，首先前端使用axios请求了一下数据，如果数据存在那么返回data，返回的data经过前端渲染展示出来表格，那么后端是如何处理这个数据的，首先，后端拿到html文件，开始i逻辑判断，如果为1，就更新为名字，这里面更改信息又用到了之前声明变量所使用的getter和setter方法</p><h2 id="2025-2-18-周二">2025-2-18 周二</h2><p>一个项目是怎么样落地的呢？首先要想好要做一个什么项目，然后去弄个出来每个页面，这个页面都要有什么功能，以及功能外又要什么数据库，每个都应该要提前设计好，这才是软件开发的前提，不设计好之后根本就没有头绪</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<ol><li>两侧缩进16px</li><li>对于段内的划线，使用黑色加粗</li><li>对于整段的划线，使用红色加粗</li><li>标题引号找素材</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>一些在网上看到的建议</title>
      <link href="/posts/e8a7021a.html"/>
      <url>/posts/e8a7021a.html</url>
      
        <content type="html"><![CDATA[<p>渡有心人，送给年轻人！<br>人生最有价值的知识主次及比例<br>①预防人生意外事故、研究透彻各种不良习气危害并避之，学会休息，预防运动劳损，健体使身体稳固不易损伤的知识（60％）<br>②上好学，培养傍身技能，记住稀缺是精髓，社会正常运行必要的职业，刚需手艺，专研透了，也能养你一辈子（30％）<br>③怎么教育子女，做好社会角色分工（8％）<br>④乐器绘画舞蹈等（2％）<br>健康活着，持续健康活着，持续幸福健康活着；起步的迟没关系，只要跑的越久，就跑的越远<br>清醒的头脑，健全的四肢，充实的肠胃，是每天要核查和保持的<br>保持健康，生活便进可攻，退可守<br>警惕贪（对于喜好的过于偏执）、嗔（对于讨厌的反应过激）、痴（对不明事理表现贪与嗔的反应），一旦发作，让人失去驾驭人生大局的基本理智。<br>凡事三思:思危、思退、思变<br>这个社会需要有真实能力的人去做事<br>这个世界健康其实才是最稀缺的东西<br>只赚认知内的钱<br>其他<br>①最好一辈子不沾酒，醉酒、喝酒不爬高，醉了一定要找低矮床铺侧卧休息<br>②膝关节是人体最复杂的关节，一定不要损伤，因为最复杂，一旦损伤，修复也是最难的。安全使用膝盖的知识<br>③健身体成习惯，心平静，充分热身，量力而行，场地光线充足安全无障碍<br>④把健康比作1,一个人的事业、财富、金钱、地位、家庭等等，都是尾随在其后的0，有了1，后面的0才有意义，没有了健康这个1做支撑，即使他有数不尽的0，那终究还只是个0，健康不是一切，但没有健康就没有一切<br>⑤我们成长中，各种原因原生环境，思想上行为上多少都背负着那么一些歪理邪说成分，长大了，要懂得筛查找出，不然它就好比一颗雷，谁知道那天触发了它就炸了<br>⑥终生思考:这个世界的真实面貌是什么样的，事实是什么<br>⑦远离自私垃圾人，远离以权力背景压人的人，若不可避免，至少一定要思危，不对果断跑路<br>⑧身材: 体重/身高平方≤23kg/m²<br>推荐<br>叔本华的《人生的智慧》，梁应林《人生意外800鉴》，杨渝平《运动损伤那些事》 ，北泽杏子《讨厌!喝酒好可怕》 系列<br>预防疾病<br>病毒肝炎（疫苗）、艾滋病（洁身）、肺结核（健身营养）、膝关节半月板撕裂（软骨损伤不可再生）、椎间盘突出、老人股骨头骨折（老人死亡骨折）尘肺（呼衰）脊髓损伤、脑梗偏瘫（4小时内溶栓）生活不能自理，狂犬病（致死）<br>出门看天气防雷电溺水、高空坠物、车祸、踩空、滑倒、火灾 、拌倒<br>健康是为了生命充分绽放<br>有些错失误就一次机会</p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂七杂八 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<p>首先，git clone下来的项目要npm install下载依赖，如果是vue项目，运行通常npm run serve或者npm run dev</p><h1>vue速通一下</h1><blockquote><ol><li>使用vite创建项目（较快）</li></ol><p><code>npm create vite</code></p></blockquote><h2 id="配置文件">配置文件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">src/  </span><br><span class="line">├── assets/               # 存放静态资源，如图片、字体、视频等  </span><br><span class="line">├── components/           # 公共组件  </span><br><span class="line">├── views/                # 页面组件  </span><br><span class="line">├── router/               # 路由配置  </span><br><span class="line">├── store/                # 状态管理（<span class="title class_">Vuex</span> 或 <span class="title class_">Pinia</span>）</span><br><span class="line">├── api/                  # 后端 <span class="variable constant_">API</span> 请求  </span><br><span class="line">├── utils/                # 工具函数  </span><br><span class="line">├── assets/               # 样式文件，字体、图片等  </span><br><span class="line">└── <span class="title class_">App</span>.<span class="property">vue</span>               # 根组件</span><br></pre></td></tr></table></figure><p>vite.config.js：项目的配置文件，基于vite的配置</p><p>package.json：项目包文件，核心依赖项变成了vue3，vite</p><p>main.js入口文件，createApp创建Vue实例，吃实话vue应用，配置全局插件，引入根组件</p><p><strong>main.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line"><span class="comment">//原始new Vue()创建一个应用实例 =升级=&gt; createApp() 将创建实例进行了封装,保证每个实例的独立封闭性</span></span><br></pre></td></tr></table></figure><h2 id="基础语法">基础语法</h2><p>setup：通过setup选项提供一种新的组件内部结构，以更模块化的方式组织代码</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250204200309324.png" alt="image-20250204200309324"></p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250204200629245.png" alt="image-20250204200629245"></p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250204200422732.png" alt="image-20250204200422732"></p><p>指令</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">指令属性</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;htmlContent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;htmlContent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">渲染属性</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;item in 5&quot;</span>&gt;</span>这是内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;false&quot;</span>&gt;</span>标签内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">属性指令</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span>这是内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span>这是内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">事件指令</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;output&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;output&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">表单指令 v-model可是实现数据双向绑定</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;inputValue&quot;</span>&gt;</span><span class="comment">&lt;!-- 可以更改内部数据从而改变页面反应 --!&gt;   </span></span><br><span class="line"><span class="comment">&lt;p v-text=&quot;inputValue&quot;&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="comment">修饰符</span></span><br><span class="line"><span class="comment">&lt;input type=&quot;text&quot; v-model.trim=&quot;inputValue&quot;&gt;trim可以实现清除数据</span></span><br></pre></td></tr></table></figure><h2 id="组件开发">组件开发</h2><p>Vue CLI 是一个基于Vue.js进行快速项目搭建的工具。它是一个全局安装的npm包，为Vue.js应用程序快速创建项目模板</p><h2 id="vuex">vuex</h2><p>vuex是一个专门为vue.js应用程序开发的状态管理工具</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250204211539447.png" alt="image-20250204211539447"></p><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。以下是对 Vuex 的详细介绍：<br>核心概念</p><p>state：用于存储应用的所有状态数据，是一个普通的 JavaScript 对象。可以将其看作是一个“数据仓库”，包含了组件之间共享的数据。例如在一个电商应用中，购物车中的商品列表就可以存储在 state 中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    <span class="attr">cartItems</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>组件中获取 state 数据的方式：在 Vue 组件中，可以通过 this.$store.state 来访问 state 中的数据。如果使用计算属性，代码会更加简洁和易读：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">computed</span>: &#123;</span><br><span class="line">        <span class="title function_">cartItems</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">cartItems</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mutations：唯一可以修改 state 的地方，是一些纯函数。每个 mutation 都有一个字符串的事件类型和一个回调函数，回调函数接收 state 作为第一个参数。这种设计保证了状态变化的可预测性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="title function_">ADD_TO_CART</span>(<span class="params">state, item</span>) &#123;</span><br><span class="line">        state.<span class="property">cartItems</span>.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">触发 mutations 的方式：在组件中通过 <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;mutationType&#x27;</span>, payload) 来触发，例如：</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">addItemToCart</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> newItem = &#123; <span class="attr">name</span>: <span class="string">&#x27;Product 1&#x27;</span>, <span class="attr">price</span>: <span class="number">10</span> &#125;;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;ADD_TO_CART&#x27;</span>, newItem);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>actions：用于处理异步操作，如发送网络请求等。actions 可以触发 mutations 来间接修改 state。它也有一个上下文对象，包含了 state、commit 等属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">fetchCartItems</span>(<span class="params">&#123; commit &#125;</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://api.example.com/cart-items&#x27;</span>);</span><br><span class="line">            <span class="keyword">const</span> data = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">            <span class="title function_">commit</span>(<span class="string">&#x27;SET_CART_ITEMS&#x27;</span>, data);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error fetching cart items:&#x27;</span>, error);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">触发 actions 的方式：在组件中通过 <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;actionType&#x27;</span>, payload) 来调用，例如：</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;fetchCartItems&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getters：类似于计算属性，用于获取 state 中的数据，起到对 state 数据进行过滤、计算等作用。它的优点是可以缓存计算结果，只有当依赖的 state 数据发生变化时才会重新计算。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">    <span class="title function_">totalCartPrice</span>(<span class="params">state</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> state.<span class="property">cartItems</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">total, item</span>) =&gt;</span> total + item.<span class="property">price</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">在组件中使用 getters 的方式：与计算属性类似，通过 <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span> 访问，例如：</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">computed</span>: &#123;</span><br><span class="line">        <span class="title function_">totalCartPrice</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="property">totalCartPrice</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>项目中的应用场景</p><p>多组件共享状态：当多个组件需要共享数据时，将数据存储在 Vuex 的 state 中，避免了通过层层传递 prop 或者使用事件总线（Event Bus）带来的复杂性和维护成本。例如，在一个多页面的电商应用中，商品列表页、购物车页和结算页都需要共享购物车的状态，使用 Vuex 可以方便地实现数据的共享和同步更新。<br>复杂状态管理：对于复杂的业务逻辑，如涉及多个状态的联动变化、异步操作等，Vuex 的 mutations、actions 和 getters 提供了清晰的结构来管理和维护这些逻辑。例如在处理用户登录和权限管理时，可以在 actions 中处理登录的异步请求，通过 mutations 更新用户登录状态，使用 getters 判断用户是否具有某些权限。</p><p>优势</p><p>可预测性：由于 mutations 是唯一可以修改 state 的地方，并且是纯函数，使得应用的状态变化变得可预测。开发人员可以很容易地追踪状态的变化过程，便于调试和维护。<br>便于团队协作：Vuex 提供了一种集中式的状态管理方式，所有的状态数据和状态变化逻辑都集中在一个地方。团队成员可以更容易地理解和维护项目的状态管理逻辑，减少了因状态管理混乱而导致的错误。<br>利于代码复用：在不同的项目中，如果有相似的状态管理需求，可以方便地复用 Vuex 的模块和逻辑，提高开发效率。</p><h2 id="vue-router">vue-router</h2><h3 id="基础路由">基础路由</h3><p>使用的时候要在上面进行导入</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250204205133242.png" alt="image-20250204205133242"></p><h3 id="动态路由，子路由">动态路由，子路由</h3><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250204205724734.png" alt="image-20250204205724734"></p><h3 id="编程式导航，路由跳转">编程式导航，路由跳转</h3><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250204210620603.png" alt="image-20250204210620603"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<h1>简介</h1><p><strong>Webpack 是一个模块打包工具，在现代的 JavaScript 应用程序开发中扮演着至关重要的角色</strong>。以下是关于它的详细介绍：<br>核心概念</p><h2 id="模块（Module）">模块（Module）</h2><p>在 Webpack 中，一切文件（如 JavaScript、CSS、图片等）都可以被视为模块。模块之间可以相互依赖和引用。例如，一个 JavaScript 文件可能会导入另一个 JavaScript 文件、样式文件或者图片文件。<br>入口（Entry）：入口是 Webpack 开始打包的起点。从入口文件出发，Webpack 会递归地找到所有依赖的模块。常见的入口配置形式是一个字符串（指定单个入口文件路径），也可以是一个对象（用于 多入口情况）。例如：entry: ‘./src/index.js’<br>输出（Output）：指定 Webpack 打包后的文件输出路径和文件名等信息。通过 output 配置项，你可以告诉 Webpack 把打包后的文件放在哪里，以及如何命名。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="loader">loader</h2><p>Webpack 本身只能处理 JavaScript 和 JSON 文件，loader 用于让 Webpack 能够处理其他类型的文件，比如 CSS、图片等。loader 可以将这些文件转换为 Webpack 能够理解的模块。例如，css-loader 用于处理 CSS 文件，file-loader 用于处理图片等文件资源。使用时需要在 webpack.config.js 中进行配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插件（Plugin）">插件（Plugin）</h2><p>插件可以在 Webpack 构建过程的不同阶段执行更广泛的任务，比如压缩代码、分割代码块、生成 HTML 文件等。html-webpack-plugin 可以自动生成 HTML 文件，并将打包后的 JavaScript 文件引入其中；mini-css-extract-plugin 可以将 CSS 从 JavaScript 中抽离出来生成单独的 CSS 文件。插件需要先引入，然后在 plugins 数组中进行实例化配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优势">优势</h2><p>模块处理能力强大：能够处理各种类型的模块及其复杂的依赖关系，无论是 JavaScript 的 ES6 模块系统，还是 CommonJS 模块等，都能很好地整合和打包。<br>优化资源加载：可以对代码进行分割和懒加载，提高应用程序的加载速度。例如，将不同路由对应的代码分割成单独的代码块，只有在用户访问相应路由时才加载。<br>支持多种文件类型：通过丰富的 loader 和插件生态系统，能够处理 CSS、图片、字体等各种文件类型，将它们整合到最终的打包文件中。</p><h2 id="使用场景">使用场景</h2><p>单页面应用（SPA）开发：帮助管理 SPA 中众多的模块和资源，实现代码的优化加载和性能提升。<br>多页面应用（MPA）开发：可以为每个页面分别进行打包和资源处理，提高开发效率和应用性能。<br>处理复杂的样式：通过相关 loader 和插件，可以对 CSS 进行预处理（如使用 Sass、Less）、后处理（如添加浏览器前缀），并优化 CSS 的加载和合并。</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250203105210570.png" alt="image-20250203105210570"></p><h1>webpack解决变量重名问题</h1><h2 id="通过作用域进行解决">通过作用域进行解决</h2><p>Webpack 将每个文件视为一个模块，ES6 模块具有自己独立的作用域。在模块内部定义的变量、函数等只在该模块内有效，不会影响到其他模块。</p><h1>webpack加载器</h1><p>webpack非常经典的加载器</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250203111503743.png" alt="image-20250203111503743"></p><p>0位置是他自己本身，1是导出函数，2是加载器</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<ul><li>ut：时间戳</li><li>sign：签名认证，一般情况多数加密参数存在</li></ul><p>正则一般是如何提取的，有什么技巧i</p><h1>看源码</h1><p>首先看一下源码，发现源码中没有任何信息，那么就看一下网络请求</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<p>编辑器： 秀米 135编辑器 壹伴编辑器（推荐）</p><p>正文：15，中文细体 两端缩进16</p><p>封面制作：canva,创客贴</p><p>图片：https;<a href="//www.pexels.com/zh-cn/(%E5%9B%BE%E7%89%87%E5%85%B3%E9%94%AE%E5%AD%97%E5%AF%BB%E6%89%BE)">//www.pexels.com/zh-cn/(图片关键字寻找)</a></p><p>寻找文案灵感：顶尖文案（TOPYS） 清博大数据（分析） 、 微博热搜</p><p>涨粉：受众身边</p><p>变现：流量主：500人粉丝 推</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>做饭</title>
      <link href="/posts/7414cfa6.html"/>
      <url>/posts/7414cfa6.html</url>
      
        <content type="html"><![CDATA[<p><strong>基本就是调料最后放，然后酱油可以放两次，开锅前一次，然后其他调料都是后放，先盐，再糖，味精</strong></p><h1>各种醋的用法</h1><ul><li><p>陈醋：酸味浓郁，稳定性比较好，适用于制作焖，炖，烧</p></li><li><p>香醋：酸而不涩，不适合长时间的加热，多用于凉菜，蘸汁，调汤</p></li><li><p>白醋：以食用酒精为原料，无色，味道单纯，酸度不高</p></li><li><p>米醋：香气纯正，酸味柔和，无所不用</p></li></ul><h1>酱油</h1><ul><li><strong>生抽</strong>：味道鲜美，咸味适中，同时具有独特的酱香味，口感相对清爽。</li><li><strong>老抽</strong>：相比生抽，老抽的咸味稍重一些，酱香更加浓郁醇厚，还带有一点甜味。</li></ul><h1>示例</h1><h2 id="一、番茄炒鸡蛋">一、番茄炒鸡蛋</h2><p>00:30</p><p>**番茄🍅：**可以买普罗旺斯、铁皮，一般软的更好，铁皮是青的比红的甜</p><p>1.番茄对半切去掉蒂头，一颗番茄切大块，一颗番茄切小丁</p><p><img src="https://i0.hdslb.com/bfs/note/842e83d83c14eee2cd70438535eab42dc61bb628.jpg@690w_!web-note.webp" alt="img"></p><p>2.把鸡蛋打进碗里（5个，上不封顶）</p><p>3.在鸡蛋的碗里加入盐，搅散</p><p>4.往锅里加入宽油（多油），开最大火，等油热，再把鸡蛋下锅，蛋液凝固后捞出，锅里留一点油</p><p>5.用留的油炒蒜末和番茄丁，中火慢慢炒，超出汁水</p><p>6.下入大块番茄，炒2分钟炒软</p><p>7.鸡蛋再次下锅</p><p>8.加调味，翻炒均匀</p><p><img src="https://i0.hdslb.com/bfs/note/add100f707207dce67a962c28e9380c07f92c6fb.jpg@690w_!web-note.webp" alt="img"></p><p><img src="https://i0.hdslb.com/bfs/note/88116291fbc2415933798410c41345b65233fd5d.jpg@690w_!web-note.webp" alt="img"></p><h2 id="二、炒青菜">二、炒青菜</h2><p>01:53</p><p><img src="https://i0.hdslb.com/bfs/note/a4e91aa66b1f279c9fb223860cce0122c5a449b2.jpg@690w_!web-note.webp" alt="img"></p><p>这里用的是上海青🥬（广义上的绿叶菜）</p><ol><li>青菜清洗干净（尤其是根部）</li><li>把青菜菜心最厚的地方切掉，甩干水分</li><li>起锅烧火，大火化开猪油，有香味后下入青菜，大火炒3分钟至软化</li><li>调味，炒匀出锅</li></ol><p><img src="https://i0.hdslb.com/bfs/note/55a2d5a25ea7e649d9cab6b17643beb675430789.jpg@690w_!web-note.webp" alt="img"></p><p><img src="https://i0.hdslb.com/bfs/note/c07b6fb324ad6f854430e83ab131b099b4136e43.jpg@690w_!web-note.webp" alt="img"></p><h2 id="三、炒土豆丝">三、炒土豆丝</h2><p>02:52</p><p><img src="https://i0.hdslb.com/bfs/note/099e7d37b6cb8309631bcfd85ce96e4332cea26c.jpg@690w_!web-note.webp" alt="img"></p><ol><li>土豆去皮，擦丝，用清水清洗</li><li>开最大🔥，倒一点油，20秒后放入蒜末、干辣椒段，拨弄几下，下入土豆丝炒1分钟</li><li>加调味（如图），翻炒30秒</li><li>出锅前淋香油，撒小葱</li></ol><p><img src="https://i0.hdslb.com/bfs/note/ccac7ced0570fed28ec6b2f517b13a35e6a89572.jpg@690w_!web-note.webp" alt="img"></p><h2 id="四、水蒸蛋">四、水蒸蛋</h2><p>03:50</p><ol><li>打3个鸡蛋，加9个蛋壳的水（用蛋壳装水） 比例是1:1.5</li><li>往鸡蛋里加一勺盐，再打鸡蛋搅匀，撇掉表面泡泡，盖一层保鲜膜，戳排气孔</li><li>烧锅水，放锅里蒸9分钟（中途不可以开盖）</li></ol><p><img src="https://i0.hdslb.com/bfs/note/2753d1d915d20a5363109584bc2826c0142dd226.jpg@690w_!web-note.webp" alt="img"></p><p>吃法：划几刀，浇上豉油、酱油</p><p><img src="https://i0.hdslb.com/bfs/note/bd41c803ecd9137bf8b8a6fa729ba9c148b6d4ba.jpg@690w_!web-note.webp" alt="img"></p><h2 id="五、可乐鸡翅">五、可乐鸡翅</h2><p>04:40</p><p><img src="https://i0.hdslb.com/bfs/note/b2d3c49f557065e1fa7ae9d981a32c13349912c3.jpg@690w_!web-note.webp" alt="img"></p><ol><li>锅里加少量油，开中火煎鸡翅</li><li>煎到微微焦黄，倒入普通含糖可乐没过鸡翅</li><li>加调味，大火收汁，直到浓稠</li></ol><p><img src="https://i0.hdslb.com/bfs/note/5beb88fa6b10f0adb9eca8790ffb63774e4855fe.jpg@690w_!web-note.webp" alt="img"></p><h2 id="六、肉末粉丝">六、肉末粉丝</h2><p>05:46</p><ol><li>把红薯粉条泡开</li><li>切猪肉末</li><li>准备姜末、蒜末、小米辣、香菜、葱</li><li>锅里加油，开大火炒香姜末、蒜末、小米辣、猪肉末，加入2勺豆瓣酱，炒出红油</li><li>翻炒到肉末散开，下入粉条，翻动炒软</li><li>加调味，炒到粉条完全透明</li><li>出锅前撒一把葱花、香菜</li></ol><p><img src="https://i0.hdslb.com/bfs/note/66d6e65a5f1a1cfdafb526c1fc9afdc086057dca.jpg@690w_!web-note.webp" alt="img"></p><p><img src="https://i0.hdslb.com/bfs/note/6839a973122075bc2f273c6047719b47813aa141.jpg@690w_!web-note.webp" alt="img"></p><h2 id="七、辣椒炒肉">七、辣椒炒肉</h2><p>06:49</p><p>辣椒：选择螺丝椒、皱皮椒</p><p>猪肉：选择带点肥肉的（烧烤肉片就可以）</p><p><img src="https://i0.hdslb.com/bfs/note/6e93ddf39d69f3a547142e6e8f7348bc7a3ab2b4.jpg@690w_!web-note.webp" alt="img"></p><ol><li>把辣椒的蒂头拔掉，去掉辣椒籽</li><li>把辣椒压扁，切小段</li><li>猪肉加调味⬆️，抓匀，腌制</li><li>开中火，不加油，干烤辣椒，用铲子压，烤出虎皮，盛出备用</li><li>锅里加油，开大火煎肉片</li><li>往锅里加入蒜末、豆豉、辣椒</li><li>加调味，炒匀出锅</li></ol><p><img src="https://i0.hdslb.com/bfs/note/8d7c3a47616aa9119725153b8654449d8906d01f.jpg@690w_!web-note.webp" alt="img"></p><p><img src="https://i0.hdslb.com/bfs/note/e2fd3f6a48cc2ff6a8974061b4187ebf1589e611.jpg@690w_!web-note.webp" alt="img"></p><h2 id="八、白灼虾">八、白灼虾</h2><p>08:10</p><p>煮的版本⬇️</p><ol><li>剪掉虾腿，用活瞎</li><li>冷水加入姜片和料酒</li><li>等水烧开放虾，等水重新沸腾后煮一分钟，关火泡一分钟</li></ol><p>蒸的版本⬇️</p><ol><li>冷水加料酒、姜片，烧水</li><li>加上蒸笼，蒸笼放上葱姜，再放虾</li><li>保持大火冒蒸汽状态蒸5分钟，单独把虾拿出来装盘，不要水</li></ol><p>调料汁：2勺姜末、2勺蒜末，泼热油，加水蒸鱼豉油、一把葱花</p><p><img src="https://i0.hdslb.com/bfs/note/d2ca9b2c52293c6cbe5126927c5f59afe124e015.jpg@690w_!web-note.webp" alt="img"></p><h2 id="九、煮饭">九、煮饭</h2><p>00:20</p><ol><li>淘米（洗掉生米表面的淀粉）-&gt;打圈淘洗 至半浑浊</li></ol><p><img src="https://i0.hdslb.com/bfs/note/4404507a4178857dc34dae54943561a7469d1697.jpg@690w_!web-note.webp" alt="img"></p><p>2.加水到合适水量</p><p>3.陈米加一勺油、米醋</p><h2 id="十、韭菜炒蛋">十、韭菜炒蛋</h2><p>01:03</p><ol><li>韭菜清洗，切段</li><li>打鸡蛋，打散，不加盐</li><li>起锅烧油，可以稍微多一些油，中火炒蛋（轻轻推炒）</li><li>看不到明显鸡蛋液体，下入韭菜快速翻炒至断生</li><li>韭菜绿色变深的时候抓紧撒盐、味精调味，翻拌均匀快速出锅</li></ol><p><img src="https://i0.hdslb.com/bfs/note/f07a63e920815569a2a2df3a6b267e56befeb556.jpg@690w_!web-note.webp" alt="img"></p><h2 id="十一、手撕包菜">十一、手撕包菜</h2><p>02:01</p><ol><li>清洗包菜/牛心菜，切掉根部，手撕成大片</li><li>切五花肉片</li><li>锅里加油煎五花肉</li><li>调成最大🔥，下入蒜末、干辣椒、花椒、1勺生抽酱油</li><li>水汽蒸发完，下入包菜炒软</li><li>加盐、味精</li></ol><p><img src="https://i0.hdslb.com/bfs/note/70ff79441fd1422de9c2558f5f91bce069c336c0.jpg@690w_!web-note.webp" alt="img"></p><h2 id="十二、青椒肉丝">十二、青椒肉丝</h2><p>02:55</p><ol><li>螺丝椒或皱皮椒洗净，梗往里推再往外拽，去掉辣椒籽，切丝或圈</li><li>切肉丝，调味抓匀腌制5分钟–1勺生抽、1勺老抽、1勺黄酒、2勺淀粉</li><li>起锅烧火，大火🔥多加油，冷油下肉丝，把肉丝滑散，炒到变色散开出锅</li><li>锅里剩余油爆香大蒜末、青椒，炒两分钟断生</li><li>肉丝下锅，加盐、味精调味</li></ol><p><img src="https://i0.hdslb.com/bfs/note/590b169eca1d4447cfb868a56dfe1384a2d3ad21.jpg@690w_!web-note.webp" alt="img"></p><h2 id="十三、白切肉">十三、白切肉</h2><p>04:00</p><ol><li>选择五花肉/梅花肉/松板肉/肋条肉（带点肥肉的）</li><li>焯水：一锅冷水，加入姜片、黄酒、肉，中小火慢慢加热，把水煮开，撇掉浮末</li><li>盖盖中火炖1小时</li><li>可以直接吃，或者配个蒜汁(蒜泥1勺、葱花1勺、豉油4勺）用生菜叶子包着吃</li></ol><p><img src="https://i0.hdslb.com/bfs/note/cb8eff27ec407ee50b68c146d4096c9232ade404.jpg@690w_!web-note.webp" alt="img"></p><h2 id="十四、红烧肉">十四、红烧肉</h2><p>05:00</p><ol><li><p>锅里加入冷水、黄酒、姜片、五花肉，焯水，水开把肉取出切大肉块</p></li><li><p>炒糖色</p><p>05:30</p><p>中火，锅里倒油，加入一大把冰糖或砂糖 炒2分钟</p></li><li><p>糖色到<strong>红棕色</strong>5分钟的时候，下入肉块（尽量颜色不要太深</p></li><li><p>往锅里加入一圈生抽、黄酒，炒0.5-2分钟</p></li><li><p>加水漫过食材，加入1-2颗八角、1根桂皮、3片香叶、3片姜，盖上盖子炖2小时（或者高压锅1小时）</p></li><li><p>开盖，大火收汁</p></li></ol><p><img src="https://i0.hdslb.com/bfs/note/262dd0885c50a77167c55fd1133ad77f41a38d71.jpg@690w_!web-note.webp" alt="img"></p><h2 id="十五、糖醋排骨">十五、糖醋排骨</h2><p>06:36</p><ol><li>一锅冷水，加入黄酒、姜片、排骨，中火烧开，把排骨取出晾干</li><li>起锅烧油，🔥中火，加一大把冰糖，颜色到<strong>金黄</strong>就可以下排骨（糖如果不够后面可以补一点）</li><li>加入3勺生抽、1勺黄酒、5勺陈醋、适量糖，漫过食材的水、1颗八角、1根桂皮、3片香叶、3片姜，盖盖炖50分钟</li><li>开盖，大火收汁</li><li>补一圈白醋增加酸度（或者用柠檬、青梅、山楂、菠萝等）</li></ol><p><img src="https://i0.hdslb.com/bfs/note/b2a7570248ea20e1c49cee3363ecdb824a637336.jpg@690w_!web-note.webp" alt="img"></p><h2 id="十六、鱼汤">十六、鱼汤</h2><p>09:02</p><ol><li>鲢鱼/鲫鱼，去掉🐟的淤血和黑膜（用钢丝球）</li><li>切2-4片姜片</li><li>锅里加入多油，煎鱼的一面到焦黄定型了再翻面【或者使劲翻炒至碎碎，炒酥了再加水炖10分钟，漏掉鱼渣】</li><li>加入滚烫开水（刚烧开的）</li><li>加入1勺米酒、姜片</li><li>保持沸腾状态，盖盖炖20分钟</li><li>出锅前，加入盐、白胡椒、葱花</li></ol><p><img src="https://i0.hdslb.com/bfs/note/add6703e39631c7fc35f34dedc6fedc95917423a.jpg@690w_!web-note.webp" alt="img"></p><h2 id="十七、香菇土豆炖鸡块">十七、香菇土豆炖鸡块</h2><p><img src="https://i0.hdslb.com/bfs/note/bf5ae5736abdf94850a328392ebda65eefe29a23.jpg@734w_!web-note.webp" alt="img"></p><p><img src="https://i0.hdslb.com/bfs/note/1def8a34854c6351f8fe99942dc35988ffea2555.jpg@734w_!web-note.webp" alt="img"></p><p><img src="https://i0.hdslb.com/bfs/note/cf8c9007886cb223a63c8f9ea3faf0bc93892644.jpg@734w_!web-note.webp" alt="img"></p><p>第1步，先准备两个鸡腿，把鸡腿清洗干净，剁成小块状，也可以直接让店家剁成小块，然后放进清水中加入葱姜，料酒，把鸡块儿焯水，然后捞出清洗干净备用。</p><p>第2步，锅中放油，等油热了之后，加入花椒，八角，辣椒炒出香味，再把鸡肉块放进去，充分的翻炒均匀，加入两勺生抽，一勺老抽，适量食盐，再加入一点点料酒，加入姜片和适量葱盖上盖子用大火煮开，煮开了之后再转中火炖10~15分钟。</p><p>第3步，准备一个土豆去皮，滚刀切块，胡萝卜也清洗干净，滚到切块儿，准备适量喜欢吃的丸子，也可以不用加。</p><p>第4步，然后把准备好的土豆，胡萝卜和丸子全都加进去炖煮，等煮熟煮透了，再用大火收汁，最后撒上适量的葱花或者是香菜，就可以出锅了。</p>]]></content>
      
      
      <categories>
          
          <category> 吃 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 家庭小灶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js逆向</title>
      <link href="/posts/e8768110.html"/>
      <url>/posts/e8768110.html</url>
      
        <content type="html"><![CDATA[<h1>js基础</h1><h2 id="js输出">js输出</h2><ul><li>使用window.alert()弹出警告框</li><li>使用document.write()方法将内容写到html文档中</li><li>使用innerHTML写入到html元素</li><li>使用console.log()写入到浏览器的控制台</li></ul><h2 id="正则表达式">正则表达式</h2><ul><li><strong>search()</strong> 方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并返回子串的起始位置。</li><li><strong>replace()</strong> 方法用于在字符串中用一些字符串替换另一些字符串，或替换一个与正则表达式匹配的子串</li></ul><h2 id="锁定变量">锁定变量</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250120150738692.png" alt="image-20250120150738692"></p><h2 id="异步">异步</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250121103407055.png" alt="image-20250121103407055"></p><h2 id="平坦流">平坦流</h2><p>打断分析流程</p><p>出现特征<code>warp 或者 u.prev = u.next</code></p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250121104826346.png" alt="image-20250121104826346"></p><p>里边的u.next()是下一次要执行的条件</p><h2 id="eval">eval</h2><p><code>eval</code> 是 JavaScript 中的一个内置函数，用于将字符串作为代码进行解析和执行。它的基本语法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(string);</span><br></pre></td></tr></table></figure><p>DiffCopyInsert</p><p>其中 <code>string</code> 是一个包含 JavaScript 代码的字符串。<code>eval</code> 会将这个字符串作为实际的 JavaScript 代码来执行，并返回执行结果。</p><ol><li><p><strong>基本用法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;console.log(&#x27;Hello, World!&#x27;);&quot;</span>);</span><br></pre></td></tr></table></figure><p>DiffCopyInsert</p><p>这段代码会输出 <code>Hello, World!</code></p></li></ol><h1>js调试</h1><h2 id="123456">123456</h2><p>123456的md5加密<strong>32位</strong></p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250118195541745.png" alt="image-20250118195541745"></p><p>四十位密文的一般为sha1加密</p><h2 id="控制台-搜索">控制台 搜索</h2><p>定位的位置比较准确，搜到的位置比较多，要自己进行筛选，容易搜不到</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250118195922787.png" alt="image-20250118195922787"></p><h2 id="DOM">DOM</h2><p>HTML DOM时间允许JavaScript在THML文档元素中注册不同事件处理程序，事件通常与函数结合使用，函数不会在事件发生前被执行</p><p>dom元素断点</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250120205234901.png" alt="image-20250120205234901"></p><h2 id="断点">断点</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250118205918124.png" alt="image-20250118205918124"></p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250118213753982.png" alt="image-20250118213753982"></p><p><strong>加密的流程大概就是 用户输入明文-&gt;经过了一些方法-&gt;加密函数-&gt;拼装封包-&gt;发包函数-&gt;浏览器的发包函数</strong></p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250120210720373.png" alt="image-20250120210720373"></p><h2 id="寻找合适事件js文件-dom事件">寻找合适事件js文件 dom事件</h2><p>定位的位置比较靠前</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250119125131755.png" alt="image-20250119125131755"></p><p>可以在这里抓包之后打开js</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250120204250207.png" alt="image-20250120204250207"></p><h2 id="XHR断点">XHR断点</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250119162050009.png" alt="image-20250119162050009"></p><p><strong>优点</strong>：定位的位置在发包函数，我们可以跟栈，<strong>缺点</strong>：只能用于XHR的数据包</p><h2 id="watch-变量监控">watch 变量监控</h2><h2 id="本地替换">本地替换</h2><p>本地替换就是使用本地的文件夹，将目标js文件复制到该文件夹并进行替换，用于打断点或者无限debugger</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250124200337388.png" alt="image-20250124200337388"></p><p><img src="C:/Users/%E4%BE%AF%E5%8D%93%E6%9E%97/AppData/Roaming/Typora/typora-user-images/image-20250124203447114.png" alt="image-20250124203447114"></p><h2 id="Fiddler">Fiddler</h2><p>Fiddler是一个抓包工具</p><p>那么既然浏览器可以抓包，那么为什么要用Fiddler呢？</p><p><strong>因为浏览器抓包抓不全，有些包如果同一个url返回一个200返回一个403，那么这时候浏览器为了自身效率，就会自动把这两个包删除，就是两个相同的url地址，返回两次数据，那么浏览器就会把第一次返回的删掉</strong></p><h2 id="XHR">XHR</h2><p>XHR全名HMLHttpRequest，大致和request相同，</p><h2 id="websocket">websocket</h2><p>webscoket是做一些实时弹幕，或者聊天室</p><h1>抓包</h1><h2 id="document">document</h2><p>如果是document包，那么拿着域名去elements找</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250120211847947.png" alt="image-20250120211847947"></p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250120212031190.png" alt="image-20250120212031190"></p><h2 id="jsonp">jsonp</h2><p>一般是全局搜索，或则元素搜索jsonp</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250120214545329.png" alt="image-20250120214545329"></p><h2 id="XHR-2">XHR</h2><p>xhr的直接找包里边的js，然后开始刷包调栈</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250120221527304.png" alt="image-20250120221527304"></p><p>问题，为什么我的断点，断不到东西啊，</p><p>另外调用栈还没试</p><h2 id="HOOK">HOOK</h2><h1>网络基础</h1><h2 id="curl">curl</h2><p>url是客户端的URL工具，使用在服务器之间传输数据的开源命令行工具和跨平台的库，包括用户代理，握手数据，端口等详细信息。</p><h2 id="ajax">ajax</h2><p>异步的javascript+xml，ajax不是新的编程语言，而是一种使用现有标准的新方法，ajax是与服务器交换数据并更新部分网页的艺术，在不重新加载整个页面对的情况下。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h1>SSL指纹部分（ja3指纹）</h1><p>如今几乎所有平台通信都是基于Https的协议，而无论基于什么工具去发送Https请求时，都需要基于TLS/SSL先建立两端安全的通信（握手），建立后再进行数据传输。</p><p>TLS的握手阶段，客户端会向服务端发送 Client Hello 数据包，在数据包内的JA3就是指纹信息（基于电脑的TLS版本+内置算法等计算出来的字符串），并且该值不会随着请求头修改、代理等发生变化。所以，某个网站的后台就会去读取TLS客户端的JA3指纹，如果是非正常指纹，禁止访问。</p><hr><p>TLS是一个兼容协议，它可以进行协议的升级与降级，支持兼容与不兼容模式</p><p>同一个浏览器，加密套件里面的内容是相同的，写死的</p><p><strong>ssl指纹验证就是把再用语言请求的爬虫的底层的ssl指纹更改为正确的浏览器不会识别为爬虫的指纹</strong></p><h1>混淆</h1><h2 id="控制流平坦化">控制流平坦化</h2><p>控制流平坦化技术会对原始代码的控制流结构进行重组，将代码中的各个基本块（一段顺序执行且没有分支，除了末尾可能有一个无条件跳转的代码片段）合并到一个大的块中，并引入一个状态变量和一个大型的多路分支（例如一个大的switch语句）来模拟原来的控制流。</p><h1>加密</h1><h2 id="RSA">RSA</h2><p>rsa加密常见标志：setpublickey方法，js实现加密可以用jsencrypt加密库</p><h2 id="AES">AES</h2><p>aes加密的搜索关键词有AES，mode，padding</p><h2 id="DES">DES</h2><p>DES加密的搜索关键词有DES，mode，padding</p><h2 id="SHA1">SHA1</h2><p>sha1的关键词就是sha1</p><h2 id="MD5">MD5</h2><p>md5加密搜索MD5即可</p><h2 id="bs64">bs64</h2><p>base64</p><h2 id="OB混淆">OB混淆</h2><p>OB 混淆是指将 JavaScript 代码中的变量名、函数名、字符串等替换为无意义的字符串，从而增加代码的保护性和防止代码的逆向分析。此外，它还可以在代码中添加死代码、无用的函数等，增加代码的复杂度和难以理解性，从而增加代码的保密性</p><h1>请求</h1><h2 id="session">session</h2><p>session在网络应用中称为“会话控制”，是服务器为了保存用户状态而创建的一个特殊的对象。简而言之，session就是一个对象，用于存储信息</p><p><strong>那么session有什么用呢？</strong></p><p>我们先来想一个问题，这个问题就是我们在游览购物网站时，我们并没有登录，但是我们任然可以将商品加入购物车，并且进行查看，当我们退出游览器后再打开游览器进行查看时，购物车中依然有我们选择的商品，这该怎么实现呢？</p><p>​    当然，我们可以使用cookie，但是cookie能存放大量数据吗？这时，我们就需要一种新的技术，Session。session是存储于服务器端的特殊对象，服务器会为每一个游览器(客户端)创建一个唯一的session。这个session是服务器端共享，每个游览器(客户端)独享的。我们可以在session存储数据，实现数据共享</p><p><strong>session里边可以储存键值对</strong></p><h3 id="session和cookie的比较">session和cookie的比较</h3><p>cookie保存在客户端，session保存在服务端<br>cookie作用于他所表示的path中(url中要包含path)，范围较小。session代表客户端和服务器的一次会话过程，web页面跳转时也可以共享数据，范围是本次会话，客户端关闭也不会消失。会持续到我们设置的session生命周期结束(默认30min)<br>我们使用session需要cookie的配合。cookie用来携带JSESSIONID<br>cookie存放的数据量较小，session可以存储更多的信息。<br>cookie由于存放在客服端，相对于session更不安全<br>由于session是存放于服务器的，当有很多客户端访问时，肯定会产生大量的session，这些session会对服务端的性能造成影响</p><h2 id="get和post关于request请求参数">get和post关于request请求参数</h2><h3 id="post">post</h3><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250127170055479.png" alt="image-20250127170055479"></p><h3 id="get">get</h3><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250127170115225.png" alt="image-20250127170115225"></p><h1>实例</h1><h2 id="数据加密">## 数据加密</h2><p>decrypt加密,直接去搜这个字母就行</p><h1>油猴hook</h1><p>首先下载油猴插件，进行一些初始配置</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250205111048824.png" alt="image-20250205111048824"></p><p>其中我们可以在里面加上一个参数</p><table><thead><tr><th>属性名</th><th>作用</th></tr></thead><tbody><tr><td><code>@run-at</code></td><td>脚本注入时机，这个比较重要，有时候是能不能hook到的关键，<code>document-start</code>：网页开始时；<code>document-body</code>：body出现时；<code>document-end</code>：载入时或者之后执行；<code>document-idle</code>：载入完成后执行，默认选项</td></tr><tr><td>@match</td><td>match里面是匹配网址，如果后面+*就是于该网址相关的所有路由</td></tr></tbody></table><p>编辑好hook代码之后，直接命名好，保存并开启就好啦！</p><p>就像这样</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250205112526598.png" alt="image-20250205112526598"></p><hr><h2 id="hook某宝cookies">hook某宝cookies</h2><p>比如说现在要hook一个宝的cookie</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250205112659319.png" alt="image-20250205112659319"></p><p>就拿这里的t来说，我们要hook这个t</p><p>那么我们就可以在油猴里写下面的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name         New Userscript</span></span><br><span class="line"><span class="comment">// @namespace    http://tampermonkey.net/</span></span><br><span class="line"><span class="comment">// @version      2025-02-05</span></span><br><span class="line"><span class="comment">// @description  try to take over the world!</span></span><br><span class="line"><span class="comment">// @author       You</span></span><br><span class="line"><span class="comment">// @match        https://www.taobao.com/*</span></span><br><span class="line"><span class="comment">// @icon         https://www.google.com/s2/favicons?sz=64&amp;domain=csdn.net</span></span><br><span class="line"><span class="comment">// @grant        none</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> cookie_cache = <span class="variable language_">document</span>.<span class="property">cookie</span>;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">document</span>, <span class="string">&#x27;cookie&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cookie_cache;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">val</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Setting cookie&#x27;</span>, val);</span><br><span class="line">            <span class="comment">// 填写cookie名</span></span><br><span class="line">            <span class="keyword">if</span> (val.<span class="title function_">indexOf</span>(<span class="string">&#x27;t&#x27;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">debugger</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> cookie = val.<span class="title function_">split</span>(<span class="string">&quot;;&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">var</span> ncookie = cookie.<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">var</span> cache = cookie_cache.<span class="title function_">split</span>(<span class="string">&quot;; &quot;</span>);</span><br><span class="line">            cache = cache.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a.<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>)[<span class="number">0</span>] === ncookie[<span class="number">0</span>]) &#123;</span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">return</span> cookie;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> a;</span><br><span class="line">            &#125;)</span><br><span class="line">            cookie_cache = cache.<span class="title function_">join</span>(<span class="string">&quot;; &quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">                cookie_cache += cookie + <span class="string">&quot;; &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> cookie_cache;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>保存并命名之后，在宝中启用这个插件</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250205112836366.png" alt="image-20250205112836366"></p><p>然后把这个t删除掉重新生成</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250205112926930.png" alt="image-20250205112926930"></p><p>最后就直接可以hook到啦</p><h2 id="hook模板">hook模板</h2><p>下面是一些hook的代码</p><h3 id="hook-headers">hook headers</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 头部参数 请求对象当中的 设胃请求头部参数</span></span><br><span class="line">   <span class="keyword">var</span> org = <span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">setRequestHeader</span>;</span><br><span class="line">   <span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">setRequestHeader</span> = <span class="keyword">function</span> (<span class="params">key, value</span>) &#123;</span><br><span class="line">       <span class="comment">// 关键字 在请求当中发现有键是Authorization 断点</span></span><br><span class="line">       <span class="keyword">if</span> (key == <span class="string">&#x27;Authorization&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">debugger</span>;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">return</span> org.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="hook过debugger">hook过debugger</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先保留原 constructor</span></span><br><span class="line"><span class="comment">// 1. 比如判断是否有该debugger词语，替换为同等长度的空格（避免判断长度）</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor_</span> = <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>;</span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果参数为 debugger，就返回空方法</span></span><br><span class="line">    <span class="keyword">if</span>(a == <span class="string">&quot;debugger&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>)&#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果参数不为 debugger，还是返回原方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">constructor_</span>(a);</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="number">2.</span> 如果是定时器的<span class="keyword">debugger</span>采用以下语句</span><br><span class="line"><span class="comment">// 先保留原定时器</span></span><br><span class="line"><span class="keyword">var</span> setInterval_ = <span class="built_in">setInterval</span></span><br><span class="line"><span class="built_in">setInterval</span> = <span class="keyword">function</span> (<span class="params">func, time</span>)&#123;</span><br><span class="line">    <span class="comment">// 如果时间参数为 0x7d0，就返回空方法</span></span><br><span class="line">    <span class="comment">// 当然也可以不判断，直接返回空，有很多种写法</span></span><br><span class="line">    <span class="keyword">if</span>(time == <span class="number">0x7d0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果时间参数不为 0x7d0，还是返回原方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">setInterval_</span>(func, time)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// eval(&quot;debugger;&quot;);</span></span><br></pre></td></tr></table></figure><h3 id="hook-json">hook json</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> stringify = <span class="title class_">JSON</span>.<span class="property">stringify</span>;</span><br><span class="line">    <span class="title class_">JSON</span>.<span class="property">stringify</span> = <span class="keyword">function</span>(<span class="params">params</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hook JSON.stringify ——&gt; &quot;</span>, params);</span><br><span class="line">        <span class="keyword">debugger</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">stringify</span>(params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="hook-eval">hook eval</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 保存原始方法</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">__cr_eval</span> = <span class="variable language_">window</span>.<span class="property">eval</span>;</span><br><span class="line">    <span class="comment">// 重写 eval</span></span><br><span class="line">    <span class="keyword">var</span> myeval = <span class="keyword">function</span>(<span class="params">src</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(src);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=============== eval end ===============&quot;</span>);</span><br><span class="line">        <span class="keyword">debugger</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">window</span>.<span class="title function_">__cr_eval</span>(src);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 屏蔽 JS 中对原生函数 native 属性的检测</span></span><br><span class="line">    <span class="keyword">var</span> _myeval = myeval.<span class="title function_">bind</span>(<span class="literal">null</span>);</span><br><span class="line">    _myeval.<span class="property">toString</span> = <span class="variable language_">window</span>.<span class="property">__cr_eval</span>.<span class="property">toString</span>;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">window</span>, <span class="string">&#x27;eval&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">value</span>: _myeval</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>这个专栏主要写一些我平时对于js逆向的一些见解，如果觉得文章对你有帮助的话还请点赞+订阅，很高兴能帮到你，我会继续努力！</p>]]></content>
      
      
      <categories>
          
          <category> js逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<ol><li><p>我开始用笔墨，蘸取脑海中的世界，染在纸上</p></li><li><p>战争即和平 自由即奴役 无知即力量。-《1984》</p></li><li><p>公共舆论在多大程度上是被特定机制生产出来的限期商品</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python期末</title>
      <link href="/posts/10fc7804.html"/>
      <url>/posts/10fc7804.html</url>
      
        <content type="html"><![CDATA[<h1>用户图形界面-工资计算器</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">    w = <span class="built_in">int</span>(e1.get()) + <span class="built_in">int</span>(e2.get()) - <span class="built_in">int</span>(e3.get())</span><br><span class="line">    wage.insert(<span class="number">0</span>,w)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root = Tk()</span><br><span class="line">root.title(<span class="string">&quot;工资计算器&quot;</span>)</span><br><span class="line">Label(root, text=<span class="string">&quot;每月基本工资：&quot;</span>).pack()</span><br><span class="line">e1 = Entry(root)</span><br><span class="line">e1.pack()</span><br><span class="line">Label(root, text=<span class="string">&quot;补助工资：&quot;</span>).pack()</span><br><span class="line">e2 = Entry(root)</span><br><span class="line">e2.pack()</span><br><span class="line">Label(root, text=<span class="string">&quot;考勤扣款：&quot;</span>).pack()</span><br><span class="line">e3 = Entry(root)</span><br><span class="line">e3.pack()</span><br><span class="line">Button(root, text=<span class="string">&quot;计算&quot;</span>, command=f).pack()</span><br><span class="line">Label(root, text=<span class="string">&quot;实发工资：&quot;</span>).pack()</span><br><span class="line">wage=Entry(root)</span><br><span class="line">wage.pack()</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><ol><li>使用tk方法创建一个窗口类型root，并且给该窗口命名为工资计算器</li><li>用Label标签创建每月基本工资，补助工资，考勤扣款这几个标签，pack方法是将这几个标签放到窗口里</li><li>用Entry方法在root里创建输入框，并且将输入框创建在窗口里边</li><li>用Button方法创建一个按钮，与f方法绑定</li><li>root.mainloop()显示窗口</li></ol><h1>政府工作报告-词云图</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#2、读取文本并分词</span></span><br><span class="line">text = <span class="built_in">open</span>(<span class="string">&quot;2023政府工作报告.txt&quot;</span>,<span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line">ss=<span class="string">&quot; &quot;</span>.join(jieba.lcut(text))</span><br><span class="line">mask=np.array(Image.<span class="built_in">open</span>(<span class="string">&quot;ChinaMap.png&quot;</span>))</span><br><span class="line"><span class="comment">#3、配置词云参数，生成词云</span></span><br><span class="line">wc = WordCloud(</span><br><span class="line">    font_path=<span class="string">&quot;fonts/msyh.ttc&quot;</span>,</span><br><span class="line">    background_color = <span class="string">&quot;white&quot;</span>,</span><br><span class="line">    max_words=<span class="number">300</span>,</span><br><span class="line">    mask =mask,</span><br><span class="line">    max_font_size = <span class="number">200</span>,height=<span class="number">400</span>,width=<span class="number">854</span>,</span><br><span class="line">stopwords=&#123;<span class="string">&quot;的&quot;</span>, <span class="string">&quot;了&quot;</span>, <span class="string">&quot;是&quot;</span>, <span class="string">&quot;在&quot;</span>, <span class="string">&quot;和&quot;</span>, <span class="string">&quot;有&quot;</span>, <span class="string">&quot;一个&quot;</span>, <span class="string">&quot;与&quot;</span>, <span class="string">&quot;我&quot;</span>, <span class="string">&quot;我们&quot;</span>, <span class="string">&quot;你&quot;</span>, <span class="string">&quot;他&quot;</span>, <span class="string">&quot;她&quot;</span>, <span class="string">&quot;它&quot;</span>, <span class="string">&quot;这个&quot;</span>, <span class="string">&quot;那个&quot;</span>, <span class="string">&quot;对于&quot;</span>,</span><br><span class="line">            <span class="string">&quot;因为&quot;</span>, <span class="string">&quot;所以&quot;</span>, <span class="string">&quot;如果&quot;</span>, <span class="string">&quot;如何&quot;</span>, <span class="string">&quot;这样&quot;</span>, <span class="string">&quot;但&quot;</span>, <span class="string">&quot;只有&quot;</span>, <span class="string">&quot;而&quot;</span>, <span class="string">&quot;也&quot;</span>, <span class="string">&quot;更加&quot;</span>, <span class="string">&quot;去&quot;</span>, <span class="string">&quot;将&quot;</span>, <span class="string">&quot;可以&quot;</span>, <span class="string">&quot;大&quot;</span>, <span class="string">&quot;小&quot;</span>, <span class="string">&quot;非常&quot;</span>,</span><br><span class="line">            <span class="string">&quot;不仅&quot;</span>, <span class="string">&quot;更&quot;</span>, <span class="string">&quot;是的&quot;</span>, <span class="string">&quot;以及&quot;</span>, <span class="string">&quot;而且&quot;</span>, <span class="string">&quot;关于&quot;</span>, <span class="string">&quot;当&quot;</span>, <span class="string">&quot;能&quot;</span>, <span class="string">&quot;这些&quot;</span>, <span class="string">&quot;这些&quot;</span>, <span class="string">&quot;自己&quot;</span>, <span class="string">&quot;需要&quot;</span>, <span class="string">&quot;当时&quot;</span>, <span class="string">&quot;某些&quot;</span>, <span class="string">&quot;任何&quot;</span>,</span><br><span class="line">            <span class="string">&quot;本&quot;</span>, <span class="string">&quot;此&quot;</span>, <span class="string">&quot;更&quot;</span>, <span class="string">&quot;过&quot;</span>, <span class="string">&quot;一些&quot;</span>, <span class="string">&quot;同样&quot;</span>, <span class="string">&quot;两&quot;</span>, <span class="string">&quot;三&quot;</span>, <span class="string">&quot;四&quot;</span>, <span class="string">&quot;五&quot;</span>, <span class="string">&quot;十&quot;</span>, <span class="string">&quot;不&quot;</span>, <span class="string">&quot;多&quot;</span>, <span class="string">&quot;少&quot;</span>, <span class="string">&quot;起来&quot;</span>, <span class="string">&quot;之前&quot;</span>, <span class="string">&quot;之后&quot;</span>&#125;,</span><br><span class="line">colormap=<span class="string">&quot;Reds&quot;</span>,contour_width=<span class="number">8</span>,contour_color=<span class="string">&quot;red&quot;</span>)</span><br><span class="line">wc.generate(ss)</span><br><span class="line"><span class="comment">#4、生成图片并显示</span></span><br><span class="line">wc.to_image( )</span><br><span class="line">wc.to_file(<span class="string">&quot;C:/Users/Administrator/Desktop/new.png&quot;</span>)</span><br></pre></td></tr></table></figure><ol><li>首先，导包</li><li>打开政府工作报告文件，并且读取文本存入text</li><li>使用jieba分词，生成字符串并使用空格连接，存入ss</li><li>mask是使用该图像作为模板</li><li>创建一个词云示例wc，使用Wordcloud方法，并且定义<code>font,background_color,max_words,mask,stopwords</code></li><li>colormap为红色映射，后面两个设置词云的宽度和颜色</li><li><code>wc.generate(ss)</code>生成词云</li><li>展示图像并保存</li></ol><h1>七日天气-爬虫</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#日期、天气如何、温度、风向、风速</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> xlsxwriter</span><br><span class="line"><span class="comment"># 请求网页</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">page_request</span>(<span class="params">url, ua</span>):</span><br><span class="line">    response = requests.get(url=url, headers=ua)</span><br><span class="line">    html = response.content.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> html</span><br><span class="line"><span class="comment"># 解析网页</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">page_parse</span>(<span class="params">html</span>):</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    date = soup.select(<span class="string">&#x27;#\\37 d &gt; ul &gt; li&gt; h1&#x27;</span>)</span><br><span class="line">    wendu_high = soup.select(<span class="string">&#x27;#\\37 d &gt; ul &gt; li &gt; p.tem &gt; span&#x27;</span>)</span><br><span class="line">    wendu_low = soup.select(<span class="string">&#x27;#\\37 d &gt; ul &gt; li &gt; p.tem &gt; i&#x27;</span>)</span><br><span class="line">    tianqi = soup.select(<span class="string">&#x27;#\\37 d &gt; ul &gt; li &gt; p.wea&#x27;</span>)</span><br><span class="line">    fenxiang = soup.select(<span class="string">&#x27;#\\37 d &gt; ul &gt; li &gt; p.win &gt; em &gt; span&#x27;</span>)</span><br><span class="line">    fengsu = soup.select(<span class="string">&#x27;#\\37 d &gt; ul &gt; li &gt; p.win &gt; i&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    workbook= xlsxwriter.Workbook(<span class="string">&#x27;tianqi.xlsx&#x27;</span>)</span><br><span class="line">    <span class="comment">#添加工作表</span></span><br><span class="line">    worksheet=workbook.add_worksheet(<span class="string">&#x27;data&#x27;</span>)</span><br><span class="line">    headers=[<span class="string">&#x27;日期&#x27;</span>,<span class="string">&#x27;温度&#x27;</span>,<span class="string">&#x27;天气&#x27;</span>,<span class="string">&#x27;风向&#x27;</span>,<span class="string">&#x27;风速&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> col_num,headers <span class="keyword">in</span> <span class="built_in">enumerate</span>(headers):</span><br><span class="line">        worksheet.write(<span class="number">0</span>,col_num,headers)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        <span class="built_in">print</span>(date[i].get_text()+<span class="string">&#x27;\t&#x27;</span>+wendu_low[i].get_text()+<span class="string">&#x27;\t&#x27;</span>+wendu_high[i].get_text()+<span class="string">&#x27;\t&#x27;</span>+tianqi[i].get_text()+<span class="string">&#x27;\t&#x27;</span>+fenxiang[i].get_text()+<span class="string">&#x27;\t&#x27;</span>+fengsu[i].get_text())</span><br><span class="line">        data=[date[i].get_text(),wendu_low[i].get_text()+<span class="string">&#x27;-&#x27;</span>+wendu_high[i].get_text(),tianqi[i].get_text(),fenxiang[i].get_text(),fengsu[i].get_text()]</span><br><span class="line">        <span class="keyword">for</span> col_num,value <span class="keyword">in</span> <span class="built_in">enumerate</span>(data):</span><br><span class="line">            worksheet.write(i+<span class="number">1</span>,col_num,value)</span><br><span class="line">    workbook.close()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;**************开始爬取七日天气**************&#x27;</span>)</span><br><span class="line">    ua = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4421.5 Safari/537.36&#x27;</span>&#125;</span><br><span class="line">    <span class="comment"># 豆瓣电影Top250每页有25部电影，start就是每页电影的开头</span></span><br><span class="line">    url = <span class="string">&quot;https://www.weather.com.cn/weather/101180101.shtml&quot;</span></span><br><span class="line">    html = page_request(url=url, ua=ua)</span><br><span class="line">    page_parse(html=html)</span><br><span class="line">    <span class="comment">#print(&#x27;**************爬取完成**************&#x27;)</span></span><br></pre></td></tr></table></figure><p>分成三个部分</p><blockquote><ol><li>对网页的请求</li><li>解析网页，返回html</li><li>对html进行处理</li></ol></blockquote><p>详细叙述第三部分</p><ol><li><p><code>page_prase方法</code>，首先<code>soup = BeautifulSoup(html, 'lxml')</code>将处理后的html保存在soup里边</p></li><li><p>然后使用<code>soup.select</code>方法将天气，最高最低温度，风速，风向，日期都创建变量进行保存</p></li><li><p>这一部分添加工作表并进行保存</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">workbook= xlsxwriter.Workbook(<span class="string">&#x27;tianqi.xlsx&#x27;</span>)</span><br><span class="line">    <span class="comment">#添加工作表</span></span><br><span class="line">worksheet=workbook.add_worksheet(<span class="string">&#x27;data&#x27;</span>)</span><br><span class="line">headers=[<span class="string">&#x27;日期&#x27;</span>,<span class="string">&#x27;温度&#x27;</span>,<span class="string">&#x27;天气&#x27;</span>,<span class="string">&#x27;风向&#x27;</span>,<span class="string">&#x27;风速&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> col_num,headers <span class="keyword">in</span> <span class="built_in">enumerate</span>(headers):</span><br><span class="line">    worksheet.write(<span class="number">0</span>,col_num,headers)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">                  <span class="built_in">print</span>(date[i].get_text()+<span class="string">&#x27;\t&#x27;</span>+wendu_low[i].get_text()+<span class="string">&#x27;\t&#x27;</span>+wendu_high[i].get_text()+<span class="string">&#x27;\t&#x27;</span>+tianqi[i].get_text()+<span class="string">&#x27;\t&#x27;</span>+fenxiang[i].get_text()+<span class="string">&#x27;\t&#x27;</span>+fengsu[i].get_text())</span><br><span class="line">        data=[date[i].get_text(),wendu_low[i].get_text()+<span class="string">&#x27;-&#x27;</span>+wendu_high[i].get_text(),tianqi[i].get_text(),fenxiang[i].get_text(),fengsu[i].get_text()]</span><br><span class="line">        <span class="keyword">for</span> col_num,value <span class="keyword">in</span> <span class="built_in">enumerate</span>(data):</span><br><span class="line">            worksheet.write(i+<span class="number">1</span>,col_num,value)</span><br></pre></td></tr></table></figure></li><li><p>最后workbook.close()将该工作表进行保存</p></li></ol><h1>创建一个person类，输出hello</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">        <span class="variable language_">self</span>.age = age</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_hello</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Hello, my name is <span class="subst">&#123;self.name&#125;</span> and I am <span class="subst">&#123;self.age&#125;</span> years old.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    person1 = Person(<span class="string">&quot;Alice&quot;</span>, <span class="number">25</span>)</span><br><span class="line">    person1.say_hello()</span><br></pre></td></tr></table></figure><h1>整数列表按奇偶排序，并且从小到大</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">key</span>(<span class="params">list1,list2</span>):</span><br><span class="line">    list3=[]</span><br><span class="line">    list4=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">        <span class="keyword">if</span> i%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">            list3.append(i)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> list2:</span><br><span class="line">        <span class="keyword">if</span> i%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">            list3.append(i)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">        <span class="keyword">if</span> i%<span class="number">2</span>!=<span class="number">0</span>:</span><br><span class="line">            list4.append(i)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> list2:</span><br><span class="line">        <span class="keyword">if</span> i%<span class="number">2</span>!=<span class="number">0</span>:</span><br><span class="line">            list4.append(i)</span><br><span class="line">    list3=<span class="built_in">sorted</span>(list3)</span><br><span class="line">    list4=<span class="built_in">sorted</span>(list4)</span><br><span class="line">    <span class="built_in">print</span>(list4+list3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    list1=[<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">22</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">20</span>,<span class="number">25</span>,<span class="number">24</span>,<span class="number">99</span>]</span><br><span class="line">    list2=[<span class="number">111</span>,<span class="number">112</span>,<span class="number">113</span>,<span class="number">114</span>,<span class="number">115</span>,<span class="number">116</span>,<span class="number">117</span>]</span><br><span class="line">    key(list1,list2)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>列表和元组的区别</h1><p>列表（<code>list</code>）和元组（<code>tuple</code>）是 Python 中两种常用的数据结构，它们之间有以下几个主要区别：</p><h3 id="1-可变性">1. <strong>可变性</strong></h3><ul><li><p><strong>列表（List）</strong><br>列表是可变的，可以修改元素的值、添加元素或删除元素。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python复制代码lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">lst[<span class="number">0</span>] = <span class="number">10</span>  <span class="comment"># 修改元素</span></span><br><span class="line">lst.append(<span class="number">4</span>)  <span class="comment"># 添加元素</span></span><br><span class="line">lst.remove(<span class="number">2</span>)  <span class="comment"># 删除元素</span></span><br><span class="line"><span class="built_in">print</span>(lst)  <span class="comment"># [10, 3, 4]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>元组（Tuple）</strong><br>元组是不可变的，一旦创建，不能修改其元素或结构。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python复制代码tpl = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># tpl[0] = 10  # 会报错：TypeError: &#x27;tuple&#x27; object does not support item assignment</span></span><br><span class="line"><span class="built_in">print</span>(tpl)  <span class="comment"># (1, 2, 3)</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-性能">2. <strong>性能</strong></h3><ul><li>元组因为不可变，所以在创建和访问时的性能通常比列表更高。</li><li>如果需要处理大量不变的数据，使用元组更高效。</li></ul><h3 id="3-用途">3. <strong>用途</strong></h3><ul><li>列表更适合需要频繁修改数据的场景。</li><li>元组更适合表示不可变的数据（如坐标、数据库记录）或作为函数返回多个值的容器。</li></ul><h3 id="4-语法">4. <strong>语法</strong></h3><ul><li><p>列表使用方括号</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[]</span><br></pre></td></tr></table></figure><p>表示。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">复制代码</span><br><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure></li><li><p>元组使用圆括号</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">()</span><br></pre></td></tr></table></figure><p>表示。如果元组只有一个元素，需加逗号。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python复制代码tpl = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">single_tpl = (<span class="number">1</span>,)  <span class="comment"># 单元素元组</span></span><br></pre></td></tr></table></figure></li></ul><h1>异常+ZeroDivisionError</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#解释python中的异常处理机制</span></span><br><span class="line"><span class="comment"># 1. 异常处理机制</span></span><br><span class="line"><span class="comment"># 在程序运行的过程中，可能会出现各种各样的异常，比如输入错误、文件操作失败等等。如果不对这些异常进行处理，程序将会终止运行，并给出错误提示。</span></span><br><span class="line"><span class="comment"># 为了避免程序终止运行，我们需要对可能出现的异常进行处理，并给出合适的提示信息。</span></span><br><span class="line"><span class="comment"># Python中提供了try...except...finally语句来处理异常。</span></span><br><span class="line"><span class="comment"># try语句用来包含可能出现异常的语句，except语句用来处理异常，finally语句用来执行一些清理工作，无论是否出现异常都会执行。</span></span><br><span class="line"><span class="comment">#演示代码如何捕获并处理ZeroDivisionError异常：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a = <span class="number">1</span> / <span class="number">0</span></span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;division by zero!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行上述代码，将会输出&quot;division by zero!&quot;，说明程序正常运行，并捕获到了ZeroDivisionError异常。</span></span><br></pre></td></tr></table></figure><h1>画图</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> gridspec</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义函数 y = e^(2x) * cos(3πx + π/3)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> np.exp(<span class="number">2</span> * x) * np.cos(<span class="number">3</span> * np.pi * x + np.pi / <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 x 的范围</span></span><br><span class="line">x_range = np.linspace(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建图形，设置自定义布局</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">8</span>, <span class="number">12</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 gridspec 设置布局</span></span><br><span class="line">gs = gridspec.GridSpec(<span class="number">2</span>, <span class="number">1</span>, height_ratios=[<span class="number">2</span>, <span class="number">1</span>])  <span class="comment"># 上方大图占2/3, 下方小图占1/3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建子图1：步长 0.2</span></span><br><span class="line">ax1 = plt.subplot(gs[<span class="number">0</span>])  <span class="comment"># 上面的大图</span></span><br><span class="line">x1 = np.arange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">0.2</span>)</span><br><span class="line">y1 = f(x1)</span><br><span class="line">ax1.plot(x1, y1, label=<span class="string">&#x27;Step = 0.2&#x27;</span>, color=<span class="string">&#x27;b&#x27;</span>, linestyle=<span class="string">&#x27;-&#x27;</span>, marker=<span class="string">&#x27;o&#x27;</span>)</span><br><span class="line">ax1.set_title(<span class="string">&#x27;Step Size = 0.2&#x27;</span>)</span><br><span class="line">ax1.set_xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">ax1.set_ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">ax1.grid(<span class="literal">True</span>)</span><br><span class="line">ax1.legend()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建子图2和子图3：分别为步长 0.5 和 0.7，放在底部</span></span><br><span class="line">gs2 = gridspec.GridSpecFromSubplotSpec(<span class="number">1</span>, <span class="number">2</span>, subplot_spec=gs[<span class="number">1</span>])  <span class="comment"># 在底部创建两个子图</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 子图2：步长 0.5</span></span><br><span class="line">ax2 = plt.subplot(gs2[<span class="number">0</span>])</span><br><span class="line">x2 = np.arange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">0.5</span>)</span><br><span class="line">y2 = f(x2)</span><br><span class="line">ax2.plot(x2, y2, label=<span class="string">&#x27;Step = 0.5&#x27;</span>, color=<span class="string">&#x27;g&#x27;</span>, linestyle=<span class="string">&#x27;--&#x27;</span>, marker=<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">ax2.set_title(<span class="string">&#x27;Step Size = 0.5&#x27;</span>)</span><br><span class="line">ax2.set_xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">ax2.set_ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">ax2.grid(<span class="literal">True</span>)</span><br><span class="line">ax2.legend()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 步长 0.7</span></span><br><span class="line">ax3 = plt.subplot(gs2[<span class="number">1</span>])</span><br><span class="line">x3 = np.arange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">0.7</span>)</span><br><span class="line">y3 = f(x3)</span><br><span class="line">ax3.plot(x3, y3, label=<span class="string">&#x27;Step = 0.7&#x27;</span>, color=<span class="string">&#x27;r&#x27;</span>, linestyle=<span class="string">&#x27;-.&#x27;</span>, marker=<span class="string">&#x27;s&#x27;</span>)</span><br><span class="line">ax3.set_title(<span class="string">&#x27;Step Size = 0.7&#x27;</span>)</span><br><span class="line">ax3.set_xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">ax3.set_ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">ax3.grid(<span class="literal">True</span>)</span><br><span class="line">ax3.legend()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调整布局</span></span><br><span class="line">plt.tight_layout()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示图形</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1>数据分析</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">df=pd.read_excel(<span class="string">&#x27;sales.xlsx&#x27;</span>,parse_dates=[<span class="string">&#x27;date&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df.head())</span><br><span class="line"><span class="comment"># 按店铺分组并计算销售和利润的总和</span></span><br><span class="line">store_sales=df.groupby(<span class="string">&quot;store&quot;</span>)[[<span class="string">&quot;sales&quot;</span>,<span class="string">&quot;profit&quot;</span>]].<span class="built_in">sum</span>()</span><br><span class="line"><span class="built_in">print</span>(store_sales)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制柱状图</span></span><br><span class="line"><span class="comment"># 筛选出销售额大于200的记录</span></span><br><span class="line">high_sales=df[df[<span class="string">&quot;sales&quot;</span>]&gt;<span class="number">200</span>]</span><br><span class="line"><span class="built_in">print</span>(high_sales)</span><br><span class="line"><span class="comment"># 按类别分组并计算利润的平均值</span></span><br><span class="line">category_profit=df.groupby(<span class="string">&quot;category&quot;</span>)[<span class="string">&quot;profit&quot;</span>].mean()</span><br><span class="line"><span class="built_in">print</span>(category_profit)</span><br><span class="line"><span class="comment"># 绘制各店铺总销售额的柱状图</span></span><br><span class="line">store_sales[<span class="string">&quot;sales&quot;</span>].plot(kind=<span class="string">&quot;bar&quot;</span>,figsize=(<span class="number">10</span>,<span class="number">6</span>),color=<span class="string">&quot;skyblue&quot;</span>)</span><br><span class="line">plt.title(<span class="string">&quot;Total Sales by Store&quot;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;Store&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Total Sales&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>读取数据</li><li>计算销售和利润的总和</li><li>绘制柱状图，筛选出销售额大于200的记录</li><li>计算</li><li>绘制</li></ol>]]></content>
      
      
      <categories>
          
          <category> 期末 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高等数学</title>
      <link href="/posts/93e4730e.html"/>
      <url>/posts/93e4730e.html</url>
      
        <content type="html"><![CDATA[<h1>求导</h1><p><img src="https://files.catbox.moe/tr3pzu.jpg" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> 考研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>考研知识点</title>
      <link href="/posts/e5935d82.html"/>
      <url>/posts/e5935d82.html</url>
      
        <content type="html"><![CDATA[<h1>赋分制是个什么东西</h1><p>赋分制的核心是根据考生成绩进行等级划分，并按照等级赋予相应的分数。这一制度的实施，旨在解决传统高考中不同科目之间分数不可比的问题，使不同科目之间的分数具有更强的可比性。</p><h1>考研你都需要知道些什么</h1><p>计算机学科专业基础综合（408）试卷满分150分；考试时间180分钟；</p><p>试卷内容结构：</p><p>数据结构45分，计算机组成原理45分，操作系统35分，<a href="https://zhida.zhihu.com/search?content_id=104724908&amp;content_type=Article&amp;match_order=1&amp;q=%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C&amp;zhida_source=entity">计算机网络</a>25分；</p><p>试卷题型结构：单项选择题，80分（40小题，每小题2分）；综合题，70分；</p>]]></content>
      
      
      <categories>
          
          <category> 考研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>概率论数理统计</title>
      <link href="/posts/7024e655.html"/>
      <url>/posts/7024e655.html</url>
      
        <content type="html"><![CDATA[<h1>随机变量的数字特征</h1><p><img src="https://files.catbox.moe/r0u0gr.jpg" alt=""></p><p><img src="https://files.catbox.moe/mrt3b2.jpg" alt=""></p><h1>数理统计三大分布</h1><p>三大分布之间是一个相关的关系</p><p><img src="https://files.catbox.moe/lc2gn9.png" alt=""></p><h2 id="卡方分布">卡方分布</h2><p><strong>n个标准正态分布的平方和</strong></p><p><img src="https://files.catbox.moe/18hrvv.png" alt=""></p><h2 id="t分布">t分布</h2><p><img src="https://files.catbox.moe/j81xcc.png" alt=""></p><h1>参数估计</h1><h2 id="置信区间">置信区间</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/7cf5f08d5b6acbe7a686a06a9c76081.png" alt="7cf5f08d5b6acbe7a686a06a9c76081"></p><h2 id="假设检验">假设检验</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/610b244ca831f1852e693cb9ffd2a36.png" alt="610b244ca831f1852e693cb9ffd2a36"></p><h2 id="矩估计">矩估计</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/6dfc32738db1e09a19eb2dfad493194.png" alt="6dfc32738db1e09a19eb2dfad493194"></p>]]></content>
      
      
      <categories>
          
          <category> 考研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概率论数理统计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高三数学错题本</title>
      <link href="/posts/c2dc6051.html"/>
      <url>/posts/c2dc6051.html</url>
      
        <content type="html"><![CDATA[<h1>知识点</h1><h3 id="三角函数">三角函数</h3><p><img src="https://files.catbox.moe/f2p3c4.png" alt=""></p><h1>错题本</h1><h2 id="填空-选择题">填空+选择题</h2><h2 id="大题">大题</h2><h3 id="三角函数-2">三角函数</h3><h4 id="根据向量比例得出线段长度关系">根据向量比例得出线段长度关系</h4><p><img src="https://files.catbox.moe/ixwlqm.jpg" alt=""></p><p><img src="https://files.catbox.moe/ygwk9g.jpg" alt=""></p><p><img src="https://files.catbox.moe/czakvw.jpg" alt=""></p><h4 id="给出一边求周长，另外两边和通过余弦定理">给出一边求周长，另外两边和通过余弦定理</h4><p><img src="https://files.catbox.moe/o52mhx.png" alt=""></p><p><img src="https://files.catbox.moe/unzhen.png" alt=""></p><h4 id="辅助角公式-不同三角形中同一个角度三角函数求边长">辅助角公式+不同三角形中同一个角度三角函数求边长</h4><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20241227222608837.png" alt="image-20241227222608837"></p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/6b25ad20f867d84a738861451c52e7e.png" alt="6b25ad20f867d84a738861451c52e7e"></p><h4 id="角平分线求得边的关系">角平分线求得边的关系</h4><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20241228170112895.png" alt="image-20241228170112895"></p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/Screenshot_2024_1228_165938.png" alt="Screenshot_2024_1228_165938"></p><h3 id="导数">导数</h3><h3 id="空间立体几何">空间立体几何</h3><h3 id="面面平行作垂直辅助线">面面平行作垂直辅助线</h3><p><img src="https://files.catbox.moe/yistkr.jpg" alt=""></p><p><img src="https://files.catbox.moe/952eq6.jpg" alt=""></p><h3 id="概率问题">概率问题</h3>]]></content>
      
      
      <categories>
          
          <category> 高中数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 错题本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>向日葵下的内网穿透</title>
      <link href="/posts/c4fd97f3.html"/>
      <url>/posts/c4fd97f3.html</url>
      
        <content type="html"><![CDATA[<p>这里首先默认你使用向日葵进行远程控制，那么当我们购买了向日葵的个人域名访问服务之后，在校园内网下的计算机仍然不能通过域名相互访问，校园网内部使用校园内网，无法通过外网进行控制，那么此时我们需要进行一个端口映射</p><h2 id="什么是内网穿透">什么是内网穿透</h2><p>内网，就是在公司或者家庭内部，建立的局域网络或者是办公网络，可以实现多台电脑之间的资源共享，包括设备、资料、数据等。而外网则是通过一个网关与其它的网络系统连接，相对于内网而言，这种网络系统称之为外部网络，常见的就是我们日常使用的互联网。</p><p>一般而言，在没有固定公网IP的情况下，外网设备无法直接访问内网设备。而内网穿透技术，顾名思义就是能让外网的设备找到处于内网的设备，从而实现数据通信。</p><h2 id="内网穿透的原理">内网穿透的原理</h2><p>内网穿透，又称为NAT穿透。NAT背后的设备，它们的主要特点是 ，可以访问外网，但不能被外网设备有效访问。基于这一特点，NAT穿透技术是让NAT背后的设备，先访问指定的外网服务器，由指定的外网服务器搭建桥梁，打通内、外网设备的访问通道，实现外网设备访问到内网设备。</p><p>该技术除了可以访问隐藏在NAT后的设备，同样可以穿透防火墙。这是因为防火墙一般只拦截了入站没有拦截出站，所以也可以让防火墙内的设备对外提供服务。</p><p>由于内网设备并不是与外网设备直接相连，所以在安全性上是毋庸置疑的，内网穿透可以说是安全与效率兼得。</p><h2 id="如何实现内网穿透">如何实现内网穿透</h2><p>我们可以安装<a href="https://hsk.oray.com/">花生壳</a><a href="https://hsk.oray.com/">内网穿透软件</a>，在软件上添加<a href="https://hsk.oray.com/">映射</a>时，配置被访问内网设备的相关信息 ，以及选择用作外网访问该映射的<a href="https://domain.oray.com/">域名</a>。当映射诊断信息提示连接成功时，即可实现内网穿透。</p><p>利用花生壳的内网穿透技术，外网的设备通过访问固定域名，连接花生壳服务器所搭建的通道，顺畅地与内网设备进行数据通信。</p><hr><ol><li><p>安装花生壳内网穿透</p></li><li><p>添加自定义映射</p><p><img src="https://public-cdn.oray.com/help/aa92d4d62a85478e2ea15e55edded457" alt="img"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 远程控制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 远程控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客练习赛131</title>
      <link href="/posts/5164b3fe.html"/>
      <url>/posts/5164b3fe.html</url>
      
        <content type="html"><![CDATA[<h1>小H学语文</h1><p>第一题本来想直接用大数组映射排名输出，这样也对</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">cmp</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>,res=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">200010</span>];</span><br><span class="line">    <span class="type">int</span> arr1[<span class="number">1000010</span>];</span><br><span class="line">    <span class="type">int</span> arr2[<span class="number">200010</span>];</span><br><span class="line">    <span class="comment">//意思就是需要长度去映射位置</span></span><br><span class="line">    <span class="comment">//首先需要对长度进行排序处理</span></span><br><span class="line">    <span class="comment">//挑出来前几个是最合适的选择</span></span><br><span class="line">    <span class="comment">//按照原来的次序输出这些长度</span></span><br><span class="line">    <span class="comment">//为什么结构体无法处理这个东西，因为首先对结构体排序，然后找出最优个数，但是在输出的时候如果按照原来的顺序，你没办法确定是</span></span><br><span class="line">    <span class="comment">//那四个要输出，除非你再开一个变量储存每个长度的排名</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//排序后直接输出序号</span></span><br><span class="line">    <span class="type">int</span> n;<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)arr2[i]=arr[i];</span><br><span class="line">    sort(arr2+<span class="number">1</span>,arr2+n+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)arr1[arr2[i]]=i;</span><br><span class="line">    <span class="comment">//前提就是len与排名绑定</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sum&lt;arr1[arr[i]]*arr1[arr[i]]*arr[i])&#123;</span><br><span class="line">            sum=arr1[arr[i]]*arr1[arr[i]]*arr[i];</span><br><span class="line">            res=arr1[arr[i]];<span class="comment">//arr1是排名</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr1[arr[i]]&lt;=res)<span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用pair&lt;int,int&gt;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">cmp</span><span class="params">(<span class="built_in">pair</span>&lt;<span class="type">int</span>,<span class="type">int</span>&gt;a,<span class="built_in">pair</span>&lt;<span class="type">int</span>,<span class="type">int</span>&gt;b)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.first&gt;b.first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pair</span>&lt;<span class="type">int</span>,<span class="type">int</span>&gt;arr[<span class="number">200010</span>];</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>,res=<span class="number">0</span>;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> n;<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;arr[i].first;</span><br><span class="line">        arr[i].second=i;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(arr+<span class="number">1</span>,arr+n+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i*i*arr[i].first&gt;sum)&#123;</span><br><span class="line">            sum=i*i*arr[i].first;</span><br><span class="line">            res=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> shix[<span class="number">200010</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=res;i++)&#123;</span><br><span class="line">        shix[i]=arr[i].second;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(shix+<span class="number">1</span>,shix+res+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=res;i++)<span class="built_in">cout</span>&lt;&lt;shix[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实这一道题的疑问点我给混淆了，只需要把这个数组跟下标绑定之后，把这几个的下标正常输出即可，如果要求有序的话就存进一个数组中，然后直接排一下序就可</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据周赛</title>
      <link href="/posts/bd07ec83.html"/>
      <url>/posts/bd07ec83.html</url>
      
        <content type="html"><![CDATA[<h2 id="countXXX">countXXX</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">int</span> arr[<span class="number">200</span>];<span class="comment">// </span></span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> n;<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="built_in">string</span> a;<span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line"><span class="comment">//找最长相等子串长度 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="type">int</span> cnt=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(a[i]==a[i+<span class="number">1</span>])&#123;</span><br><span class="line">cnt++;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt&gt;arr[a[i]])&#123;</span><br><span class="line">arr[a[i]]=cnt;<span class="comment">//储存该字符最大连续长度</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">200</span>;i++)res+=arr[i];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;res;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="乒乓球">乒乓球</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">char</span> arr[<span class="number">100010</span>];</span><br><span class="line"><span class="type">char</span> a=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="type">int</span> cnt=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(a!=<span class="string">&#x27;E&#x27;</span>)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot; %c&quot;</span>,&amp;a);</span><br><span class="line">arr[cnt++]=a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//输出11赛制</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;cnt;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i]==<span class="string">&#x27;W&#x27;</span>)x++;</span><br><span class="line"><span class="keyword">if</span>(arr[i]==<span class="string">&#x27;L&#x27;</span>) y++;</span><br><span class="line"><span class="keyword">if</span>((x&gt;=<span class="number">11</span>||y&gt;=<span class="number">11</span>)&amp;&amp;<span class="built_in">abs</span>(x-y)&gt;=<span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="string">&quot;:&quot;</span>&lt;&lt;y&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">x=<span class="number">0</span>,y=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="string">&quot;:&quot;</span>&lt;&lt;y&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">x=<span class="number">0</span>,y=<span class="number">0</span>;<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//21赛制 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;cnt;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i]==<span class="string">&#x27;W&#x27;</span>)x++;</span><br><span class="line"><span class="keyword">if</span>(arr[i]==<span class="string">&#x27;L&#x27;</span>) y++;</span><br><span class="line"><span class="keyword">if</span>((x&gt;=<span class="number">21</span>||y&gt;=<span class="number">21</span>)&amp;&amp;<span class="built_in">abs</span>(x-y)&gt;=<span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="string">&quot;:&quot;</span>&lt;&lt;y&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">x=<span class="number">0</span>,y=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="string">&quot;:&quot;</span>&lt;&lt;y&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四级日记</title>
      <link href="/posts/7669356f.html"/>
      <url>/posts/7669356f.html</url>
      
        <content type="html"><![CDATA[<p><strong>四级考试流程</strong>：9:00——9:10 阅读考场注意事项，发放考卷，贴条形码</p><p>9:10——9:40 作文考试</p><p>9:40——10:05 听力测试</p><p>10:05——10:10考试暂停5分钟，收答题卡一(即作文和听力)</p><p>10：10—11:20 完成阅读及翻译</p><hr><p>作文三十分钟，这是固定时间，听力二十五分钟，固定时间，记得填涂答题卡，10：10-11：20，七十分钟写阅读和翻译部分。如果翻译做三十分钟，那么剩下四十十分钟四篇阅读理解</p><p><strong>【2024年6月英语四级总分：710分】</strong></p><p><strong>一、<a href="http://cet4.koolearn.com/zuowen/">英语四级作文</a></strong></p><p>说明：写作部分占整套试卷的15% =106.5分</p><p>在这部分你要达到63.9分为及格。</p><p>时间：30分钟</p><p><strong>二、<a href="http://cet4.koolearn.com/tingli/">英语四级听力</a>部分 =248.5分</strong></p><p>听力部分占整套试题的35%，除听力篇章外每个题都是7.1分。</p><p>1、短篇新闻 7% 共7小题，每小题7.1分。</p><p>2 、长对话 8% 8个题目 每小题7.1分。</p><p>3、听力篇章 20% 共10个小题，每小题14.2分。</p><p>时间：25分钟。在这部分你要达到149分为及格，做对14个左右即可。</p><p><strong>三、<a href="http://cet4.koolearn.com/yuedu/">英语四级阅读理解</a> 35% =248.5分</strong></p><p>阅读部分占整套试题的35%，选词填空每题3.55分，其余每题都是7.1分。</p><p>1、选词填空 5% 10个题，每小题3.55分</p><p>2、长篇阅读 10% 10个题，每小题7.1分。</p><p>3、仔细阅读 20% 10个题 共2篇，一篇5个题，每小题14.2分。</p><p>时间：40分钟 在这部分你要达到149分为及格，做对18个左右即可。</p><p><strong>四、<a href="http://cet4.koolearn.com/beikao/fanyi/">英语四级翻译</a>部分 汉译英 15% 30分钟 =106.5分</strong></p><h1>作文</h1><p>今晚先把作文部分摸一摸：</p><p>一般考题为议论文：大概就是三种：现象解释，观点选择，问题解决，应用文：感谢信，广告，新闻报道，推荐信</p><p><strong>模板构成</strong></p><h2 id="高中的一个很好的作文模板">高中的一个很好的作文模板</h2><h3 id="第一段">第一段</h3><p>overwhelming joy wells up sincerely from the bottom of my heart the moment i hear that</p><p><s>我一听到某事，喜悦之情真诚的油然而生</s> （现象解释类/观点选择类，问题解决类） The following solutions can  account for this issue<s>下面的解决方案能解释这个问题</s></p><h3 id="第二段">第二段</h3><p><code>first and foremost</code>，there is no doubt that +,毫无疑问的是     as far as i am concerned，在我看来，what is well known to us all is that 众所周知的是   <code>Futhermore</code>   as an old saying runs:where there is a will ,there is a way正如古谚语说的那样，有志者事竟成</p><h3 id="第三段">第三段</h3><p>In a word, the whole society should pay  close attention to the problem of（ ）  Only in this way can we have a bright and  promising future.总之，全社会都应该关注（）问题，只有这样我们才能有一个光明和有前途的未来</p><p>i hold the firm belief that我坚信</p><h3 id="一些简单词的替换">一些简单词的替换</h3><ol><li>very-&gt;extremely/surprisingly</li><li>good-&gt;wonderful/fantasitic/brilliant</li><li>beautiful-&gt;appealing/fascinating</li><li>extraordianry特别的，非凡的</li><li>important-&gt;significant/indispensable重要的/必不可少的</li><li>big-&gt;enormous/tremendous大的/巨大的</li><li>about-&gt;concerning/with respect to关于</li><li>change-&gt;transform改变</li><li>finish-&gt;complete,accomplish完成</li><li>must-&gt;necessarily必须</li></ol><hr><h3 id="常用短语">常用短语</h3><ol><li><p>have an enromous passion for喜欢</p></li><li><p>take full advantage of充分利用</p></li><li><p>i have the confidence that从句</p></li><li><p>be thirsty/longing for doing sth</p></li><li><p>with the Mid-Autumn Festival approching中秋节即将到来</p></li><li><p>shape one`s body增强体质</p></li><li><p>keep a balanced diet保持饮食平衡</p></li><li><p>broaden/widen one`s borizons开阔视野</p></li><li><p>take an active partcipation in 积极参与</p></li></ol><h2 id="第一段：">第一段：</h2><p>​<strong>议论文</strong></p><hr><h3 id="现象解释类：">现象解释类：</h3><p>第一句：With the rapid development of  society/economy/education/technology/ culture/medical service（任选）, it is of  great necessity for youngster/students to  improve our speaking ability. --随着（ ）的快速发展，对于（某类人）很有 必要去（做一件事）。 例：随着英语教育的快速 发展，对于学生来说提升口语能力非常重要。</p><p>第二句：it’s quite natural for us to ponder  over the question of__________________. 我们很自然地会想到______这一问题 提出问题</p><h3 id="观点选择类：">观点选择类：</h3><p>第一句 Nowadays （youngsters/students ）have  different options upon graduation.（阐述问 题，背景） Some thinks that（ ）is  beneficial, while others think( )is a  better choice.（列举选择） Personally, I  prefer the former/latter.做出选择 The  following reasons can account for my  preference.</p><h3 id="问题解决类：">问题解决类：</h3><p>第一句： In contemporary(当代的) world, （ ）(现象) I am  convinced that it is of great necessity for 某 人 to （do sth）.（观点） How to address (解决) this problem? The following solutions can  account for this issue.(过渡句)</p><h3 id="图画类：">图画类：</h3><p>As is starkly mirrored（reflected） in the  image/chart（表格）that（一句话）描述图 片）（正如图片中的什么什么赤裸裸的描述的那样） it is revealed that____ （图片内涵）The  following reasons can account for this  issue.（过渡句）</p><p>​<strong>应用文</strong></p><hr><h3 id="信件类作文">信件类作文</h3><p>Dear   John Smith,</p><p>​        My name is Jame Hart,and I am project manager,Thank you for your E-mail last week.I am writing this letter on the behalf of company to let you know about the training progress.The followings are the details.</p><p>​       First thing I want to deliver(传递）is the progress of the project is always carried on according to time on the contract(项目的进度总是按照合同规定的时间进行).Please kindly be informed.Second matter concerned is that the training of the local employees isn’t finished, It is expected to be done in the end of next month,At last the list of training employees is on the  attachment(附件）。</p><p>​      Thank you for your time.</p><p>​                                                Sincerely yours</p><p>​                                                        Jane Hart</p><h3 id="应用文：通知类作文">应用文：通知类作文</h3><p>标题：notice</p><p>人称：第一人称，第三人称</p><p>日期：左上角</p><p>落款：右下角机构名（Student Union)</p><p>​                             Notice</p><p>September 11th</p><p>​         This notice is for the purpose of         描述通知   .This lecture(演讲）is aimed at   通知目的      .The following details can account for this event.</p><p>​         First and foremost,  题目要求的点1  ,   点1补充句  ,Futhermore,there will be   题目要求的点2  ,  点2的补充句  .Last but not least, 题目要求的点3 ,  点3的补充句 .</p><p>​         If you have any questions,you are free to contact at 192389 in the working hours.</p><p>​                                                  Student Union</p><h3 id="新闻报道">新闻报道</h3><hr><p>On December First,Monday,the Student Union organized an meaningful activity to visit the local farm,in which 300 volunteers active <a href="http://participated.It">participated.It</a> turns out to be a great success.</p><p>(时间，地点，人物，事件，结果)</p><p>​           This activity was aimed that     活动目的   ,In the early morning (时间),      事件1     ,     事件1补足句     .After the lunch, 事件2     ,     事件2补足句     .In the evening,  事件3     ,事件3补足句.</p><p>​           This activity turns out to be a beneficial event for both sides.The Student  Union expressed that there will be more meaningful events in the future.(活动意义）</p><h2 id="第二段-2">第二段</h2><h3 id="通用：">通用：</h3><p>第一句（论点一）：First and foremost, there is  no doubt that_______________. 首先毫无疑问的是，________________. 填最简单的句型，保证句子无语法错误</p><p>第二句（论据1）：Based on big data，a  majority of（ successful social elites）  admitted that they have spent 2/3 of their  time in(doing sth) 基于大数据，大部分成功的社会精英承认，他们 花了三分之二的时间做某件事（练口语，这个与主题相关联）</p><p>第三句（论点2）：Furthermore，it is  obvious（很明显的） that____________________.</p><p>第四句：论据2 万能谚语: Where there is/ are _<strong><strong><strong><strong><strong><strong>, there is/are</strong></strong></strong></strong></strong></strong>.<strong>例如Where there are foreign friends, there is  communication, therefore our speaking  ability can be improved.有外国朋友，就有交 流。</strong></p><p>第五句：论点3：Last but not least，no one  can deny that<strong>例如 Last but not least，no one can deny that it is high time that we can travel to a English speaking country, so that our   speaking ability can be enhanced.最后但并非最不重要的一点,没有人可以否认,现在是时候我们可以去英语国家旅行了,这样我们的口语能力就可以得到提高</strong></p><p>第六句：论据3 though_____________, _____________.<strong>例如： Though we don’t have a good language  environment, we can experience it in a short  time. 尽管我们语言环境不好但是我们可以短期体会 它。</strong></p><h2 id="第三段：">第三段：</h2><h3 id="通用：-2">通用：</h3><p>In a word, the whole society should pay  close attention to the problem of（ ）  Only in this way can we have a bright and  promising future.总之，全社会都应该关注（）问题，只有这样我们才能有一个光明和有前途的未来</p><h1>阅读</h1><h2 id="经典阅读填空（十题，每题14-5）">经典阅读填空（十题，每题14.5）</h2><p>这个阅读填空一般很细，它选项的意思不会是特别离谱的，他甚至在文中经常出现，但是就是不选，<strong>某个非常小的点与原文不符，某些答案无中生有，过度推测，同义转述，但是每个答案都跟题目相关，这就需要你好好想想</strong>，而且虽然词汇量占大头，但是对每道题的做题技巧肯定也很重要</p><p>先看选项-&gt;在在段落中用波浪想划出大致的段落-&gt;在从选项中仔细找</p><h2 id="阅读（段落12-15选10）每题7-1">阅读（段落12-15选10）每题7.1</h2><p>这一题是一篇文章12-15个小段落，十个选项，其中有一个段落需要重复选择两次</p><p>首先阅读题目-&gt;然后通读选项，在选项中划出对应的关键词，之后略读课文，找出关键词即可、</p><p><strong>要多看几个词，与词义对应才行，另外看选 项的时候要写出：什么人+做了什么事</strong></p><h2 id="选词填空（10空选15词）每题3-5">选词填空（10空选15词）每题3.5</h2><h1>听力</h1><p>在25分钟时间里听25道题，体型分布为<strong>短篇新闻+长对话+短文理解（7+8+10）</strong>、</p><ol><li><p><em>视听一致</em></p></li><li><p>关键词的选取</p><p>听前要给选项先画出关键词</p></li></ol><p><img src="https://files.catbox.moe/f9bsiy.png" alt=""></p><h1>翻译</h1><p><img src="https://files.catbox.moe/bxcx37.png" alt=""></p><p>​<strong>常用词汇</strong></p><p>originated in起源于play a role in发挥着重要作用agricultural农业的crop农作物be based on 基于—house building住宅建筑decreased gradually逐渐的减少has an important significance有重要意义make a deep impression使–印象深刻</p><p>attaches great importance to重视advocating提倡at present目前Governments at all levels各级政府the quality of—的质量since the reform and opening-up改革开放以来have been continuously improved不断提高be satisfied with满足于no longer—but不是—而是not limited to不再局限于all over the country全国各地pay more attention to更加注重gains widespread popularity获得普遍欢迎be regarded as把—视为folk custom民间习俗for hundreds of years数百年来a branch of一个–的分支originated in起源于</p><h1>一些总是记不住的词</h1><p>authentic 真实的actually 事实上genuinely 真正的rather than 而不是adequate 足够的/充分的sufficient足够的/充足的diverse 不同的，多种多样的diversification变化/多样化prevent阻止hinder阻碍dynamic 动态的reveal揭示refered涉及loyalty忠诚reluctant不情愿的，勉强的employ 雇佣counseling咨询deliver发表latest最新的conventional传统的by no means绝不是literate文学的guilt有罪/内疚get caught捕获policies政策evaluate评估estimated估计的relevant有关的/切题的fundamental基本的/重要的prioritized把–区分优先次序insurance保险anticipate先于–行动/预料rule out排除nourishing滋养regional地域地区features特征hint暗示imply暗示assess评估identify识别gender性别overwhelmed覆盖/淹没neglecting忽视/忽略privilege特权define定义，使明确disastrous灾难性的remarkable异常的，引人注目的scale比例eliminate消除climate气候come from来自于morally道德上convey传达model模仿/模范devices设备/装置addicted上瘾controversial有争议的substantially本质上embrace包含be capable of有能力initial最初的tendency倾向/趋势illegal违法的pick up捡起honor给–以荣誉shifting转变/转化revolution革命instant立即的immediate立即的obesity肥胖presume推测affordable负得起的agricultural农业的extinct灭绝的/灭种的genetic engineering遗传工程motivation动机/动力business performance业绩struggle to竞争(挣扎着)yield出产/收益rivals对手/竞争mentality心态reputation名誉eager渴望/热心monitor监视器traps陷阱stand to坚持multiple多样的/许多的fulid流动的perceive觉察desirable值得拥有的clinic诊所physical体育锻炼exclude排除persistent坚持</p><h1>应试方法的总结</h1><h2 id="作文">作文</h2><p>作文把固定句式记好，剩下的紧扣题意就好，注意的是语法，单词，短语的正确性和不要有错别字</p><h2 id="听力">听力</h2><p>作文一般用不了30分钟，只要没有思路上的卡顿，慢慢写，好好写就行，剩下的时间就开始划听力题，这个一定要把关键词划出来，然后仔细听，听到一个就直接往下一个看，不然把控不住范围</p><h2 id="翻译">翻译</h2><p>翻译的话，和作文差不多，固定句式，单词，语法，一定要对，</p><h2 id="仔细阅读">仔细阅读</h2><p>听力做完就开始仔细阅读，仔细阅读的话分很重，先看题目，然后去文章中匹配段落用波浪线画出来并标注题号，首先其他地方要通读大意，然后画线句仔细阅读并进行匹配，<strong>首先段落一定要匹配好，正确选项一般不仅大概意思匹配观点，而且大概率会有单词和段落相同</strong></p><h2 id="段落匹配">段落匹配</h2><p>首先看选项，在选项中标注好关键词，然后快速的去段落中找，根据试卷结构考虑是倒着写还是正着写，快速准确匹配</p><h2 id="选词填空">选词填空</h2><p>重要的是知道意思，知道每个单词的词性，然后就快速阅读去匹配，五分钟之内完成，<s>选词填空还没复习</s></p><hr><h2 id="最后两个字，细心">最后两个字，细心</h2>]]></content>
      
      
      <categories>
          
          <category> 四级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 四级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java注解</title>
      <link href="/posts/3f6454bb.html"/>
      <url>/posts/3f6454bb.html</url>
      
        <content type="html"><![CDATA[<h1>注解</h1><p>Java 注解（Annotation）又称 Java 标注，是 JDK5.0 引入的一种注释机制。</p><p>Java 语言中的类、方法、变量、参数和包等都可以被标注。和 Javadoc 不同，Java 标注可以通过反射获取标注内容。在编译器生成类文件时，标注可以被嵌入到字节码中。Java 虚拟机可以保留标注内容，在运行时可以获取到标注内容 。 当然它也支持自定义 Java 标注。</p><hr><p><strong>RetentionPolicy 注解</strong> 是 Java 中用来控制注解在程序的不同阶段保留时间的注解。它可以有以下三种取值：</p><ul><li><strong>SOURCE:</strong> 注解只在源码阶段保留，编译时会被丢弃。主要用于文档注释或者工具处理。</li><li><strong>CLASS:</strong> 注解在编译时保留，但不会写入 class 文件。主要用于编译时代码生成或分析。</li><li><strong>RUNTIME:</strong> 注解在编译时保留，写入 class 文件，并在运行时可以通过反射机制获取。这是最常用的保留策略，常用于框架、配置和动态行为。</li></ul><p><strong>举个例子：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码定义了一个名为 <code>MyAnnotation</code> 的注解，并指定其保留策略为 <code>RUNTIME</code>。这意味着该注解会在运行时保留，可以通过反射获取并使用。</p><p><strong>RetentionPolicy 注解的常见应用场景：</strong></p><ul><li><strong>框架：</strong> Spring 框架广泛使用注解来配置 Bean、注入依赖等。</li><li><strong>ORM 框架：</strong> Hibernate 等 ORM 框架使用注解来映射对象和数据库表。</li><li><strong>自定义注解：</strong> 开发者可以自定义注解来标记代码，并在运行时进行处理。</li></ul><h1>retentionpolicy注解和annotation注解的区别</h1><p><strong>RetentionPolicy</strong> 和 <strong>annotation</strong> 虽然经常一起使用，但它们是两个不同的概念：</p><h2 id="RetentionPolicy">RetentionPolicy</h2><ul><li><p><strong>定义:</strong> RetentionPolicy 是一个 <strong>注解</strong>，用来 <strong>指定</strong> 一个注解（annotation）的 <strong>生命周期</strong>，也就是这个注解在程序的不同阶段（源码、编译期、运行期）是否保留。</p></li><li><p><strong>作用:</strong> 它告诉编译器如何处理被它修饰的注解。</p></li><li><p>取值:</p><p>有三种取值：</p><ul><li><strong>SOURCE:</strong> 注解只在源代码阶段存在，编译时会被丢弃。</li><li><strong>CLASS:</strong> 注解在编译时保留，但不会写入 class 文件。</li><li><strong>RUNTIME:</strong> 注解在编译时保留，写入 class 文件，可以在运行时通过反射获取。</li></ul></li></ul><h2 id="annotation（注解）">annotation（注解）</h2><ul><li><strong>定义:</strong> annotation 是 Java 的一种 <strong>元数据</strong>，用于给程序元素（类、方法、字段等）添加额外的信息。</li><li><strong>作用:</strong> 可以用来生成文档、进行代码检查、实现 AOP 等。</li><li><strong>组成:</strong> 一个注解通常包括注解名、注解参数和 RetentionPolicy 等元注解。</li><li><strong>使用:</strong> 可以将注解应用于类、方法、字段等元素上，提供额外的信息。</li></ul><p><strong>简单来说：</strong></p><ul><li><strong>RetentionPolicy</strong> 是用来控制注解的 <strong>生命周期</strong> 的。</li><li><strong>annotation</strong> 是用来 <strong>标注</strong> 程序元素的。</li></ul><p><strong>举个例子：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中：</p><ul><li><code>@Retention(RetentionPolicy.RUNTIME)</code> 表示 <code>MyAnnotation</code> 这个注解会在运行时保留，可以通过反射获取。</li><li><code>@Target(ElementType.METHOD)</code> 表示 <code>MyAnnotation</code> 这个注解只能用于方法上。</li><li><code>MyAnnotation</code> 是一个自定义的注解，它的作用是给方法添加一个额外的信息。</li></ul><p><strong>总结</strong></p><p>RetentionPolicy 是注解的“元注解”，用来控制注解的生命周期，而 annotation 则是用来给程序元素添加信息的。它们是相辅相成的，RetentionPolicy 决定了注解在什么时候可以被访问和使用。</p><hr><h1>一些annotation注解</h1><ul><li>@Override - 检查该方法是否是重写方法。如果发现其父类，或者是引用的接口中并没有该方法时，会报编译错误。</li><li>@Deprecated - 标记过时方法。如果使用该方法，会报编译警告。</li><li>@SuppressWarnings - 指示编译器去忽略注解中声明的警告。</li></ul><p>作用在其他注解的注解(或者说 元注解)是:</p><ul><li>@Retention - 标识这个注解怎么保存，是只在代码中，还是编入class文件中，或者是在运行时可以通过反射访问。</li><li>@Documented - 标记这些注解是否包含在用户文档中。</li><li>@Target - 标记这个注解应该是哪种 Java 成员。</li><li>@Inherited - 标记这个注解是继承于哪个注解类(默认 注解并没有继承于任何子类)</li></ul><p>从 Java 7 开始，额外添加了 3 个注解:</p><ul><li>@SafeVarargs - Java 7 开始支持，忽略任何使用参数为泛型变量的方法或构造函数调用产生的警告。</li><li>@FunctionalInterface - Java 8 开始支持，标识一个匿名函数或函数式接口。</li><li>@Repeatable - Java 8 开始支持，标识某注解可以在同一个声明上使用多次。</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 博客搭建及文章管理</title>
      <link href="/posts/5a8a6c8d.html"/>
      <url>/posts/5a8a6c8d.html</url>
      
        <content type="html"><![CDATA[<p><strong>这篇博文讲一讲hexo博客的搭建及文章管理，也算是我对于暑假的一个交代</strong></p><p><strong>！！！注意：下面的操作是基于你已经安装了node.js和git的前提下进行的，并且拥有github账号</strong></p><h2 id="创建一个blog目录">创建一个blog目录</h2><p>在磁盘任意位置创建一个文件夹，命名为blog，然后打开命令行，进入blog目录，输入以下命令：<br><code>npm install -g hexo-cli</code><br>等待安装完成，然后输入<code>hexo init</code>命令，等待hexo初始化完成。</p><p>初始化完成后，直接<code>hexo server</code>命令启动本地服务器，然后在浏览器中输入<code>http://localhost:4000</code>访问博客。</p><p>此时，你应该可以在该端口看到hexo的默认主题，但是这里只能在端口中显示，别人无法访问，所以我们还需要进行一些配置。</p><h2 id="github-pages配置">github pages配置</h2><h3 id="配置ssh">配置ssh</h3><ol><li>生成sshkey<br>在gitbash下输入 <code>cd ~/.ssh</code>进入该文件，然后<code>ssh keygen -t rsa -C &quot;your_email&quot;</code>生成sshkey，其中your_email为你的github注册邮箱.这个sshkey在C:/user/.ssh/目录下，其中id_rsa是私钥，id_rsa.pub是公钥。</li></ol><p>添加sshkey到github</p><ol><li>打开github，点击右上角头像，选择settings</li><li>点击左侧栏中的SSH and GPG keys，然后点击New SSH key</li><li>将刚刚复制的 ssh key 粘贴到Key输入框中，Title输入框中输入一个标题，然后点击Add SSH key按钮。</li></ol><p>验证：输入命令<code>ssh -T git@github.com</code> 并且输入yes，行末尾会显示你的用户名</p><h3 id="接着在本地绑定与github仓库的链接">接着在本地绑定与github仓库的链接</h3><ol><li>输入命令：<code>git config --global user.name &quot;your_name&quot;</code>，其中your_name为你的github用户名</li><li>输入命令：<code>git config --global user.email &quot;your_email&quot;</code>，其中your_email为你的github注册邮箱</li></ol><h3 id="上传博客">上传博客</h3><ol><li>打开blog文件夹中的_config.yml文件，找到deploy选项，将type改为git，repository改为你的github仓库地址，例如：<a href="https://github.com/%E7%94%A8%E6%88%B7%E5%90%8D/%E7%94%A8%E6%88%B7%E5%90%8D.github.io.git">https://github.com/用户名/用户名.github.io.git</a>，branch改为main，然后保存。</li></ol><h3 id="安装启动工具">安装启动工具</h3><ol><li>输入命令：<code>npm install hexo-deployer-git </code></li><li>输入命令：<code>hexo clean</code></li><li>输入命令：<code>hexo g</code></li><li>输入命令：<code>hexo d</code>部署博客</li></ol><h3 id="访问博客">访问博客</h3><p>打开浏览器，输入<code>https://用户名.github.io</code>访问你的博客。</p><hr><p>至此，你已经成功搭建了自己的hexo博客，那如何管理自己的文章呢？</p><h2 id="文章管理">文章管理</h2><h3 id="新建文章">新建文章</h3><p>在终端输入命令<code>hexo new post -p /文件夹/文件名.md</code>，其中文件夹为你存放文章的文件夹，文件名为你新建文章的名称，<a href="http://xn--siqw5lms6b.md">后缀为.md</a>。</p><p>这样才可以自动生成文章模板，然后就可以编辑文章了。</p><h2 id="一些文件的配置">一些文件的配置</h2><ol><li>_config.yml文件：该文件是hexo博客的配置文件，可以修改博客的名称、主题、端口等。</li></ol><p>其中我们的大部分功能都是在config.butterfly中配置的，该文件的优先级比config大，当两个文件中中又完全相同的功能的时候，config.butterfly会优先覆盖config中相同的功能</p><p>**那config.butterfly文件是怎么来的呢？**这是该主题的配置文件，只需将该主题的config文件复制一份添加到根目录中，然后对此进行修改</p><ol><li>注意路径一定要用url包括，不然无法显示</li></ol><p><img src="https://cdn-fusion.imgimg.cc/i/2024/mAtlfyvAOSTJpie0.png" alt=""></p><h2 id="各种文章书写语法">各种文章书写语法</h2><h3 id="时间轴">时间轴</h3><p>时间轴参考以下语法</p><p><img src="https://cdn-fusion.imgimg.cc/i/2024/5meDWeRUFuuTlk1M.png" alt=""></p><p>其他的俺还没整明白，俺也不知道俺能菜到什么地步呜呜呜</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于内部类的一些问题</title>
      <link href="/posts/3523e9d8.html"/>
      <url>/posts/3523e9d8.html</url>
      
        <content type="html"><![CDATA[<p>这是初始code</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> Inheritable&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InheritableFather</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InheritableFather</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;inheritableather&quot;</span>+InheritableFather.class.isAnnotationPresent(Inheritable.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//interitableson类继承于inheritablefather</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span>  <span class="title class_">InheritableSon</span> <span class="keyword">extends</span> <span class="title class_">InheritableFather</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InheritableSon</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>();<span class="comment">//调用父类构造参数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;inheritableson&quot;</span>+InheritableSon.class.isAnnotationPresent(Inheritable.class));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        InheritableSon is=<span class="keyword">new</span> <span class="title class_">InheritableSon</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，编译器报错</p><p><code>无法从 static 上下文引用 'InheritableFather.this' </code></p><p>这是正确的code</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> Inheritable&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InheritableFather</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InheritableFather</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;inheritableather&quot;</span>+InheritableFather.class.isAnnotationPresent(Inheritable.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//interitableson类继承于inheritablefather</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">InheritableSon</span> <span class="keyword">extends</span> <span class="title class_">InheritableFather</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InheritableSon</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>();<span class="comment">//调用父类构造参数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;inheritableson&quot;</span>+InheritableSon.class.isAnnotationPresent(Inheritable.class)+name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        InheritableFather i=<span class="keyword">new</span> <span class="title class_">InheritableFather</span>();</span><br><span class="line">        InheritableSon is=i.<span class="keyword">new</span> <span class="title class_">InheritableSon</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    String name=<span class="string">&quot;shix&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者说将inheritableson这个内部类改为静态</p><p><strong>还有一种方法就是把这个内部类挪出来</strong></p><p>那为什么会出现这个错误呢？</p><hr><p>是因为<code>InheritableSon</code>类是一个非静态的嵌套类（即内部类），而非静态的嵌套类需要依赖于外部类的实例。也就是说，创建一个非静态嵌套类的实例时，需要首先创建它的外部类的实例。</p><h3 id="为什么-InheritableFather-不报错？">为什么 <code>InheritableFather</code> 不报错？</h3><p><code>InheritableFather</code> 是一个顶层类，不嵌套在其他类中，因此可以直接创建它的实例，而不需要依赖于任何其他类的实例。</p><h3 id="为什么-InheritableSon-报错？">为什么 <code>InheritableSon</code> 报错？</h3><p>因为<code>InheritableSon</code>是一个非静态的嵌套类，它隐式地持有外部类<code>InheritableFather</code>的一个实例引用。当你在<code>main</code>方法中直接创建<code>InheritableSon</code>的实例时，编译器无法自动找到这个外部类实例，导致错误。</p><h3 id="解决方法">解决方法</h3><p>如果你想在没有外部类实例的情况下创建<code>InheritableSon</code>的对象，有两种方法可以选择：</p><ol><li><p><strong>将<code>InheritableSon</code>声明为静态嵌套类</strong>：<br>这样就不需要依赖于外部类实例了，可以直接在<code>main</code>方法中创建<code>InheritableSon</code>对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InheritableFather</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InheritableFather</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;inheritableather &quot;</span> + InheritableFather.class.isAnnotationPresent(Inheritable.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InheritableSon</span> <span class="keyword">extends</span> <span class="title class_">InheritableFather</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">InheritableSon</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>();</span><br><span class="line">            System.out.println(<span class="string">&quot;inheritableson &quot;</span> + InheritableSon.class.isAnnotationPresent(Inheritable.class));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">InheritableSon</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InheritableSon</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>保持<code>InheritableSon</code>为非静态类，但创建外部类实例时嵌套创建</strong>：<br>先创建<code>InheritableFather</code>的实例，然后通过它创建<code>InheritableSon</code>的实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InheritableFather</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InheritableFather</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;inheritableather &quot;</span> + InheritableFather.class.isAnnotationPresent(Inheritable.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InheritableSon</span> <span class="keyword">extends</span> <span class="title class_">InheritableFather</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">InheritableSon</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>();</span><br><span class="line">            System.out.println(<span class="string">&quot;inheritableson &quot;</span> + InheritableSon.class.isAnnotationPresent(Inheritable.class));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">InheritableFather</span> <span class="variable">father</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InheritableFather</span>();</span><br><span class="line">        <span class="type">InheritableSon</span> <span class="variable">son</span> <span class="operator">=</span> father.<span class="keyword">new</span> <span class="title class_">InheritableSon</span>(); <span class="comment">// 通过外部类实例创建内部类实例</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="总结">总结</h3><p>报错的根本原因在于你在静态上下文（<code>main</code>方法）中尝试创建一个非静态嵌套类的实例，而没有提供必要的外部类实例。如果你将<code>InheritableSon</code>改为静态嵌套类，或者在创建<code>InheritableSon</code>实例时提供一个外部类的实例，就可以解决这个问题。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shix草稿</title>
      <link href="/posts/bbf11a29.html"/>
      <url>/posts/bbf11a29.html</url>
      
        <content type="html"><![CDATA[<p>我和香膏<br>入学是在19年那个夏天吧，襄城高中是我们县最好的高中，19年那个夏天，想不起来那年夏天究竟有什么可以让我那么快乐，只记得我能听到蝉鸣，可以闻到被太阳烤过的，带有一丝盎然和一抹盛夏的微风。能够听到周围的欢声笑语，感受到身边的祝贺和喜悦。<br>-暑假<br>暑假后跟姥爷去了北京，从郑州到北京，99块钱，六个小时的硬座，那是我第一次坐火车，对什么事都很好奇，什么都不懂也不明白，之前一直在村里生活，去过最远的地方印象中也就是县城，别的地方就算去过也没有什么印象。<br>在火车上，我好像没跟姥爷说多少话，我不是一个特别爱说话的人，周围的事物现在想起来也很模糊，因为当时没有带上眼镜，从有点模糊的视野中也模糊了我的记忆，只记得，在旅途过程中，前边有个大哥问:“你们去哪呢？”我姥爷用高昂的声音回答道:“外孙子考上高中了，带他去北京玩玩”。<br>我姥爷就是这样一个人，他教会了我很多，从小到大，我也从他这里学到了很多东西，我跟家里大部分的亲戚联系不深，我爷爷在我小学的时候就走了，在比较高的长辈里，我印象最深的就是我的姥爷和我奶奶。<br>六个小时的旅途不算太慢，下了火车，面临的是我的第一个挑战:我需要自己用手机导航，坐地铁去舅舅家，对于我来说，这是一个莫大的挑战，当时不会用nfc，不会用微信支付宝，所以看好下车点，买的单程票，什么都是第一次，第一次过安检，第一次买票，第一次坐地铁，也是第一次换乘，记得很清楚，在换乘那次还坐反了一次，坐过站了一次，不过最后也是稀里糊涂的到了。<br>到了之后，大概玩的有十来天，第一次去看了电影，去了故宫，毛主席纪念馆，鸟巢，水立方（不过没进去），平淡的旅行就都不做概述，过程中倒也没发生什么特别有意思的事，思绪转到高中<br>-高中<br>高中刚开学是军训，说起来高中，我现在其实也不想一整个的把我的高一高二高三高四拉出来从头开始说，我想扒一扒那些有意思的，好玩的，印象深刻的事情，</p><p>高中刚开始的时候挺积极的，是什么都想尝试一下那种，认识了很多新面孔，同时跟他们都玩得很好，但是爱玩必会有缺点的，认识了很多人，跟不同的人玩，但是一段时间之后，我发现我的学习抓不住了，我上课开始看不懂了，然后我就努力的听课，但是当我花费时间去补的时候，我发现，我不知道从哪里开始补起，然后在杂乱无章的知识点中，我什么都抓不住，之后便在那种急躁的看一个知识点看不懂的耐心中渐渐败下阵来，就是这样的一直循环，直到高三的一次高考彻底打醒了我，我知道了我不该在学习任务没有完成时做其他的事，从而慢慢变得拖延症，很多时候没有坚持下来。</p><p>高四那一年是在一门心思搞学习了，断绝了很多无意义的社交，因为我发现，毕业之后，你还能经常保持联系的人，少之又少了，我在高三结束那年暑假，基本上就没有联系过高中的任何同学，很正常，他们也没有联系我，这都很正常，我不是那种会主动联系别人的人，并且来说，你和别人之间没有什么不可替代的价值，那种联系就会因为环境和地域的问题慢慢消散了，高四那年，真的是挺对的起自己的，一个以前从来不问题的人，每天能泡在老师的办公室，一个几乎都没有听过一节课的人，当时为了上课专注每次都坐到第一排，每天满满当当的计划也没有特别拖延，当时有个小笔记本，能把自己每天的状态，对自己的一些认识一些理解都写进去，那一年我很清楚，我就是在像向内扎根，因为成绩的提高没什么方法可言，唯有努力，这和别的事情不一样，任何事情都是，你需要经历很多东西，然后在这一刻突然开窍，学习也是，你不需要去提升社交能力，只需要把头埋进题海，然后不断的查漏补缺，然后在某一天的刻骨铭心中突然灵光乍现。</p><p>我逢人就讲，自己不爱说话的性格是到了高中才逐渐有所改变的，高中之后才慢慢开朗起来。但现在我意识到，事实并非如此。我感觉自己始终在向内探寻力量。所谓性格变得开朗，不过是我对这个世界有了更强的探索欲望，见识增多，得以不断祛魅。可骨子里，我还是个内向之人，依旧是向内寻求力量的。</p><p>我们是父母的延续，而不是父母的续集，</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>django+sql的学习</title>
      <link href="/posts/c70ad8e6.html"/>
      <url>/posts/c70ad8e6.html</url>
      
        <content type="html"><![CDATA[<p><strong>2024-11-6</strong></p><p>a标签属于行内标签，默认设置高度，边距无效，必须把它变成块级或者行内块级标签，</p><p>把链接的下划线取消：text-decoration: none;</p><p>如果想去显示某个div标签的边框，border: 1px solid red，那么这个区域便可以用红色边框展示，</p><p>鼠标拖动到链接上变颜色：a:hover{color:#ff6788}</p><p>想让一个东西垂直方向居中：文本：line-height 图片：边距</p><p>想让几个图片，文本横着排列：.float{},同时在标签下写上clear:both</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.left&#123;</span><br><span class="line">float:left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-item left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-item left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-item left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-item left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clear:both&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>内边距：padding:3px 透明度：opacity:0.7 外边距：margin-top:14px，</p><p><strong>2024-11-7</strong></p><p>隐藏某个图片，然后在鼠标触碰文字的时候，显示这个图片</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;download&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">.app:hover .download&#123;</span><br><span class="line">display:block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定位position</p><ol><li><p>fixed固定在窗口的某个位置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">position:fixed;</span><br></pre></td></tr></table></figure><p>css的一些元素设置：靠右<code>right</code>靠左<code>left</code>靠顶部 <code>top</code> 靠底部<code>bottom</code></p></li><li><p>某个东西相对于这个东西放在了这个东西的旁边，这个东西<code>position:relative</code>某个东西 <code>position:solute</code> 、</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.sub-header</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>:<span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>:<span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>:relative;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.c1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>:<span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>:<span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>:blue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>:absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">right</span>:<span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">bottom</span>:<span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sub-header&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;c1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>margin：设置元素之间的边框</p><p>BootStrap是别人帮我们已经写好的css样式，我们如果想要用这个bootstrap</p><blockquote><ol><li>下载bootstrap，在页面上引入bootstrap，编写HTML时，按照bootstrap的规定编写+自定制</li></ol></blockquote><p><strong>2024-11-8</strong></p><p>让元素横着排列，不换行，<code>display:inline-block</code></p><p>dom和bom:相当于编程语言内置的模块，jQuery编程语言的第三方模块</p><p>js都能写在哪些地方：</p><blockquote><ol><li>放在head标签的最后边，</li><li>放在body标签的最后边</li></ol></blockquote><p>js的一些知识</p><blockquote><ol><li><p>声明变量：<code>var name=&quot;高清&quot;</code></p></li><li><p>打印：<code>console.log()</code></p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;txt&quot;</span>&gt;</span>欢迎中国联通<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;txt/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> tog=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;txt&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> dataString = tag.<span class="property">innerText</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(dataString);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&gt;&lt;/sctipt&gt;</span></span></span><br></pre></td></tr></table></figure><p>定时器：<code>setInterval(show,1000);</code></p></blockquote><p>编码相关：</p><blockquote><ol><li>ascii编码，256种对应关系</li><li>gb2312，gbk中文和亚洲的一些国家</li><li>unicode，ucs2/ucs4，包括现在发现的所有文明</li><li>utf-8：中文是三个字节</li></ol></blockquote><p><strong>2024-11-9</strong></p><p>关于信息安全竞赛作品赛：首先是这个比赛，我要去做一个什么<strong>方向</strong>，使用什么<strong>框架</strong>，包括前端功能的搭建，和后端，数据库</p><h1>sql</h1><p><strong>2024-11-10</strong></p><p>启动MySQL</p><p><strong>2024-11-11</strong></p><p>查看已有数据库<code>show databases;</code></p><p>创建数据库：<code>create database+数据库名字 DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</code></p><p>删除数据库<code>drop database +名字</code></p><p>进入数据库：<code>use +数据库;</code></p><p>查看文件夹中所有数据表:<code>show tables;</code></p><p>创建表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table 表名称(</span><br><span class="line">列名称 类型，</span><br><span class="line">列名称 类型，</span><br><span class="line">列名称 类型</span><br><span class="line">)default charset=utf8;</span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table tb1(</span><br><span class="line">    id int,</span><br><span class="line">    name varchar(16),</span><br><span class="line">    age int</span><br><span class="line">) default charset=utf8;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table tb1(</span><br><span class="line">    id int,</span><br><span class="line">    name varchar(16) not null, -- 不允许为空</span><br><span class="line">    age int null,             -- 允许为空</span><br><span class="line">) default charset=utf8;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table tb1(</span><br><span class="line">    id int,</span><br><span class="line">    name varchar(16) not null, -- 不允许为空</span><br><span class="line">    age int default 3 -- 插入数据时，age列的值默认为3</span><br><span class="line">) default charset=utf8;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table tb1(</span><br><span class="line">    id int primary key, -- 主键，不允许为空，不允许重复</span><br><span class="line">    name varchar(16) ,</span><br><span class="line">    age int          </span><br><span class="line">) default charset=utf8;</span><br></pre></td></tr></table></figure><p>主键一般用于表示当前行的数据的编号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table tb1(</span><br><span class="line">    id int auto_increament primary key, -- 主键，自增，内部维护</span><br><span class="line">    name varchar(16) not null, -- 不允许为空 </span><br><span class="line">    age int null,             -- 允许为空</span><br><span class="line">) default charset=utf8;</span><br></pre></td></tr></table></figure><p><strong>一般的标准情况</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table tb1(</span><br><span class="line">    id int not null auto_increment primary key,</span><br><span class="line">    name varchar(16) ,</span><br><span class="line">    age int </span><br><span class="line">) default charset=utf8;</span><br></pre></td></tr></table></figure><p>查看表结构：<code>desc tb1</code></p><p>常用数据类型：<code>tinyint int bigint</code>三个，数据范围不一样</p><p><img src="image-20241111173823822.png" alt="image-20241111173823822"></p><p>表示小数<code>float double decimal</code></p><p>准确的小数值，m是数字总个数（符号不算)d是小数后个数，m最大值为65，d最大值为30</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb3&#123;</span><br><span class="line">id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">salary <span class="type">decimal</span>(<span class="number">8</span>,<span class="number">2</span>)</span><br><span class="line">&#125;<span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>char 定长字符串：char(11)固定用11个字符串进行存储</li><li>varchar变长字符串：varchar(11)，真实数据有多长按多长存储</li><li>mediumtext</li><li>longtext</li><li>datetime<code>YYYY-MM-DD HH:MM:SS(1000-01-01 00:00:00/9999-12-31 23:59:59)</code></li><li>date<code>YYYY-MM-DD (1000-01-01/9999-12-31)</code></li></ul><p>用户表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb7(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    password <span class="type">char</span>(<span class="number">64</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    email <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    age tinyint,</span><br><span class="line">    salary <span class="type">decimal</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">    ctime datetime</span><br><span class="line">)<span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p>删除数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件</span><br><span class="line"><span class="comment">---</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tb2 <span class="keyword">where</span> id<span class="operator">=</span><span class="number">4</span> <span class="keyword">and</span> name<span class="operator">=</span>&quot;侯卓林&quot;;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tb2 <span class="keyword">where</span> id<span class="operator">&gt;</span><span class="number">4</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tb2 <span class="keyword">where</span> id<span class="operator">!=</span><span class="number">4</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tb2 <span class="keyword">where</span> id <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>修改数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 列<span class="operator">=</span>值</span><br><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 列<span class="operator">=</span>值 <span class="keyword">where</span> 条件</span><br><span class="line"><span class="comment">---</span></span><br><span class="line"><span class="keyword">update</span> tb2 <span class="keyword">set</span> email<span class="operator">=</span>&quot;好好好&quot; <span class="keyword">where</span> id<span class="operator">&gt;</span><span class="number">5</span>;</span><br><span class="line"><span class="keyword">update</span> tb2 <span class="keyword">set</span> age<span class="operator">=</span>age<span class="operator">+</span><span class="number">10</span> <span class="keyword">where</span> id<span class="operator">&gt;</span><span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>查询数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名称</span><br><span class="line"><span class="keyword">select</span> 列名称，列名称 <span class="keyword">from</span> 表名称</span><br><span class="line"><span class="keyword">select</span> 列名称，列名称 <span class="keyword">from</span> 表名称 <span class="keyword">where</span> 条件</span><br><span class="line"><span class="comment">---</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb7</span><br><span class="line"><span class="keyword">select</span> id,name <span class="keyword">from</span> tb7 <span class="keyword">where</span> id<span class="operator">&gt;</span><span class="number">10</span>;</span><br><span class="line"><span class="keyword">select</span> id,name <span class="keyword">from</span> tb7 <span class="keyword">where</span> name<span class="operator">=</span>&quot;xx&quot; <span class="keyword">and</span> password<span class="operator">=</span>&quot;xx&quot;;</span><br></pre></td></tr></table></figure><p>pycharm链接sql查询数据</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    user=<span class="built_in">input</span>(<span class="string">&quot;请输入用户名:&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> user.upper()==<span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    pwd=<span class="built_in">input</span>(<span class="string">&quot;请输入密码:&quot;</span>)</span><br><span class="line">    mobile=<span class="built_in">input</span>(<span class="string">&quot;请输入手机号:&quot;</span>)</span><br><span class="line">    conn=pymysql.connect(host=<span class="string">&quot;127.0.0.1&quot;</span>,port=<span class="number">3306</span>,user=<span class="string">&#x27;root&#x27;</span>,passwd=<span class="string">&quot;gushi713&quot;</span>,charset=<span class="string">&#x27;utf8&#x27;</span>,db=<span class="string">&#x27;unicom&#x27;</span>)</span><br><span class="line">    cursor=conn.cursor(cursor=pymysql.cursors.DictCursor)</span><br><span class="line">    <span class="comment">#发送指令,这里不能用字符串格式化去做sql的拼接，会有sql注入的风险</span></span><br><span class="line">    sql=<span class="string">&quot;insert into admin(username,password,mobile) values(%s,%s,%s)&quot;</span></span><br><span class="line">    cursor.execute(sql,[user,pwd,mobile])</span><br><span class="line">    conn.commit()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#关闭</span></span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br></pre></td></tr></table></figure><p>获取数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">conn=pymysql.connect(host=<span class="string">&quot;127.0.0.1&quot;</span>,port=<span class="number">3306</span>,user=<span class="string">&#x27;root&#x27;</span>,passwd=<span class="string">&quot;gushi713&quot;</span>,charset=<span class="string">&#x27;utf8&#x27;</span>,db=<span class="string">&#x27;unicom&#x27;</span>)</span><br><span class="line">cursor=conn.cursor(cursor=pymysql.cursors.DictCursor)</span><br><span class="line"><span class="comment">#发送指令,这里不能用字符串格式化去做sql的拼接，会有sql注入的风险</span></span><br><span class="line">sql=<span class="string">&quot;select * from admin&quot;</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line">data_list=cursor.fetchall()</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> data_list:</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭</span></span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><p>在执行增删改的时候一定记得commit，查询的时候不需要commit执行fetchall/fetchone</p><p><strong>2024-11-12</strong></p><h1>django</h1><p>创建django项目<code>django-admin startproject +项目名称</code></p><p><img src="image-20241112202638925.png" alt="image-20241112202638925"></p><p>在项目下创建app包<code>python manage.py startapp app01</code></p><p>确保app已经注册<img src="image-20241112203709635.png" alt="image-20241112203709635"></p><p>其中urls文件中存放相当于vue中的路由文件，然后定义完之后去views这个py文件中寻找index函数</p><p>django项目的启动命令：<code>python manage.py runserver</code></p><hr><p>django模板语法</p><p><img src="image-20241112213649331.png" alt="image-20241112213649331"></p><p>如果使用模板语法在html中显示数据，那么在前端浏览器中便检测不到该数据的详细，因为这个数据在后端</p><p>今天对django有了初步的认识，使用命令创建项目之后，会有三个大模块，manage文件是一个主程序口，urls文件算是一个路由配置，放各种函数的路由，路由放了之后，在views中返回该路由的信息，views中的def函数能够返回一个html文件，这就是可以说是前端于后端的连接，那么如果以后django和vue结合之后，，可以直接用view中的def进行链接嘛？</p><p>答：需要配置一些路由和跨域访问，前端进行组件填写，后端def定义该功能后与数据库进行连接，求得的数据再返回到组件名.vue中，进行展示，那么前端vue中需要直接写的信息，就是一些静态的信息，而那些动态变化的信息，就需要后端去实现</p><p><strong>2024-11-13</strong>：不要只有经历，没有经验，重定向是浏览器的工作，django返回一个网站url然后返回给浏览器，浏览器去访问这个页面，</p><p><img src="image-20241113191947402.png" alt="image-20241113191947402"></p><p>三个请求，三个响应，html中的type是有固定类型的，类型有<code>text文本输入</code> <code>password密码输入</code> <code>submit提交表单数据</code> <code>reset重置表单输入</code> <code>radio单选框</code> <code>button按钮</code> <code>date日期输入</code> <code>email电子邮件地址</code> <code>number输入数字</code>另外在django项目中，登录请求提交在form表单中加上<code>&#123;% csrf_token() %&#125;</code>这句，不然因为django的特殊机制，django会有个token校验，导致程序报错。</p><p>在django的views中，def返回一个url(重定向)<code>return redirect</code>返回一个html或者其他类型：<code>return render(request, ,)</code>返回一个文本提示<code>return HttpResponse(&quot;文本提示&quot;) </code></p><hr><p>django与数据库： django开发操作数据库更简单，内部提供了orm框架</p><p><strong>如何在利用python在数据库中创建表</strong>:python中的models.py文件中创建类，那么当我们运行<code>python manage.py makemigrations</code> and <code>python manage.py migrate</code>命令时，解释器会根据该文件中的类去创建表结构，对于每个表中的数据，python也会自动根据类里边的数据进行创建</p><p>利用def在编译器中新建数据和表：<img src="image-20241113210604192.png" alt="image-20241113210604192"></p><p>删除和获取数据：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除数据</span></span><br><span class="line">UserInfo.bojects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="number">3</span>).delete()</span><br><span class="line">Department.objects.<span class="built_in">all</span>().delete()</span><br><span class="line"><span class="comment">#获取数据</span></span><br><span class="line">data_list=UserInfo.objects.<span class="built_in">all</span>()</span><br><span class="line"><span class="keyword">for</span> obj <span class="keyword">in</span> data_list:</span><br><span class="line">    pinrt(obj.<span class="built_in">id</span>,obj.name,obj.password,obj.age)</span><br><span class="line"><span class="keyword">return</span> HttpResponse(<span class="string">&quot;成功&quot;</span>)</span><br><span class="line">Data_list=[<span class="string">&#x27;对象&#x27;</span>]</span><br><span class="line">data_list=UserInfo.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(data_list)</span><br><span class="line"><span class="comment">#获取第一条数据</span></span><br><span class="line">row_obj=UserInfo.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="number">1</span>).first()</span><br><span class="line">UserInfo.objects.<span class="built_in">filter</span>(name=<span class="string">&quot;shix&quot;</span>).update(age=<span class="number">999</span>)</span><br></pre></td></tr></table></figure><p><s>十点之后去排版公众号 考虑一下那个职业规划大赛 英语单词尽量说回寝室复习一下 还有那个合唱的决赛，hhh想起来上年合唱真没把我折磨死</s></p><hr><p>现在可以正常展示出来用户和其他信息了，前端返回到数据库那种，然后是如何去增加信息直接到数据库</p><p>制作一个提交表单，代码如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/info/add/&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span> =<span class="string">&#x27;age&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Age&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Add&quot;</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加用户</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_info</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method==<span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">&#x27;add_info.html&#x27;</span>)</span><br><span class="line">    name=request.POST.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    age=request.POST.get(<span class="string">&#x27;age&#x27;</span>)</span><br><span class="line">    password=request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">    UserInfo.objects.create(name=name,age=age,password=password)</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&#x27;/app01/info/&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这个代码逻辑就是：在html中创建一个输入表单，method为post，antion为当前路径，提交之后相当于一个post请求，浏览器会检测到这个post请求，将信息返回给add_info函数，然后使用<code>UserInfo.bojects.create</code>函数将这个信息提交到数据库中去。</p><p><strong>删除操作 拼接</strong></p><p>通过get请求请求到要删除数据的id，直接删除即可</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">delete_info</span>(<span class="params">request</span>):</span><br><span class="line">    nid=request.GET.get(<span class="string">&#x27;nid&#x27;</span>)</span><br><span class="line">    UserInfo.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=nid).delete()</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;删除成功&#x27;</span>)</span><br></pre></td></tr></table></figure><p>用户表储存名称ID？</p><blockquote><p>ID,数据库范式（理论知识），常见开发都是这样，【节省储存开销】【进行连表，用id存储公司，】</p><p>名称，特别大的公司，查询的次数非常多，连表操作比较耗时【加速查找，允许数据冗余】</p></blockquote><p>在创建sql表的时候，可以对数据库范式id进行约束，<code>depart = models.ForeignKey(to=&quot;Department&quot;, to_field=&quot;id&quot;)</code> 意思是员工表的该部门id连接到department这张表。</p><p>级联删除：意思就是当我删除这个部门后，这个部门连带的所有员工都将被删除<code>depart = models.ForeignKey(to=&quot;Department&quot;, to_field=&quot;id&quot;,on_delete=models.CASCADE)</code>也可以进行置空，当部门删除的时候，将该部门下的所有员工所属部门变为null，<code>depart = models.ForeignKey(to=&quot;Department&quot;, to_field=&quot;id&quot;,on_delete=models.SET_NULL,null=True,blank=&quot;True&quot;)</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一篇文章带你入门爬虫</title>
      <link href="/posts/f1cd4e68.html"/>
      <url>/posts/f1cd4e68.html</url>
      
        <content type="html"><![CDATA[<h1>前言</h1><h2 id="http协议：">http协议：</h2><p>目前互联网上%90的网络传输都是基于http协议，但是弹幕可能采用的是websocket协议，<br>http协议是基于TCP/IP通信协议来传输数据的，</p><h1>http请求流程</h1><p>我们日常用浏览器搜索东西，输入的是url，浏览器会自动将其转化为http协议，（客户端向服务端发起request，服务器接受后返回一个response）</p><p>那么url全名叫统一资源定位符，协议+域名+路径+参数</p><table><thead><tr><th>协议</th><th>域名</th><th>路径</th><th>参数</th></tr></thead><tbody><tr><td>http://</td><td><a href="http://www.baidu.com:8080/">www.baidu.com:8080</a></td><td>news/index.asp?</td><td>boardid=5&amp;id=2423</td></tr></tbody></table><ol><li>host：指定请求资源的域名</li><li>user-agant简称ua，内容包含用户发出请求的用户信息，通常ua包含浏览器的信息</li><li>accept：告诉服务器客户端可以接收哪些类型的信息</li><li>cookie：cookie信息</li><li>content-type：来表示具体请求中的媒体类型信息</li><li>content-length：内容长度</li><li>content-range：相应的资源范围</li><li>accept-encoding：指定所能接受的编码方式</li><li>accept-language：浏览器可以接受的语言种类</li></ol><hr><h2 id="post请求和get请求">post请求和get请求</h2><p>post：向指定资源提交数据进行处理请求，例如提交表单或者上传文件，数据被包含在请求体中，post请求可能会导致新的资源的建立或者已有资源的修改</p><h2 id="http的相应方式">http的相应方式</h2><p>1**：服务器受到请求，需要请求者继续执行操作<br>2**：成功，操作被成功接收并处理<br>3**：重定向，需要进一步的操作以完成请求<br>4**：客户端错误，请求包含语法错误或者无法完成请求<br>5**：服务器错误，服务器在处理请求的过程中发生了错误</p><h2 id="cookie和session">cookie和session</h2><p>cookie简单来说就是一个凭证，一般浏览器在请求服务器的时候肯定会带上cookie，但是也有坏处，一套cookie往往对应的是一个用户的信息，请求太频繁很可能被对方识别为爬虫</p><p>session：会话，本来的含义是指有始有终的一系列动作，消息，我们可以这样理解，在一个客户端打开浏览器访问网站的时候，会生成一个cookie，sessionID，（sessionID包含于cookie中），这个ID每次的访问都会带上，而服务器会识别这个sessionID并且将与这个sessionID有关的数据都存在服务器上，由此来实现客户端的状态识别。因此session是基于cookie的</p><p>session与cookie相反，session是储存在服务器上的数据，只由客户端传上来的sessionID来进行判定，所以相对于cookie，session的安全性更高</p><p>一般sessionID会在浏览器被关闭时被丢弃，或者当session长期没有活跃，那么也会被识别为失效</p><p>流程就是：用户首次登录，生成一个seesion表，里面的key是hash生成的数据，value是一系列信息，同时在客户端本地生成一个cookie，包含sessionID，下次登录会自动携带sessionID，与服务器里的hash形式的key进行比较</p><p>知道了一些基本内容之后，下面就开始上代码咯</p><h2 id="搜索引擎">搜索引擎</h2><p>搜索引擎就是一个巨大的爬虫，他会先去爬取内容，然后会根据数据关键字和一些其他因素设置信息权重，最后出现在我们面前，所以说，网络中大部分的新闻网站基本上都不设防，新闻内容基本上都在网页的html代码里了，</p><h2 id="ajax异步加载">ajax异步加载</h2><p>（asynchronous JavaScript and xml），它允许网页在不刷熊整个页面的情况下，与服务器交换数据并更新部分页面内容</p><h1>代码部分</h1><h2 id="完整的爬虫函数">完整的爬虫函数</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests  <span class="comment"># 导入requests库，用于发送HTTP请求</span></span><br><span class="line"><span class="keyword">import</span> chardet   <span class="comment"># 导入chardet库，用于检测网页编码</span></span><br><span class="line"><span class="keyword">import</span> traceback  <span class="comment"># 导入traceback库，用于输出异常信息</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">downloader</span>(<span class="params">url, timeout=<span class="number">10</span>, headers=<span class="literal">None</span>, debug=<span class="literal">False</span>, binary=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="comment"># 定义一个名为downloader的函数，用于下载网页内容</span></span><br><span class="line">    <span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># - url: 必需，要下载的网页地址</span></span><br><span class="line">    <span class="comment"># - timeout: 可选，默认为10秒，请求超时时间</span></span><br><span class="line">    <span class="comment"># - headers: 可选，默认为None，HTTP请求头信息</span></span><br><span class="line">    <span class="comment"># - debug: 可选，默认为False，是否开启调试模式</span></span><br><span class="line">    <span class="comment"># - binary: 可选，默认为False，是否以二进制形式返回网页内容</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置默认的HTTP请求头信息，模拟IE浏览器访问</span></span><br><span class="line">    _headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: (<span class="string">&#x27;Mozilla/5.0 (compatible; MSIE 9.0; &#x27;</span></span><br><span class="line">                       <span class="string">&#x27;Windows NT 6.1; Win64; x64; Trident/5.0)&#x27;</span>),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化redirected_url为传入的url</span></span><br><span class="line">    redirected_url = url</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果headers参数不为空，则使用传入的请求头信息</span></span><br><span class="line">    <span class="keyword">if</span> headers:</span><br><span class="line">        _headers = headers</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 使用requests.get方法发送HTTP GET请求</span></span><br><span class="line">        r = requests.get(url, headers=_headers, timeout=timeout)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 根据binary参数决定返回的数据形式</span></span><br><span class="line">        <span class="keyword">if</span> binary:</span><br><span class="line">            <span class="comment"># 如果binary为True，返回网页的二进制内容</span></span><br><span class="line">            html = r.content</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 如果binary为False，使用chardet检测网页编码，并decode为字符串</span></span><br><span class="line">            encoding = chardet.detect(r.content)[<span class="string">&#x27;encoding&#x27;</span>]</span><br><span class="line">            html = r.content.decode(encoding)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取HTTP响应的状态码</span></span><br><span class="line">        status = r.status_code<span class="comment">#用get请求返回的r是可以获取状态码的</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取实际访问的URL（如果发生重定向）</span></span><br><span class="line">        redirected_url = r.url</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="comment"># 如果发生异常，检查debug参数是否开启</span></span><br><span class="line">        <span class="keyword">if</span> debug:</span><br><span class="line">            <span class="comment"># 如果开启，则输出异常的详细信息</span></span><br><span class="line">            traceback.print_exc()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 打印下载失败的信息</span></span><br><span class="line">        msg = <span class="string">&#x27;failed download: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(url)</span><br><span class="line">        <span class="built_in">print</span>(msg)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 根据binary参数决定返回的默认值</span></span><br><span class="line">        <span class="keyword">if</span> binary:</span><br><span class="line">            <span class="comment"># 如果binary为True，返回空的二进制数据</span></span><br><span class="line">            html = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 如果binary为False，返回空字符串</span></span><br><span class="line">            html = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置状态码为0，表示下载失败</span></span><br><span class="line">        status = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回状态码、网页内容及实际访问的URL</span></span><br><span class="line">    <span class="keyword">return</span> status, html, redirected_url</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 如果当前模块被直接运行，则执行以下代码</span></span><br><span class="line">    url = <span class="string">&#x27;http://news.baidu.com/&#x27;</span></span><br><span class="line">    <span class="comment"># 定义要下载的网页地址</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 调用downloader函数，下载网页内容</span></span><br><span class="line">    <span class="comment">#python函数原来可以有多个返回值</span></span><br><span class="line">    s, html, lost_url_found_by_大大派 = downloader(url)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印下载结果，包括状态码、网页内容长度及实际访问的URL</span></span><br><span class="line">    <span class="built_in">print</span>(s, <span class="built_in">len</span>(html), lost_url_found_by_大大派)</span><br></pre></td></tr></table></figure><h2 id="bs4">bs4</h2><p>将html的源代码传给bs4</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">py</span><br><span class="line">soup=BeautifulSoup(html_doc,<span class="string">&#x27;lxml&#x27;</span>)</span><br></pre></td></tr></table></figure><p>此时soup便接收到了html_doc文件里的源码，是这样的</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">html</span><br><span class="line"></span><br><span class="line">html_doc = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;学习python的正确姿势&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p class=&quot;title&quot;&gt;&lt;b&gt;小帅b的故事&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;有一天，小帅b想给大家讲两个笑话</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/1&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;一个笑话长&lt;/a&gt;,</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/2&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;一个笑话短&lt;/a&gt; ,</span></span><br><span class="line"><span class="string">他问大家，想听长的还是短的？&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">py</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取标题内容</span></span><br><span class="line"><span class="built_in">print</span>(soup.title.string)</span><br><span class="line"><span class="comment">#获取p标签里的内容</span></span><br><span class="line"><span class="built_in">print</span>(soup.p.string)</span><br><span class="line"><span class="comment">#获取title的父级标签</span></span><br><span class="line"><span class="built_in">print</span>(soup.title.parent.name)</span><br><span class="line"><span class="comment">#获取超链接</span></span><br><span class="line"><span class="built_in">print</span>(soup.a)</span><br><span class="line"><span class="comment">#获取所有超链接</span></span><br><span class="line"><span class="built_in">print</span>(soup.find_all(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line"><span class="comment">#获取id为link2的超链接</span></span><br><span class="line"><span class="built_in">print</span>(soup.find(<span class="built_in">id</span>=<span class="string">&quot;link2&quot;</span>))</span><br><span class="line"><span class="comment">#获取网页中所有内容</span></span><br><span class="line"><span class="built_in">print</span>(soup.get_text())</span><br></pre></td></tr></table></figure><p>这里也可以使用select</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">py</span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&quot;titile&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&quot;body a&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&quot;p &gt; #link1)</span></span><br></pre></td></tr></table></figure><p>那么我们在发送请求时接受 到了一个html，我们如何对该文件内所有的li标签获取文本呢？<br>参考这个豆瓣源码可能有更深刻的理解</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">py</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span> = soup.find(class_=<span class="string">&#x27;grid_view&#x27;</span>).find_all(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">        item_name = item.find(class_=<span class="string">&#x27;title&#x27;</span>).string</span><br><span class="line">        item_img = item.find(<span class="string">&#x27;a&#x27;</span>).find(<span class="string">&#x27;img&#x27;</span>).get(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">        item_index = item.find(class_=<span class="string">&#x27;&#x27;</span>).string</span><br><span class="line">        item_score = item.find(class_=<span class="string">&#x27;rating_num&#x27;</span>).string</span><br><span class="line">        item_author = item.find(<span class="string">&#x27;p&#x27;</span>).text</span><br><span class="line">        item_intr = item.find(class_=<span class="string">&#x27;inq&#x27;</span>).string</span><br><span class="line"></span><br><span class="line">        <span class="comment"># print(&#x27;爬取电影：&#x27; + item_index + &#x27; | &#x27; + item_name +&#x27; | &#x27; + item_img +&#x27; | &#x27; + item_score +&#x27; | &#x27; + item_author +&#x27; | &#x27; + item_intr )</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;爬取电影：&#x27;</span> + item_index + <span class="string">&#x27; | &#x27;</span> + item_name  +<span class="string">&#x27; | &#x27;</span> + item_score  +<span class="string">&#x27; | &#x27;</span> + item_intr )</span><br></pre></td></tr></table></figure><h2 id="数据保存到excel">数据保存到excel</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">py</span><br><span class="line"></span><br><span class="line"> <span class="keyword">import</span> xlwt</span><br><span class="line"> book=xlwt.Workbook(encoding=<span class="string">&#x27;utf-8&#x27;</span>,style_compression=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">sheet=book.add_sheet(<span class="string">&#x27;豆瓣电影Top250&#x27;</span>,cell_overwrite_ok=<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#创建表格第一栏</span></span><br><span class="line">sheet.write(<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;名称&#x27;</span>)</span><br><span class="line">sheet.write(<span class="number">0</span>,<span class="number">1</span>,<span class="string">&#x27;图片&#x27;</span>)</span><br><span class="line">sheet.write(<span class="number">0</span>,<span class="number">2</span>,<span class="string">&#x27;排名&#x27;</span>)</span><br><span class="line">sheet.write(<span class="number">0</span>,<span class="number">3</span>,<span class="string">&#x27;评分&#x27;</span>)</span><br><span class="line">sheet.write(<span class="number">0</span>,<span class="number">4</span>,<span class="string">&#x27;作者&#x27;</span>)</span><br><span class="line">sheet.write(<span class="number">0</span>,<span class="number">5</span>,<span class="string">&#x27;简介&#x27;</span>)</span><br><span class="line"><span class="comment">#将爬取到的数据写入excel</span></span><br><span class="line">sheet.write(n, <span class="number">0</span>, item_name)</span><br><span class="line">        sheet.write(n, <span class="number">1</span>, item_img)</span><br><span class="line">        sheet.write(n, <span class="number">2</span>, item_index)</span><br><span class="line">        sheet.write(n, <span class="number">3</span>, item_score)</span><br><span class="line">        sheet.write(n, <span class="number">4</span>, item_author)</span><br><span class="line">        sheet.write(n, <span class="number">5</span>, item_intr)</span><br><span class="line">book.save(<span class="string">u&#x27;豆瓣最受欢迎的250部电影&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="selenium">selenium</h2><p>Selenium 是一个开源的自动化工具，主要用于 Web 应用程序的测试。它可以模拟用户在浏览器上的操作，如点击、输入、导航等，也可以用于网络爬虫或其他自动化任务，所以selenium就是一个自动化爬虫工具，能直接打开浏览器，执行搜索任务</p><p><strong>selenium使用selenium webdriver打开浏览器，可以用headless chrome在无桌面环境下运行</strong></p><p><strong>selenium+xpath：首先selenium加载网页中的JavaScript，等待页面渲染完成后，再使用xpath查询动态生成的DOM结构</strong></p><p>这段代码可以显示动态加载</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">web = webdriver.Chrome()</span><br><span class="line">web.get(<span class="string">&quot;https://bz.zzzmh.cn/index&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(web.page_source)</span><br></pre></td></tr></table></figure><h3 id="使用selenium无需人工输入验证码获取cookies">使用selenium无需人工输入验证码获取cookies</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">login_auto</span>(<span class="params">login_url, username, password,</span></span><br><span class="line"><span class="params">               username_xpath, password_xpath,</span></span><br><span class="line"><span class="params">               submit_xpath, cookies_file, browser=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> browser <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        options = webdriver.ChromeOptions()</span><br><span class="line">        <span class="comment"># chrome在系统PATH时，可以不指定 binary_location </span></span><br><span class="line">        <span class="comment"># options.binary_location = ‘/usr/bin/google-chrome’</span></span><br><span class="line">        options.add_argument(<span class="string">&#x27;headless&#x27;</span>)</span><br><span class="line">        options.add_argument(<span class="string">&#x27;window-size=1200x600&#x27;</span>)</span><br><span class="line">        browser = webdriver.Chrome(chrome_options=options)</span><br><span class="line">    browser.maximize_window()</span><br><span class="line">    browser.get(login_url)</span><br><span class="line">    time.sleep(<span class="number">9</span>) <span class="comment"># 等登录加载完成</span></span><br><span class="line">    browser.find_element_by_xpath(username_xpath).send_keys(username)</span><br><span class="line">    browser.find_element_by_xpath(password_xpath).send_keys(password)</span><br><span class="line">    browser.find_element_by_xpath(submit_xpath).send_keys(Keys.ENTER)</span><br><span class="line">    time.sleep(<span class="number">9</span>) <span class="comment"># 等登录加载完成</span></span><br><span class="line">    cookies = browser.get_cookies()</span><br><span class="line">    <span class="built_in">print</span>(cookies)</span><br><span class="line">    save_cookies(cookies, cookies_file)</span><br></pre></td></tr></table></figure><h3 id="使用selenium进行人工输入验证码获取cookies">使用selenium进行人工输入验证码获取cookies</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">login_manually</span>(<span class="params">login_url, cookies_file, browser=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="comment"># 既然是手动，这里就不自动填写用户名和密码了</span></span><br><span class="line">    <span class="keyword">if</span> browser <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        browser = webdriver.Chrome()</span><br><span class="line">    browser.get(login_url)</span><br><span class="line">    time.sleep(<span class="number">30</span>) <span class="comment"># 给自己多了点时间输入用户名、密码、验证码</span></span><br><span class="line">    cookies = browser.get_cookies()<span class="comment">#直接用browser获取cookies</span></span><br><span class="line">    <span class="built_in">print</span>(cookies)</span><br><span class="line">    save_cookies(cookies, cookies_file)</span><br></pre></td></tr></table></figure><p><strong>打开猿人学，上下滑动，并且打开一篇文章，搜索框搜索并回车</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment">#打开Chrome浏览器</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"><span class="comment">#浏览器最大化</span></span><br><span class="line">driver.maximize_window()</span><br><span class="line"><span class="comment">#打开猿人学首页</span></span><br><span class="line">driver.get(<span class="string">&#x27;https://www.yuanrenxue.cn&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#滑动到页面中间处</span></span><br><span class="line">driver.execute_script(<span class="string">&quot;window.scrollTo(0,document.body.scrollHeight/2)&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#滑动到页面最下方</span></span><br><span class="line">driver.execute_script(<span class="string">&quot;window.scrollTo(0,document.body.scrollHeight)&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#滑动到页面最上方</span></span><br><span class="line">driver.execute_script(<span class="string">&quot;window.scrollTo(0,0)&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过html的class属性来定位链接位置，并点击</span></span><br><span class="line">driver.find_element(By.CLASS_NAME,<span class="string">&#x27;slide-left&#x27;</span>).click()</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#定位页面右上角的搜索图标并点击</span></span><br><span class="line">driver.find_element(By.CLASS_NAME,<span class="string">&#x27;search-show&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line"><span class="comment">#找到输入框</span></span><br><span class="line">search = driver.find_element(By.CLASS_NAME,<span class="string">&quot;search-input&quot;</span>)</span><br><span class="line"><span class="comment">#输入 Python教程</span></span><br><span class="line">search.send_keys(<span class="string">u&#x27;python教程&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">7</span>)</span><br><span class="line"><span class="comment">#回车</span></span><br><span class="line">search.send_keys(Keys.RETURN)</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p><strong>记得一定要调用driver.quit()退出</strong></p><p><strong>这里直接用了sleep进行等待网站加载，但是selenium有自己的等待函数</strong></p><h3 id="selenium定位元素的函数">selenium定位元素的函数</h3><p>类似<code>driver.find_element_by_class_name('search-show').click()</code></p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>find_element_by_class_name</td><td>通过class name定位元素</td></tr><tr><td>find_element_by_id</td><td>通过id定位元素</td></tr><tr><td>find_element_by_tag_name</td><td>通过html tag定位</td></tr><tr><td>find_element_by_css_selector</td><td>通过css来定位</td></tr><tr><td>find_element_by_name</td><td>通过name定位</td></tr><tr><td>find_element_by_xpath</td><td>通过xpath来定位</td></tr><tr><td>find_elements_by_link_text</td><td>通过文字链接来定位</td></tr></tbody></table><p><strong>find_element_by_link_text(u’Python教程’)</strong></p><p><strong>element后面多了一个s，会以列表的形式把定位到的相同元素全部返回，你要知道你需要的元素是第几个，通过数组下标来取对应的元素。比如你要点击某个网站第三个链接，写法如下： find_elements_by_tag_name(‘a’)[2].click()</strong></p><h3 id="获得chrome里的老cookie">获得chrome里的老cookie</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">options = webdriver.ChromeOptions()</span><br><span class="line"><span class="comment">#这里是chrome存放cookie的路径</span></span><br><span class="line">options.add_argument(<span class="string">&quot;user-data-dir=C:\\Users\\HN\\AppData\\Local\\Google\\Chrome\\User Data&quot;</span>)</span><br><span class="line"></span><br><span class="line">options.add_experimental_option(<span class="string">&quot;excludeSwitches&quot;</span>,[<span class="string">&quot;ignore-certificate-errors&quot;</span>])</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(executable_path=<span class="string">&quot;C:/chromedriver.exe&quot;</span>,options=options)</span><br><span class="line"></span><br><span class="line">driver.maximize_window()</span><br><span class="line"></span><br><span class="line">driver.get(<span class="string">&#x27;https://www.weibo.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(driver.get_cookies())</span><br></pre></td></tr></table></figure><h3 id="打开豆瓣网保存cookie至指定文件夹">打开豆瓣网保存cookie至指定文件夹</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(executable_path=<span class="string">&quot;C:/chromedriver.exe&quot;</span>)</span><br><span class="line">driver.maximize_window()</span><br><span class="line">driver.get(<span class="string">&#x27;https://www.douban.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">cookies = driver.get_cookies()</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;D:/test_cookies/db_cookie_1&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pickle.dump(cookies,f)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;done&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="删除cookie后用刚刚保存的cookie进行登录">删除cookie后用刚刚保存的cookie进行登录</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(executable_path=<span class="string">&quot;C:/chromedriver.exe&quot;</span>)</span><br><span class="line"><span class="comment">#不带cookies访问豆瓣</span></span><br><span class="line">driver.get(<span class="string">&#x27;https://www.douban.com&#x27;</span>)</span><br><span class="line"><span class="comment">#删掉cookies</span></span><br><span class="line">driver.delete_all_cookies()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;D:/test_cookies/db_cookie_1&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    cookies = pickle.load(f)</span><br><span class="line"><span class="keyword">for</span> cookie <span class="keyword">in</span> cookies:</span><br><span class="line">    driver.add_cookie(cookie)</span><br><span class="line">    <span class="built_in">print</span>(cookie)</span><br><span class="line"></span><br><span class="line"><span class="comment">#带我们保存的cookie访问豆瓣</span></span><br><span class="line">driver.get(<span class="string">&#x27;https://www.douban.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;done&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>为什么要这样做呢？因为只接待我们的cookies访问网站可能会失败</strong> <em>之后不同的账户按照不同的文件名就行，方便管理</em></p><h3 id="webdriverwait等待">webdriverwait等待</h3><p>设置等待时间，直到这个元素出现就停止等待，如果没有就抛出异常</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(executable_path=<span class="string">&quot;C:/chromedriver.exe&quot;</span>)</span><br><span class="line">driver.get(<span class="string">&#x27;https://www.yuanrenxue.cn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    element = WebDriverWait(driver, <span class="number">10</span>).until(</span><br><span class="line">        EC.presence_of_element_located((By.CLASS_NAME, <span class="string">&quot;search-show&quot;</span>))</span><br><span class="line">    )</span><br><span class="line">    element.click()</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    time.sleep(<span class="number">10</span>)</span><br><span class="line">    driver.quit()</span><br></pre></td></tr></table></figure><p><strong>上述是显示等待，也可以设置隐式等待，这个需要自行查阅，不再赘述</strong></p><h3 id="selenium控制键盘">selenium控制键盘</h3><p>自行百度。。</p><h3 id="实例：爬取极简壁纸">实例：爬取极简壁纸</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiofiles</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://bz.zzzmh.cn/&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">href,count</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;第<span class="subst">&#123;count&#125;</span>图片开始缓存&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">            <span class="keyword">async</span> <span class="keyword">with</span> session.get(href,headers=headers) <span class="keyword">as</span> p:</span><br><span class="line">                data = <span class="keyword">await</span> p.read()</span><br><span class="line">                <span class="keyword">async</span> <span class="keyword">with</span> aiofiles.<span class="built_in">open</span>(<span class="string">f&quot;C:\\Users\\Desktop\壁纸\&#123;count&#125;.jpg&quot;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">                    <span class="keyword">await</span> file.write(data)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;第<span class="subst">&#123;count&#125;</span>图片缓存成功&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;第<span class="subst">&#123;count&#125;</span>图片缓存失败&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;选择下载多少页的壁纸&quot;</span>)</span><br><span class="line">    a = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    web = webdriver.Chrome()</span><br><span class="line">    web.get(<span class="string">&quot;https://bz.zzzmh.cn/index&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">10</span>)</span><br><span class="line">    task = []</span><br><span class="line">    count = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(a):</span><br><span class="line">        img_List=(web.find_elements(by=<span class="string">&quot;xpath&quot;</span>,value=<span class="string">&#x27;//div[@class=&quot;img-box&quot;]&#x27;</span>))</span><br><span class="line">        <span class="comment">#//*[@id=&quot;app&quot;]/div/main/div/div/div/div[4]/div[11]</span></span><br><span class="line">        <span class="built_in">next</span> = web.find_element(by=<span class="string">&quot;xpath&quot;</span>,value=<span class="string">&#x27;//div[@class=&quot;vue_pagination_group&quot;]/div[@class=&quot;vue_pagination_next vue_pagination_item&quot;]&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> img_List:</span><br><span class="line">            src = i.find_element(by=<span class="string">&quot;xpath&quot;</span>,value=<span class="string">&#x27;./span[@class=&quot;down-span&quot;]/a&#x27;</span>)</span><br><span class="line">            src= src.get_attribute(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(src)</span><br><span class="line">            t = asyncio.create_task(download(src,count))</span><br><span class="line">            task.append(t)</span><br><span class="line">            count+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> k!=a-<span class="number">1</span>:</span><br><span class="line">            <span class="built_in">next</span>.click()</span><br><span class="line">        time.sleep(<span class="number">3</span>)    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> asyncio.wait(task)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    asyncio.run(main())</span><br></pre></td></tr></table></figure><h2 id="反爬流程">反爬流程</h2><ol><li>看到你是同一个ip多次访问-&gt;封锁你的IP地址</li><li>换了代理IP之后-&gt;需要你使用登录cookie才能访问</li><li>开启多线程，并且换一个代理ip池进行爬-&gt;将网站不返回html，用ajax加载</li></ol><h2 id="selenium-phantomjs">selenium+phantomjs</h2><p>phantomjs是一个基于webkit的浏览器引擎，可以做到无声无息的操作各种网站，所以对于市面上大多通过js渲染的动态网站，难以解析的网站，需要爬的话就要用到selenium+phantomjs<br>爬取蔡徐坤形象大使信息</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">py</span><br><span class="line"></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最新版的selenium(4.x.x)已经不支持PhantomJS。如要用PhantomJS，可用旧版本selenium。如pip install selenium==3.8.0。</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> TimeoutException</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"></span><br><span class="line"><span class="comment"># browser = webdriver.PhantomJS()</span></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">WAIT = WebDriverWait(browser, <span class="number">10</span>)</span><br><span class="line">browser.set_window_size(<span class="number">1400</span>, <span class="number">900</span>)</span><br><span class="line"></span><br><span class="line">book = xlwt.Workbook(encoding=<span class="string">&#x27;utf-8&#x27;</span>, style_compression=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">sheet = book.add_sheet(<span class="string">&#x27;蔡徐坤篮球&#x27;</span>, cell_overwrite_ok=<span class="literal">True</span>)</span><br><span class="line">sheet.write(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;名称&#x27;</span>)</span><br><span class="line">sheet.write(<span class="number">0</span>, <span class="number">1</span>, <span class="string">&#x27;地址&#x27;</span>)</span><br><span class="line">sheet.write(<span class="number">0</span>, <span class="number">2</span>, <span class="string">&#x27;描述&#x27;</span>)</span><br><span class="line">sheet.write(<span class="number">0</span>, <span class="number">3</span>, <span class="string">&#x27;观看次数&#x27;</span>)</span><br><span class="line">sheet.write(<span class="number">0</span>, <span class="number">4</span>, <span class="string">&#x27;弹幕数&#x27;</span>)</span><br><span class="line">sheet.write(<span class="number">0</span>, <span class="number">5</span>, <span class="string">&#x27;发布时间&#x27;</span>)</span><br><span class="line"></span><br><span class="line">n = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;开始访问b站....&#x27;</span>)</span><br><span class="line">        browser.get(<span class="string">&quot;https://www.bilibili.com/&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 被那个破登录遮住了</span></span><br><span class="line">        <span class="comment"># index = WAIT.until(EC.element_to_be_clickable((By.CSS_SELECTOR, &quot;#primary_menu &gt; ul &gt; li.home &gt; a&quot;)))</span></span><br><span class="line">        <span class="comment"># index.click()</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">input</span> = WAIT.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">&quot;#nav_searchform &gt; input&quot;</span>)))</span><br><span class="line">        submit = WAIT.until(EC.element_to_be_clickable(</span><br><span class="line">            (By.XPATH, <span class="string">&#x27;/html/body/div[2]/div/div[1]/div[1]/div/div[2]/div/form/div/button&#x27;</span>)))</span><br><span class="line"></span><br><span class="line">        <span class="built_in">input</span>.send_keys(<span class="string">&#x27;蔡徐坤 篮球&#x27;</span>)</span><br><span class="line">        submit.click()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 跳转到新的窗口</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;跳转到新窗口&#x27;</span>)</span><br><span class="line">        all_h = browser.window_handles</span><br><span class="line">        browser.switch_to.window(all_h[<span class="number">1</span>])</span><br><span class="line">        get_source()</span><br><span class="line"></span><br><span class="line">        total = WAIT.until(EC.presence_of_element_located((By.CSS_SELECTOR,</span><br><span class="line">                                                           <span class="string">&quot;#all-list &gt; div.flow-loader &gt; div.page-wrap &gt; div &gt; ul &gt; li.page-item.last &gt; button&quot;</span>)))</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(total.text)</span><br><span class="line">    <span class="keyword">except</span> TimeoutException:</span><br><span class="line">        <span class="keyword">return</span> search()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">next_page</span>(<span class="params">page_num</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;获取下一页数据&#x27;</span>)</span><br><span class="line">        next_btn = WAIT.until(EC.element_to_be_clickable((By.CSS_SELECTOR,</span><br><span class="line">                                                          <span class="string">&#x27;#all-list &gt; div.flow-loader &gt; div.page-wrap &gt; div &gt; ul &gt; li.page-item.next &gt; button&#x27;</span>)))</span><br><span class="line">        next_btn.click()</span><br><span class="line">        WAIT.until(EC.text_to_be_present_in_element((By.CSS_SELECTOR,</span><br><span class="line">                                                     <span class="string">&#x27;#all-list &gt; div.flow-loader &gt; div.page-wrap &gt; div &gt; ul &gt; li.page-item.active &gt; button&#x27;</span>),</span><br><span class="line">                                                    <span class="built_in">str</span>(page_num)))</span><br><span class="line">        get_source()</span><br><span class="line">    <span class="keyword">except</span> TimeoutException:</span><br><span class="line">        browser.refresh()</span><br><span class="line">        <span class="keyword">return</span> next_page(page_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_to_excel</span>(<span class="params">soup</span>):</span><br><span class="line">    <span class="built_in">list</span> = soup.find(class_=<span class="string">&#x27;video-list clearfix&#x27;</span>).find_all(class_=<span class="string">&#x27;video-item matrix&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">        item_title = item.find(<span class="string">&#x27;a&#x27;</span>).get(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">        item_link = item.find(<span class="string">&#x27;a&#x27;</span>).get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">        item_dec = item.find(class_=<span class="string">&#x27;des hide&#x27;</span>).text</span><br><span class="line">        item_view = item.find(class_=<span class="string">&#x27;so-icon watch-num&#x27;</span>).text</span><br><span class="line">        item_biubiu = item.find(class_=<span class="string">&#x27;so-icon hide&#x27;</span>).text</span><br><span class="line">        item_date = item.find(class_=<span class="string">&#x27;so-icon time&#x27;</span>).text</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;爬取：&#x27;</span> + item_title)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">global</span> n</span><br><span class="line"></span><br><span class="line">        sheet.write(n, <span class="number">0</span>, item_title)</span><br><span class="line">        sheet.write(n, <span class="number">1</span>, item_link)</span><br><span class="line">        sheet.write(n, <span class="number">2</span>, item_dec)</span><br><span class="line">        sheet.write(n, <span class="number">3</span>, item_view)</span><br><span class="line">        sheet.write(n, <span class="number">4</span>, item_biubiu)</span><br><span class="line">        sheet.write(n, <span class="number">5</span>, item_date)</span><br><span class="line"></span><br><span class="line">        n = n + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_source</span>():</span><br><span class="line">    WAIT.until(EC.presence_of_element_located(</span><br><span class="line">        (By.CSS_SELECTOR, <span class="string">&#x27;#all-list &gt; div.flow-loader &gt; div.filter-wrap&#x27;</span>)))</span><br><span class="line"></span><br><span class="line">    html = browser.page_source</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;到这&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    save_to_excel(soup)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        total = search()</span><br><span class="line">        <span class="built_in">print</span>(total)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">int</span>(total + <span class="number">1</span>)):</span><br><span class="line">            next_page(i)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        browser.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line">    book.save(<span class="string">&#x27;蔡徐坤篮球.xlsx&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="如何爬取动态的json数据">如何爬取动态的json数据</h2><p>这里我们以微信的json数据为例</p><p>将python对象转化为json是<code>json.dumps()</code>,将json数据转化为python对象是<code>json.loads()</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">py</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">jsondata = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;Uin&quot;:0,</span></span><br><span class="line"><span class="string">&quot;UserName&quot;:&quot;@c482d142bc698bc3971d9f8c26335c5c&quot;,</span></span><br><span class="line"><span class="string">&quot;NickName&quot;:&quot;小帅b&quot;,</span></span><br><span class="line"><span class="string">&quot;HeadImgUrl&quot;:&quot;/cgi-bin/mmwebwx-bin/webwxgeticon?seq=500080&amp;username=@c482d142bc698bc3971d9f8c26335c5c&amp;skey=@crypt_b0f5e54e_b80a5e6dffebd14896dc9c72049712bf&quot;,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">...此处省略一些..</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;DisplayName&quot;:&quot;&quot;,</span></span><br><span class="line"><span class="string">&quot;ChatRoomId&quot;:0,</span></span><br><span class="line"><span class="string">&quot;KeyWord&quot;:&quot;che&quot;,</span></span><br><span class="line"><span class="string">&quot;EncryChatRoomId&quot;:&quot;&quot;,</span></span><br><span class="line"><span class="string">&quot;IsOwner&quot;:0</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#这里将json数据转化为字典对象</span></span><br><span class="line">myfriend = json.loads(jsondata)</span><br><span class="line"><span class="comment">#获取昵称</span></span><br><span class="line">myfriend.get(<span class="string">&#x27;NickName&#x27;</span>)</span><br></pre></td></tr></table></figure><p>那么对于json数组呢？</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">py</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;MemberList&quot;</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;UserName&quot;</span>:<span class="string">&quot;小帅b&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sex&quot;</span>:<span class="string">&quot;男&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;UserName&quot;</span>:<span class="string">&quot;小帅b的1号女朋友&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sex&quot;</span>:<span class="string">&quot;女&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;UserName&quot;</span>:<span class="string">&quot;小帅b的2号女朋友&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sex&quot;</span>:<span class="string">&quot;女&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候我们想要获取好友列表<br><code>myfriends=json.loads(jsondata) menberList=myfriends.get('MemberList')</code></p><h2 id="使用多线程进行快速爬取">使用多线程进行快速爬取</h2><ol><li>并发就是在一个时间点，同时执行多个进程</li><li>互斥锁就是调整线程安全有序的执行</li><li>python里面有一个叫做GIL锁，用来控制线程执行权限，</li><li>协程也叫微线程，在一个线程里面可以执行多个函数，线程和进程是通过系统调度的，微线程则不需要，可以根据自己需要调度，微线程在函数之间切换所以开销很小</li></ol><h3 id="线程-线程池">线程+线程池</h3><h4 id="Thread基本语法">Thread基本语法</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">300</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;func&quot;</span>,i)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    i=Thread(target=func)</span><br><span class="line">    i.start()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">400</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;main&quot;</span>,i)</span><br></pre></td></tr></table></figure><p>此外进程是process，他和Thread的语法相似，但是却又本质上的区别，process会有一个独立的内存空间</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">300</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;func&quot;</span>,i)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    i=Process(target=func)</span><br><span class="line">    i.start()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">400</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;main&quot;</span>,i)</span><br></pre></td></tr></table></figure><h4 id="线程池">线程池</h4><p>线程池就是开始多个线程一起执行任务</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">300</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;func&quot;</span>,i)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor(<span class="number">50</span>) <span class="keyword">as</span> t:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">            t.submit(func)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;main执行完毕&quot;</span>)</span><br></pre></td></tr></table></figure><p>进程池只需要改为ProcessPoolExecutor即可，语法一样，但是注意线程和进程不是一个东西</p><h2 id="协程">协程</h2><p>协程就是：当程序遇见IO操作的时候，可以选择性的切换到其他任务上，在微观上就是一个任务一个任务的切换，切换条件就是IO操作，在宏观上看到多个任务一起在执行</p><h3 id="协程，异步操作">协程，异步操作</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;func1&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">4</span>)</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;func2&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func3</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;func3&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    tasks=[func1(),func2(),func3()]</span><br><span class="line">    <span class="keyword">await</span> asyncio.wait(tasks)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    fi=func1()</span><br><span class="line">    fj=func2()</span><br><span class="line">    fk=func3()</span><br><span class="line">    tasks=[fi,fj,fk]</span><br><span class="line">    asyncio.run(asyncio.wait(tasks))</span><br></pre></td></tr></table></figure><p>await挂起，async携程</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;准备下载&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">4</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;下载完成&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    urls=&#123;</span><br><span class="line">        <span class="string">&quot;https://www.baidu.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://www.sina.com.cn&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://www.sohu.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://www.qq.com&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    tasks=[]</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        d=func1(url)</span><br><span class="line">        tasks.append(d)</span><br><span class="line">    <span class="keyword">await</span> asyncio.wait(tasks)<span class="comment">#task是一个敖汉了多个协程任务的列表</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    asyncio.run(main())</span><br></pre></td></tr></table></figure><ul><li><strong><code>asyncio.create_task</code></strong>: 创建并启动一个任务，但不会阻塞当前协程的执行。</li><li><strong><code>await asyncio.wait</code></strong> 或 <strong><code>await asyncio.gather</code></strong>: 用于等待所有任务完成，并可以选择性地收集任务的结果。</li></ul><p>因此，你可以在创建任务后继续执行其他操作，而不需要立即使用 <code>await</code> 暂停执行。只有当你需要等待这些任务完成并收集结果时，才会使用 <code>await</code> 关键字。</p><h2 id="反爬大法">反爬大法</h2><h3 id="cookie-headers">cookie+headers</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">py</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">headers = &#123;    <span class="comment"># 假装自己是浏览器    &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/73.0.3683.75 Chrome/73.0.3683.75 Safari/537.36&#x27;,    # 把你刚刚拿到的Cookie塞进来    &#x27;Cookie&#x27;: &#x27;eda38d470a662ef3606390ac3b84b86f9; Hm_lvt_f1d3b035c559e31c390733e79e080736=1553503899; biihu__user_login=omvZVatKKSlcXbJGmXXew9BmqediJ4lzNoYGzLQjTR%2Fjw1wOz3o4lIacanmcNncX1PsRne5tXpE9r1sqrkdhAYQrugGVfaBICYp8BAQ7yBKnMpAwicq7pZgQ2pg38ZzFyEZVUvOvFHYj3cChZFEWqQ%3D%3D; Hm_lpvt_f1d3b035c559e31c390733e79e080736=1553505597&#x27;,&#125;</span></span><br><span class="line">session = requests.Session()response = session.get(<span class="string">&#x27;https://biihu.cc/people/wistbean%E7%9C%9F%E7%89%B9%E4%B9%88%E5%B8%85&#x27;</span>, headers=headers)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><h3 id="表单请求大法-知乎">表单请求大法+知乎</h3><p>通过抓包，获取请求登录的时候需要用到的用户名密码参数，以表单的形式请求服务器</p><h3 id="验证码">验证码</h3><p>pytesseract是python中的一个图像识别工具，可以对网站中的验证码进行识别<br><strong>注意这里不仅需要在ide中pip pytesseract还需要在电脑上安装tesseract-ocr以及环境变量配置</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">py</span><br><span class="line">captcha = Image.<span class="built_in">open</span>(<span class="string">&quot;claptcha2.png&quot;</span>)</span><br><span class="line">result = pytesseract.image_to_string(captcha)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>那么对于某些不太清晰的验证码，有很多噪点我们怎么整呢？</p><p>灰度处理+二值化</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">py</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert_img</span>(<span class="params">img,threshold</span>):    </span><br><span class="line">    img = img.convert(<span class="string">&quot;L&quot;</span>)  <span class="comment"># 处理灰度  </span></span><br><span class="line">    pixels = img.load()   </span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(img.width):   </span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(img.height):   </span><br><span class="line">            <span class="keyword">if</span> pixels[x, y] &gt; threshold:    </span><br><span class="line">                pixels[x, y] = <span class="number">255</span>       </span><br><span class="line">            <span class="keyword">else</span>:              </span><br><span class="line">                pixels[x, y] = <span class="number">0</span>  </span><br><span class="line">    <span class="keyword">return</span> img</span><br></pre></td></tr></table></figure><p>降噪</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">py</span><br><span class="line"></span><br><span class="line">data = img.getdata()  </span><br><span class="line">w,h = img.size    </span><br><span class="line">count = <span class="number">0</span>   </span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,h-<span class="number">1</span>):       </span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, h - <span class="number">1</span>):  </span><br><span class="line">        <span class="comment"># 找出各个像素方向         </span></span><br><span class="line">        mid_pixel = data[w * y + x]     </span><br><span class="line">        <span class="keyword">if</span> mid_pixel == <span class="number">0</span>:             </span><br><span class="line">            top_pixel = data[w * (y - <span class="number">1</span>) + x]       </span><br><span class="line">            left_pixel = data[w * y + (x - <span class="number">1</span>)]      </span><br><span class="line">            down_pixel = data[w * (y + <span class="number">1</span>) + x]      </span><br><span class="line">            right_pixel = data[w * y + (x + <span class="number">1</span>)]</span><br><span class="line">            <span class="keyword">if</span> top_pixel == <span class="number">0</span>:                 </span><br><span class="line">                   count += <span class="number">1</span>           </span><br><span class="line">            <span class="keyword">if</span> left_pixel == <span class="number">0</span>:        </span><br><span class="line">                   count += <span class="number">1</span>              </span><br><span class="line">            <span class="keyword">if</span> down_pixel == <span class="number">0</span>:    </span><br><span class="line">                   count += <span class="number">1</span>              </span><br><span class="line">            <span class="keyword">if</span> right_pixel == <span class="number">0</span>:   </span><br><span class="line">                  count += <span class="number">1</span>         </span><br><span class="line">            <span class="keyword">if</span> count &gt; <span class="number">4</span>:        </span><br><span class="line">                  img.putpixel((x, y), <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h2 id="爬取斗破苍穹动漫30章">爬取斗破苍穹动漫30章</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">os.mkdir(<span class="string">&quot;C:\\Users\侯卓林\Desktop/漫画&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">590</span>,<span class="number">616</span>):</span><br><span class="line">    <span class="comment">#这个能进入每个章节的页面</span></span><br><span class="line">    url=<span class="string">&quot;https://www.czmanga.com/comic/chapter/doupocangqiong-zhiyinmankerenxiang_hsvfkb/0_&quot;</span>+<span class="built_in">str</span>(i)+<span class="string">&quot;.html&quot;</span></span><br><span class="line">    re=requests.get(url)</span><br><span class="line">    soup=BeautifulSoup(re.text,<span class="string">&quot;lxml&quot;</span>)</span><br><span class="line">    url_img=soup.find_all(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">    <span class="comment">#每个章节创建一个文件夹，然后下载图片</span></span><br><span class="line">    os.mkdir(<span class="string">&quot;C:\\Users\侯卓林\Desktop/漫画/&quot;</span>+<span class="built_in">str</span>(i))</span><br><span class="line">    shix=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> url_img:</span><br><span class="line">        <span class="built_in">print</span>(j.get(<span class="string">&#x27;src&#x27;</span>))</span><br><span class="line">        urlretrieve(j.get(<span class="string">&#x27;src&#x27;</span>),<span class="string">&quot;C:/Users/侯卓林/Desktop/漫画/&quot;</span>+<span class="built_in">str</span>(i)+<span class="string">&quot;/&quot;</span>+<span class="built_in">str</span>(shix)+<span class="string">&quot;.jpg&quot;</span>)</span><br><span class="line">        shix+=<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="异步async-await语法爬取《妖怪名单》">异步async await语法爬取《妖怪名单》</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">download_comic</span>(<span class="params">session, name, link_list</span>):<span class="comment">#异步函数创建每章节漫画名</span></span><br><span class="line">    <span class="comment"># 创建文件夹</span></span><br><span class="line">    folder_path = <span class="string">f&quot;D:/comic/妖怪名单/<span class="subst">&#123;name&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(folder_path):</span><br><span class="line">        os.mkdir(folder_path)</span><br><span class="line"></span><br><span class="line">    tasks = []</span><br><span class="line">    <span class="keyword">for</span> index, link <span class="keyword">in</span> <span class="built_in">enumerate</span>(link_list, start=<span class="number">1</span>):</span><br><span class="line">        file_path = <span class="string">f&quot;<span class="subst">&#123;folder_path&#125;</span>/<span class="subst">&#123;index&#125;</span>.jpg&quot;</span></span><br><span class="line">        task = asyncio.create_task(download_image(session, link, file_path))<span class="comment">#安排这个函数进行运行</span></span><br><span class="line">        tasks.append(task)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> asyncio.gather(*tasks)<span class="comment">#await会让当前函数停止，直到所有任务都完成</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">download_image</span>(<span class="params">session, url, file_path</span>):</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> response:</span><br><span class="line">        <span class="keyword">if</span> response.status == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(<span class="keyword">await</span> response.read())</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">314</span>, <span class="number">570</span>):</span><br><span class="line">            url = <span class="string">f&quot;https://www.baozimh.com/user/page_direct?comic_id=yaoguaimingdan-tangrenjia&amp;section_slot=0&amp;chapter_slot=<span class="subst">&#123;i&#125;</span>&quot;</span></span><br><span class="line">            <span class="keyword">async</span> <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> response:</span><br><span class="line">                <span class="keyword">if</span> response.status == <span class="number">200</span>:</span><br><span class="line">                    html = etree.HTML(<span class="keyword">await</span> response.text())</span><br><span class="line">                    name = html.xpath(<span class="string">&#x27;//*[@id=&quot;layout&quot;]/div/div[1]/div/div/span&#x27;</span>)[<span class="number">0</span>].text</span><br><span class="line">                    link_list = html.xpath(<span class="string">&#x27;//*[contains(@id, &quot;chapter-img&quot;)]/@src&#x27;</span>)</span><br><span class="line">                    <span class="keyword">await</span> download_comic(session, name, link_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行主函数</span></span><br><span class="line">asyncio.run(main())</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="网易云音乐音乐">网易云音乐音乐</h2><p>找到每个音乐的id，然后将这段链接输入下来标注id即可</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250111181535164.png" alt="image-20250111181535164"></p><p>因为网易云在线播放每首歌曲时，都有一个外链地址，这是不会变的，跟每首歌的唯一一个id绑定在一起</p><p>当然这不适用于付费歌曲，这样会404</p><h2 id="xpath">xpath</h2><p>xpath是一种用于在xml文档中定位节点的语言，它可以用于从xml文档中提取数据，以及在xml文档中进行搜索和过滤操作，xpath使用路径表达式来描述节点的位置，</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250115184801464.png" alt="image-20250115184801464"></p><p>xpath基础使用</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.douguo.com/&#x27;</span></span><br><span class="line"></span><br><span class="line">res = requests.get(url)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(res.text)</span></span><br><span class="line">html = etree.HTML(res.text)</span><br><span class="line"><span class="comment"># /从根节点选取（取子节点）。</span></span><br><span class="line">rest = html.xpath(<span class="string">&#x27;/html/head/title/text()&#x27;</span>)  <span class="comment"># 返回Element对象</span></span><br><span class="line">title_text = html.xpath(<span class="string">&#x27;//title/text()&#x27;</span>)<span class="comment">#这个是选取所有title标签的text内容</span></span><br><span class="line">attr = html.xpath(<span class="string">&#x27;//meta/@name&#x27;</span>)<span class="comment">#这个是选取所有meta标签的name属性值</span></span><br><span class="line">index = html.xpath(<span class="string">&#x27;//meta[@name=&quot;author&quot;]&#x27;</span>)<span class="comment">#这个是选取所有name属性值为author的meta标签</span></span><br><span class="line">index = html.xpath(<span class="string">&#x27;//*[@class=&quot;item&quot;]&#x27;</span>)<span class="comment">#这个是选取所有class属性值为item的标签</span></span><br><span class="line">index = html.xpath(<span class="string">&#x27;//meta[@*=&quot;keywords&quot;]&#x27;</span>)<span class="comment">#这个是选取所有含有keywords的meta标签</span></span><br><span class="line">link_list=html.xpath(<span class="string">&#x27;//*[contains(@id, &quot;chapter-img)]/@src &#x27;</span>)<span class="comment">#寻找元素中id包含又chapter-img元素的标签中的src</span></span><br><span class="line"><span class="built_in">print</span>(rest)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250111215937861.png" alt="image-20250111215937861"></p><h2 id="soup">soup</h2><h3 id="find方法">find方法</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">返回一个对象</span><br><span class="line">soup.find(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">soup.find(<span class="string">&#x27;a&#x27;</span>, class_=<span class="string">&#x27;xxx&#x27;</span>) <span class="comment"># 注意class后的下划线</span></span><br><span class="line">soup.find(<span class="string">&#x27;a&#x27;</span>, title=<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line">soup.find(<span class="string">&#x27;a&#x27;</span>, <span class="built_in">id</span>=<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line">soup.find(<span class="string">&#x27;a&#x27;</span>, <span class="built_in">id</span>=<span class="built_in">compile</span>(<span class="string">r&#x27;xxx&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="find-all">find_all</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">soup.find_all(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">soup.find_all([<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;span&#x27;</span>]) <span class="comment">#返回所有的a和span标签</span></span><br><span class="line">soup.find_all(<span class="string">&#x27;a&#x27;</span>, class_=<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line">soup.find_all(<span class="string">&#x27;a&#x27;</span>, <span class="built_in">id</span>=<span class="built_in">compile</span>(<span class="string">r&#x27;xxx&#x27;</span>))</span><br><span class="line"><span class="comment"># 提取出前两个符合要求的</span></span><br><span class="line">soup.find_all(<span class="string">&#x27;a&#x27;</span>, limit=<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h3 id="获取文本">获取文本</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取标签的值的三种方法</span></span><br><span class="line"> </span><br><span class="line">soup.p.string</span><br><span class="line"> </span><br><span class="line">soup.p.text</span><br><span class="line"> </span><br><span class="line">soup.p.get.text()</span><br></pre></td></tr></table></figure><h3 id="获取属性">获取属性</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取p标签的属性</span></span><br><span class="line"><span class="comment"># 方法一</span></span><br><span class="line">soup.p.attrs(返回字典) <span class="keyword">or</span> soup.p.attrs[<span class="string">&#x27;class&#x27;</span>](<span class="keyword">class</span>返回列表，其余属性返回字符串)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line">soup.p[<span class="string">&#x27;class&#x27;</span>](<span class="keyword">class</span>返回列表，其余属性返回字符串)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 方法三</span></span><br><span class="line">soup.p.get(<span class="string">&#x27;class&#x27;</span>)(<span class="keyword">class</span>返回列表，其余属性返回字符串)</span><br></pre></td></tr></table></figure><h2 id="如何抓取一部视频">如何抓取一部视频</h2><p>视频的话大部分是将用户上传的视频首先进行转码，然后进行切片处理，把单个文件进行拆分，提高加载速度</p><p>m3u8就是将视频分割成多个小的ts（transport stream）通过索引列表进行管理</p><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250113213816133.png" alt="image-20250113213816133"></p><p>视频标签一定是video，有的视频反扒网站会对每个url的note设置一个动态的字符串，如果长时间未更改这个字符串则自动被删除，不能用该note进入该视频片段</p><h2 id="抓取大量新闻页面">抓取大量新闻页面</h2><p>新闻类网址都做了大量seo，他们把新闻网址都静态化了，基本上都是html，htm，shtml等结尾，后面再加任何请求参数都无济于事<strong>有少部分新闻网站以参数id的形式动态获取新闻网页</strong></p><h3 id="对url进行清洗">对url进行清洗</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">g_bin_postfix = <span class="built_in">set</span>([</span><br><span class="line">    <span class="string">&#x27;exe&#x27;</span>, <span class="string">&#x27;doc&#x27;</span>, <span class="string">&#x27;docx&#x27;</span>, <span class="string">&#x27;xls&#x27;</span>, <span class="string">&#x27;xlsx&#x27;</span>, <span class="string">&#x27;ppt&#x27;</span>, <span class="string">&#x27;pptx&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;pdf&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;jpg&#x27;</span>, <span class="string">&#x27;png&#x27;</span>, <span class="string">&#x27;bmp&#x27;</span>, <span class="string">&#x27;jpeg&#x27;</span>, <span class="string">&#x27;gif&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;zip&#x27;</span>, <span class="string">&#x27;rar&#x27;</span>, <span class="string">&#x27;tar&#x27;</span>, <span class="string">&#x27;bz2&#x27;</span>, <span class="string">&#x27;7z&#x27;</span>, <span class="string">&#x27;gz&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;flv&#x27;</span>, <span class="string">&#x27;mp4&#x27;</span>, <span class="string">&#x27;avi&#x27;</span>, <span class="string">&#x27;wmv&#x27;</span>, <span class="string">&#x27;mkv&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;apk&#x27;</span>,</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">g_news_postfix = [</span><br><span class="line">    <span class="string">&#x27;.html?&#x27;</span>, <span class="string">&#x27;.htm?&#x27;</span>, <span class="string">&#x27;.shtml?&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;.shtm?&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clean_url</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="comment"># 1. 是否为合法的http url</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> url.startswith(<span class="string">&#x27;http&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 2. 去掉静态化url后面的参数</span></span><br><span class="line">    <span class="keyword">for</span> np <span class="keyword">in</span> g_news_postfix:</span><br><span class="line">        p = url.find(np)</span><br><span class="line">        <span class="keyword">if</span> p &gt; -<span class="number">1</span>:</span><br><span class="line">            p = url.find(<span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            url = url[:p]</span><br><span class="line">            <span class="keyword">return</span> url</span><br><span class="line">    <span class="comment"># 3. 不下载二进制类内容的链接</span></span><br><span class="line">    up = urlparse.urlparse(url)</span><br><span class="line">    path = up.path</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> path:</span><br><span class="line">        path = <span class="string">&#x27;/&#x27;</span></span><br><span class="line">    postfix = path.split(<span class="string">&#x27;.&#x27;</span>)[-<span class="number">1</span>].lower()</span><br><span class="line">    <span class="keyword">if</span> postfix <span class="keyword">in</span> g_bin_postfix:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4. 去掉标识流量来源的参数</span></span><br><span class="line">    <span class="comment"># badquery = [&#x27;spm&#x27;, &#x27;utm_source&#x27;, &#x27;utm_source&#x27;, &#x27;utm_medium&#x27;, &#x27;utm_campaign&#x27;]</span></span><br><span class="line">    good_queries = []</span><br><span class="line">    <span class="keyword">for</span> query <span class="keyword">in</span> up.query.split(<span class="string">&#x27;&amp;&#x27;</span>):</span><br><span class="line">        qv = query.split(<span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> qv[<span class="number">0</span>].startswith(<span class="string">&#x27;spm&#x27;</span>) <span class="keyword">or</span> qv[<span class="number">0</span>].startswith(<span class="string">&#x27;utm_&#x27;</span>):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(qv) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        good_queries.append(query)</span><br><span class="line">    query = <span class="string">&#x27;&amp;&#x27;</span>.join(good_queries)</span><br><span class="line">    url = urlparse.urlunparse((</span><br><span class="line">        up.scheme,</span><br><span class="line">        up.netloc,</span><br><span class="line">        path,</span><br><span class="line">        up.params,</span><br><span class="line">        query,</span><br><span class="line">        <span class="string">&#x27;&#x27;</span>  <span class="comment">#  crawler do not care fragment</span></span><br><span class="line">    ))</span><br><span class="line">    <span class="keyword">return</span> url</span><br></pre></td></tr></table></figure><h3 id="创建基于leveldb的urlDB">创建基于leveldb的urlDB</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> leveldb</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UrlDB</span>:</span><br><span class="line">    <span class="comment">#use levelDB to store URLs what have been done(succeed or daile)</span></span><br><span class="line">    status_failure=<span class="string">b&#x27;0&#x27;</span></span><br><span class="line">    status_success=<span class="string">b&#x27;1&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,db_name</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name=db_name+<span class="string">&#x27;.urldb&#x27;</span></span><br><span class="line">        <span class="variable language_">self</span>.db=leveldb.LevelDB(<span class="variable language_">self</span>,name)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_success</span>(<span class="params">self,url</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(url,<span class="built_in">str</span>):</span><br><span class="line">            url=url.encode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">            <span class="variable language_">self</span>.db.Put(url,<span class="variable language_">self</span>.status_success)</span><br><span class="line">            s=<span class="literal">True</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            s=<span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_failure</span>(<span class="params">self,url</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(url,<span class="built_in">str</span>):</span><br><span class="line">            url=url.encode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="variable language_">self</span>.db.Put(url,<span class="variable language_">self</span>.status_failure)</span><br><span class="line">            s=<span class="literal">True</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            s=<span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has</span>(<span class="params">self,url</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(url,<span class="built_in">str</span>):</span><br><span class="line">            url=url.encode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            attr=<span class="variable language_">self</span>.db.Get(url)</span><br><span class="line">            <span class="keyword">return</span> attr</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="UrlPool的使用">UrlPool的使用</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Author: veelion</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> leveldb</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> urllib.parse <span class="keyword">as</span> urlparse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UrlPool</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;URL Pool for crawler to manage URLs</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, pool_name</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = pool_name</span><br><span class="line">        <span class="variable language_">self</span>.db = UrlDB(pool_name)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.waiting = &#123;&#125;  <span class="comment"># &#123;host: set([urls]), &#125; 按host分组，记录等待下载的URL</span></span><br><span class="line">        <span class="variable language_">self</span>.pending = &#123;&#125;  <span class="comment"># &#123;url: pended_time, &#125; 记录已被取出（self.pop()）但还未被更新状态（正在下载）的URL</span></span><br><span class="line">        <span class="variable language_">self</span>.failure = &#123;&#125;  <span class="comment"># &#123;url: times,&#125; 记录失败的URL的次数</span></span><br><span class="line">        <span class="variable language_">self</span>.failure_threshold = <span class="number">3</span></span><br><span class="line">        <span class="variable language_">self</span>.pending_threshold = <span class="number">10</span>  <span class="comment"># pending的最大时间，过期要重新下载</span></span><br><span class="line">        <span class="variable language_">self</span>.waiting_count = <span class="number">0</span>  <span class="comment"># self.waiting 字典里面的url的个数</span></span><br><span class="line">        <span class="variable language_">self</span>.max_hosts = [<span class="string">&#x27;&#x27;</span>, <span class="number">0</span>]  <span class="comment"># [host: url_count] 目前pool中url最多的host及其url数量</span></span><br><span class="line">        <span class="variable language_">self</span>.hub_pool = &#123;&#125;  <span class="comment"># &#123;url: last_query_time, &#125;  存放hub url</span></span><br><span class="line">        <span class="variable language_">self</span>.hub_refresh_span = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>.load_cache()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.dump_cache()</span><br><span class="line"> <span class="comment">#下面这两个函数对网址池进行缓存</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load_cache</span>(<span class="params">self,</span>):</span><br><span class="line">        path = <span class="variable language_">self</span>.name + <span class="string">&#x27;.pkl&#x27;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="variable language_">self</span>.waiting = pickle.load(f)</span><br><span class="line">            cc = [<span class="built_in">len</span>(v) <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="variable language_">self</span>.waiting.items()]</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;saved pool loaded! urls:&#x27;</span>, <span class="built_in">sum</span>(cc))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dump_cache</span>(<span class="params">self</span>):</span><br><span class="line">        path = <span class="variable language_">self</span>.name + <span class="string">&#x27;.pkl&#x27;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                pickle.dump(<span class="variable language_">self</span>.waiting, f)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;self.waiting saved!&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_hubs</span>(<span class="params">self, urls, hub_refresh_span</span>):</span><br><span class="line">        <span class="variable language_">self</span>.hub_refresh_span = hub_refresh_span</span><br><span class="line">        <span class="variable language_">self</span>.hub_pool = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">            <span class="variable language_">self</span>.hub_pool[url] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_status</span>(<span class="params">self, url, status_code</span>):</span><br><span class="line">        <span class="keyword">if</span> url <span class="keyword">in</span> <span class="variable language_">self</span>.pending:</span><br><span class="line">            <span class="variable language_">self</span>.pending.pop(url)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="variable language_">self</span>.db.set_success(url)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> status_code == <span class="number">404</span>:</span><br><span class="line">            <span class="variable language_">self</span>.db.set_failure(url)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> url <span class="keyword">in</span> <span class="variable language_">self</span>.failure:</span><br><span class="line">            <span class="variable language_">self</span>.failure[url] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.failure[url] &gt; <span class="variable language_">self</span>.failure_threshold:</span><br><span class="line">                <span class="variable language_">self</span>.db.set_failure(url)</span><br><span class="line">                <span class="variable language_">self</span>.failure.pop(url)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="variable language_">self</span>.add(url)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.failure[url] = <span class="number">1</span></span><br><span class="line">            <span class="variable language_">self</span>.add(url)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push_to_pool</span>(<span class="params">self, url</span>):</span><br><span class="line">        host = urlparse.urlparse(url).netloc</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> host <span class="keyword">or</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> host:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;try to push_to_pool with bad url:&#x27;</span>, url, <span class="string">&#x27;, len of ur:&#x27;</span>, <span class="built_in">len</span>(url))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> host <span class="keyword">in</span> <span class="variable language_">self</span>.waiting:</span><br><span class="line">            <span class="keyword">if</span> url <span class="keyword">in</span> <span class="variable language_">self</span>.waiting[host]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="variable language_">self</span>.waiting[host].add(url)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.waiting[host]) &gt; <span class="variable language_">self</span>.max_hosts[<span class="number">1</span>]:</span><br><span class="line">                <span class="variable language_">self</span>.max_hosts[<span class="number">1</span>] = <span class="built_in">len</span>(<span class="variable language_">self</span>.waiting[host])</span><br><span class="line">                <span class="variable language_">self</span>.max_hosts[<span class="number">0</span>] = host</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.waiting[host] = <span class="built_in">set</span>([url])</span><br><span class="line">        <span class="variable language_">self</span>.waiting_count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, url, always=<span class="literal">False</span></span>):</span><br><span class="line">        <span class="keyword">if</span> always:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.push_to_pool(url)</span><br><span class="line">        pended_time = <span class="variable language_">self</span>.pending.get(url, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> time.time() - pended_time &lt; <span class="variable language_">self</span>.pending_threshold:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;being downloading:&#x27;</span>, url)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.db.has(url):</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> pended_time:</span><br><span class="line">            <span class="variable language_">self</span>.pending.pop(url)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.push_to_pool(url)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addmany</span>(<span class="params">self, urls, always=<span class="literal">False</span></span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(urls, <span class="built_in">str</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;urls is a str !!!!&#x27;</span>, urls)</span><br><span class="line">            <span class="variable language_">self</span>.add(urls, always)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">                <span class="variable language_">self</span>.add(url, always)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self, count, hub_percent=<span class="number">50</span></span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\n\tmax of host:&#x27;</span>, <span class="variable language_">self</span>.max_hosts)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 取出的url有两种类型：hub=1, 普通=0</span></span><br><span class="line">        url_attr_url = <span class="number">0</span></span><br><span class="line">        url_attr_hub = <span class="number">1</span></span><br><span class="line">        <span class="comment"># 1. 首先取出hub，保证获取hub里面的最新url.</span></span><br><span class="line">        hubs = &#123;&#125;</span><br><span class="line">        hub_count = count * hub_percent // <span class="number">100</span></span><br><span class="line">        <span class="keyword">for</span> hub <span class="keyword">in</span> <span class="variable language_">self</span>.hub_pool:</span><br><span class="line">            span = time.time() - <span class="variable language_">self</span>.hub_pool[hub]</span><br><span class="line">            <span class="keyword">if</span> span &lt; <span class="variable language_">self</span>.hub_refresh_span: </span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            hubs[hub] = url_attr_hub <span class="comment"># 1 means hub-url </span></span><br><span class="line">            <span class="variable language_">self</span>.hub_pool[hub] = time.time() </span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(hubs) &gt;= hub_count:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 再取出普通url</span></span><br><span class="line">        left_count = count - <span class="built_in">len</span>(hubs)</span><br><span class="line">        urls = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> host <span class="keyword">in</span> <span class="variable language_">self</span>.waiting:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.waiting[host]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            url = <span class="variable language_">self</span>.waiting[host].pop()</span><br><span class="line">            urls[url] = url_attr_url</span><br><span class="line">            <span class="variable language_">self</span>.pending[url] = time.time()</span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.max_hosts[<span class="number">0</span>] == host:</span><br><span class="line">                <span class="variable language_">self</span>.max_hosts[<span class="number">1</span>] -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(urls) &gt;= left_count:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="variable language_">self</span>.waiting_count -= <span class="built_in">len</span>(urls)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;To pop:%s, hubs: %s, urls: %s, hosts:%s&#x27;</span> % (count, <span class="built_in">len</span>(hubs), <span class="built_in">len</span>(urls), <span class="built_in">len</span>(<span class="variable language_">self</span>.waiting)))</span><br><span class="line">        urls.update(hubs)</span><br><span class="line">        <span class="keyword">return</span> urls</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">self,</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.waiting_count</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">empty</span>(<span class="params">self,</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.waiting_count == <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="爬虫基本成员">爬虫基本成员</h2><p><img src="https://raw.githubusercontent.com/scanfup/img-bag1/main/image-20250115114810287.png" alt="image-20250115114810287"></p><h2 id="抓包工具charles">抓包工具charles</h2><p>**这一篇学的还不太理想，因为</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法与外挂标签写法汇总</title>
      <link href="/posts/2013454d.html"/>
      <url>/posts/2013454d.html</url>
      
        <content type="html"><![CDATA[<h1>1.Markdown语法自带格式</h1><div class="note info flat"><p>参考：<a href="https://blog.csdn.net/u014061630/article/details/81359144">Markdown语法图文全面详解(10分钟学会)</a></p></div><div class="note warning flat"><p>注意：此页面偶尔会存在CSS冲突问题!</p></div><h2 id="1-1-代码块">1.1 代码块</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">\```shell</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch; </span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br><span class="line">\```</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch; </span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-2-多级标题">1.2 多级标题</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># H1</span></span><br><span class="line"><span class="section">## H2</span></span><br><span class="line"><span class="section">### H3</span></span><br><span class="line"><span class="section">#### H4</span></span><br><span class="line"><span class="section">##### H5</span></span><br><span class="line"><span class="section">###### H6</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>见本文章标题!</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-3-文字样式">1.3 文字样式</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线演示<span class="language-xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">文字<span class="strong">**加粗**</span>演示</span><br><span class="line"></span><br><span class="line">文字<span class="emphasis">*斜体*</span>演示</span><br><span class="line"></span><br><span class="line">文本<span class="code">`高亮`</span>演示</span><br><span class="line"></span><br><span class="line">文本~~删除~~线演示</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span> = <span class="string">5</span>&gt;</span></span>5号字<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span>&gt;</span></span>黑体<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">blue</span>&gt;</span></span>蓝色<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">MistyRose</span>&gt;</span></span>这里的背景色是：MistyRosen，此处输入任意想输入的内容<span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p><u>下划线演示</u></p><p>文字<strong>加粗</strong>演示</p><p>文字<em>斜体</em>演示</p><p>文本<code>高亮</code>演示</p><p>文本<s>删除</s>线演示</p><p><font size = 5>5号字</font><br><font face="黑体">黑体</font><br><font color=blue>蓝色</font></p><table><tr><td bgcolor=MistyRose>这里的背景色是：MistyRosen，此处输入任意想输入的内容</td></tr></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note info flat"><p>上述要点可参考:<a href="https://blog.csdn.net/qq_43732429/article/details/108034518">【Markdown语法】字体颜色大小及文字底色设置</a></p></div><h2 id="1-4-引用">1.4 引用</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt;  Java</span></span><br><span class="line"><span class="quote">&gt; 二级引用演示</span></span><br><span class="line"><span class="quote">&gt; MySQL</span></span><br><span class="line"><span class="quote">&gt; &gt;外键</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;事务</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;<span class="strong">**行级锁**</span>(引用内部一样可以用格式)</span></span><br><span class="line"><span class="quote">&gt; </span></span><br><span class="line"><span class="quote">&gt; ....</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><blockquote><p>Java<br>二级引用演示<br>MySQL</p><blockquote><p>外键</p><p>事务</p><p><strong>行级锁</strong>(引用内部一样可以用格式)</p></blockquote><p>…</p></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-5-分割线">1.5 分割线</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><hr><hr><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-6-列表-跟空格都可以">1.6 列表(*,+,-跟空格都可以)</h2><h3 id="1-6-1-无序列表">1.6.1 无序列表</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> Java</span><br><span class="line"><span class="bullet">*</span> Python</span><br><span class="line"><span class="bullet">*</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> Java</span><br><span class="line"><span class="bullet">+</span> Python</span><br><span class="line"><span class="bullet">+</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> Java</span><br><span class="line"><span class="bullet">-</span> Python</span><br><span class="line"><span class="bullet">-</span> ...</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ul><li>Java</li><li>Python</li><li>…</li></ul><ul><li>Java</li><li>Python</li><li>…</li></ul><ul><li>Java</li><li>Python</li><li>…</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="1-6-2-有序列表">1.6.2 有序列表</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 注意后面有空格</span></span><br><span class="line"><span class="bullet">1.</span> </span><br><span class="line"><span class="bullet">2.</span> </span><br><span class="line"><span class="bullet">3.</span> </span><br><span class="line"><span class="bullet">4.</span> </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li></li><li></li><li></li><li></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-7-图片">1.7 图片</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 本地图片</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/assets/pusheencode.webp&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;示例图片&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:50%;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="section"># 在线图片</span></span><br><span class="line">![<span class="string">code</span>](<span class="link">https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>本地图片:<br><img src="/assets/pusheencode.webp" alt="示例图片" style="zoom:50%;" /><br>在线图片:<br><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png" alt="code"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-8-表格">1.8 表格</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 项目标号 | 资金     | 备注 |</span><br><span class="line">| -------- | -------- | ---- |</span><br><span class="line">| 1        | 100，000 | 无   |</span><br><span class="line">| 2        | 200，000 | 无   |</span><br><span class="line">| 3        | 300,600  | 重要 |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><table><thead><tr><th>项目标号</th><th>资金</th><th>备注</th></tr></thead><tbody><tr><td>1</td><td>100，000</td><td>无</td></tr><tr><td>2</td><td>200，000</td><td>无</td></tr><tr><td>3</td><td>300,600</td><td>重要</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-9-公式">1.9 公式</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\Gamma(z)=\int<span class="emphasis">_0^\infty t^&#123;z-1&#125;e^&#123;-t&#125;dt.</span></span><br><span class="line"><span class="emphasis">$$</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>$$<br>\Gamma(z)=\int_0^\infty t^{z-1}e^{-t}dt.<br>$$</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1>2.Butterfly外挂标签</h1><div class="note info flat"><p>这部分参考安知鱼:<a href="https://anzhiy.cn/posts/7d58.html">基于Butterfly的外挂标签引入</a></p></div><h2 id="2-1-行内文本样式-text">2.1 行内文本样式 text</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% u 文本内容 %&#125;</span><br><span class="line">&#123;% emp 文本内容 %&#125;</span><br><span class="line">&#123;% wavy 文本内容 %&#125;</span><br><span class="line">&#123;% del 文本内容 %&#125;</span><br><span class="line">&#123;% kbd 文本内容 %&#125;</span><br><span class="line">&#123;% psw 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line"><span class="bullet">2.</span> 带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line"><span class="bullet">3.</span> 带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line"><span class="bullet">4.</span> 带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line"><span class="bullet">5.</span> 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line"><span class="bullet">6.</span> 密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-2-行内文本-span">2.2 行内文本 span</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% span 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>字体</code>: logo, code</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li><li><code>对齐方向</code>: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% span center logo large, Volantis %&#125;</span><br><span class="line">&#123;% span center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<br><span class='p center logo large'>Volantis</span><br><span class='p center small'>A Wonderful Theme for Hexo</span></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-3-段落文本-p">2.3 段落文本 p</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% p 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>字体</code>: logo, code</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li><li><code>对齐方向</code>: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% p red, 红色 %&#125;、&#123;% p yellow, 黄色 %&#125;、&#123;% p green, 绿色 %&#125;、&#123;% p cyan, 青色 %&#125;、&#123;% p blue, 蓝色 %&#125;、&#123;% p gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% p center logo large, Volantis %&#125;</span><br><span class="line">&#123;% p center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<p class='p red'>红色</p>、<p class='p yellow'>黄色</p>、<p class='p green'>绿色</p>、<p class='p cyan'>青色</p>、<p class='p blue'>蓝色</p>、<p class='p gray'>灰色</p>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。</li></ul><p class='p center logo large'>Volantis</p><p class='p center small'>A Wonderful Theme for Hexo</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-4-引用note">2.4 引用note</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">通用配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">语法格式</button></li><li class="tab"><button type="button" data-href="#分栏-3">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-4">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-5">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">note:</span><br><span class="line">  # Note tag style values:</span><br><span class="line">  #  - simple    bs-callout old alert style. Default.</span><br><span class="line">  #  - modern    bs-callout new (v2-v3) alert style.</span><br><span class="line">  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span><br><span class="line">  #  - disabled  disable all CSS styles import of note tag.</span><br><span class="line">  style: simple</span><br><span class="line">  icons: false</span><br><span class="line">  border<span class="emphasis">_radius: 3</span></span><br><span class="line"><span class="emphasis">  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line"><span class="emphasis">  # Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line"><span class="emphasis">  light_</span>bg<span class="emphasis">_offset: 0</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 自带icon</span></span><br><span class="line">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"><span class="section"># 外部icon</span></span><br><span class="line">&#123;% note [color] [icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.自带icon</p><table><thead><tr><th>参数</th><th style="text-align:center">用法</th></tr></thead><tbody><tr><td>class</td><td style="text-align:center">【可选】标识，不同的标识有不同的配色 （ default / primary / success / info / warning / danger ）</td></tr><tr><td>no-icon</td><td style="text-align:center">【可选】不显示 icon</td></tr><tr><td>style</td><td style="text-align:center">【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td></tr></tbody></table><p>2.外部icon</p><table><thead><tr><th>参数</th><th style="text-align:center">用法</th></tr></thead><tbody><tr><td>class</td><td style="text-align:center">【可选】标识，不同的标识有不同的配色 （ default / blue / pink / red / purple / orange / green ）</td></tr><tr><td>no-icon</td><td style="text-align:center">【可选】可配置自定义 icon (只支持 fontawesome 图标, 也可以配置 no-icon )</td></tr><tr><td>style</td><td style="text-align:center">【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><details class="folding-tag" blue><summary> 1.自带icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note simple %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default simple %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary simple %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success simple %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info simple %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning simple %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger simple %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>2.<code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note modern %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default modern %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary modern %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success modern %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info modern %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning modern %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger modern %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>3.<code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note flat %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default flat %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary flat %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success flat %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info flat %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning flat %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger flat %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>4.<code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note disabled %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default disabled %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary disabled %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success disabled %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info disabled %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning disabled %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger disabled %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>5.<code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default no-icon %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary no-icon %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success no-icon %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning no-icon %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger no-icon %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 2.外部icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; simple %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; simple %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; simple%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; simple %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; simple %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>2.<code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; modern %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; modern%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; modern %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; modern %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>3.<code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; flat %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; flat%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>4.<code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; disabled %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; disabled %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; disabled %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; disabled %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; disabled %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>5.<code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue no-icon %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink no-icon %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red no-icon %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple no-icon %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green no-icon %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-5"><details class="folding-tag" blue><summary> 1.自带icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><div class="note simple"><p>默认 提示块标签</p></div><div class="note default simple"><p>default 提示块标签</p></div><div class="note primary simple"><p>primary 提示块标签</p></div><div class="note success simple"><p>success 提示块标签</p></div><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div><div class="note danger simple"><p>danger 提示块标签</p></div>2.`modern`样式<div class="note modern"><p>默认 提示块标签</p></div><div class="note default modern"><p>default 提示块标签</p></div><div class="note primary modern"><p>primary 提示块标签</p></div><div class="note success modern"><p>success 提示块标签</p></div><div class="note info modern"><p>info 提示块标签</p></div><div class="note warning modern"><p>warning 提示块标签</p></div><div class="note danger modern"><p>danger 提示块标签</p></div><p>3.<code>flat</code>样式</p><div class="note flat"><p>默认 提示块标签</p></div><div class="note default flat"><p>default 提示块标签</p></div><div class="note primary flat"><p>primary 提示块标签</p></div><div class="note success flat"><p>success 提示块标签</p></div><div class="note info flat"><p>info 提示块标签</p></div><div class="note warning flat"><p>warning 提示块标签</p></div><div class="note danger flat"><p>danger 提示块标签</p></div><p>4.<code>disabled</code>样式</p><div class="note disabled"><p>默认 提示块标签</p></div><div class="note default disabled"><p>default 提示块标签</p></div><div class="note primary disabled"><p>primary 提示块标签</p></div><div class="note success disabled"><p>success 提示块标签</p></div><div class="note info disabled"><p>info 提示块标签</p></div><div class="note warning disabled"><p>warning 提示块标签</p></div><div class="note danger disabled"><p>danger 提示块标签</p></div><p>5.<code>no-icon</code>样式</p><div class="note no-icon flat"><p>默认 提示块标签</p></div><div class="note default no-icon flat"><p>default 提示块标签</p></div><div class="note primary no-icon flat"><p>primary 提示块标签</p></div><div class="note success no-icon flat"><p>success 提示块标签</p></div><div class="note info no-icon flat"><p>info 提示块标签</p></div><div class="note warning no-icon flat"><p>warning 提示块标签</p></div><div class="note danger no-icon flat"><p>danger 提示块标签</p></div>              </div>            </details><details class="folding-tag" blue><summary> 2.外部icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><div class="note icon-padding simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding simple"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding simple"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>2.<code>modern</code>样式</p><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding modern"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding modern"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding modern"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding modern"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>3.<code>flat</code>样式</p><div class="note icon-padding flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>4.<code>disabled</code>样式</p><div class="note icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding disabled"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding disabled"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding disabled"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding disabled"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding disabled"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding disabled"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>5.<code>no-icon</code>样式</p><div class="note no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue no-icon flat"><p>2021年快到了…</p></div><div class="note pink no-icon flat"><p>小心开车 安全至上</p></div><div class="note red no-icon flat"><p>这是三片呢？还是四片？</p></div><div class="note orange no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple no-icon flat"><p>剪刀石头布</p></div><div class="note green no-icon flat"><p>前端最讨厌的浏览器</p></div>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-5-上标标签-tip">2.5 上标标签 tip</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>样式</code>: success,error,warning,bolt,ban,home,sync,cogs,key,bell</li><li><code>自定义图标</code>: 支持fontawesome。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip %&#125;default&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip info %&#125;info&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip success %&#125;success&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip error %&#125;error&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip warning %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bolt %&#125;bolt&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban %&#125;ban&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip home %&#125;home&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip sync %&#125;sync&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip cogs %&#125;cogs&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip key %&#125;key&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bell %&#125;bell&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip fa-atom %&#125;自定义font awesome图标&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="tip "><p>default</p></div><div class="tip info"><p>info</p></div><div class="tip success"><p>success</p></div><div class="tip error"><p>error</p></div><div class="tip warning"><p>warning</p></div><div class="tip bolt"><p>bolt</p></div><div class="tip ban"><p>ban</p></div><div class="tip home"><p>home</p></div><div class="tip sync"><p>sync</p></div><div class="tip cogs"><p>cogs</p></div><div class="tip key"><p>key</p></div><div class="tip bell"><p>bell</p></div><div class="tip fa-atom"><p>自定义font awesome图标</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-6-动态标签-anima">2.6 动态标签 anima</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><div class="note info flat"><ol><li>将所需的CSS类添加到图标（或DOM中的任何元素）。</li><li>对于父级悬停样式，需要给目标元素添加指定CSS类，同时还要给目标元素的父级元素添加CSS类<code>faa-parent animated-hover</code>。（详情见示例及示例源码）<br>You can regulate the speed of the animation by adding the CSS class or . faa-fastfaa-slow</li><li>可以通过给目标元素添加CSS类<code>faa-fast</code>或<code>faa-slow</code>来控制动画快慢。</li></ol></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.On DOM load（当页面加载时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>2.调整动画速度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated faa-fast %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated faa-slow %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>3.On hover（当鼠标悬停时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated-hover %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated-hover %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>4.On parent hover（当鼠标悬停在父级元素时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-horizontal&quot;</span>&gt;</span></span>warning<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-flash&quot;</span>&gt;</span></span>ban<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.On DOM load（当页面加载时显示动画）</p><div class="tip warning faa-horizontal animated"><p>warning</p></div><div class="tip ban faa-flash animated"><p>ban</p></div>2.调整动画速度<div class="tip warning faa-horizontal animated faa-fast"><p>warning</p></div><div class="tip ban faa-flash animated faa-slow"><p>ban</p></div>3.On hover（当鼠标悬停时显示动画）<div class="tip warning faa-horizontal animated-hover"><p>warning</p></div><div class="tip ban faa-flash animated-hover"><p>ban</p></div>4.On parent hover（当鼠标悬停在父级元素时显示动画）<div class="tip warning faa-parent animated-hover"><p class="faa-horizontal">warning</p></div><div class="tip ban faa-parent animated-hover"><p class="faa-flash">ban</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-7-复选列表-checkbox">2.7 复选列表 checkbox</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>样式</code>: plus, minus, times</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>选中状态</code>: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 纯文本测试 %&#125;</span><br><span class="line">&#123;% checkbox checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% checkbox red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% checkbox green checked, 绿色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox yellow checked, 黄色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox cyan checked, 青色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox blue checked, 蓝色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox plus green checked, 增加 %&#125;</span><br><span class="line">&#123;% checkbox minus yellow checked, 减少 %&#125;</span><br><span class="line">&#123;% checkbox times red checked, 叉 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class='checkbox'><input type="checkbox" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>支持自定义颜色</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>绿色 + 默认选中</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>黄色 + 默认选中</p>            </div><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>青色 + 默认选中</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>蓝色 + 默认选中</p>            </div><div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>增加</p>            </div><div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>            <p>减少</p>            </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>叉</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-8-单选列表-radio">2.8 单选列表 radio</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>选中状态</code>: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 纯文本测试 %&#125;</span><br><span class="line">&#123;% radio checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% radio red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% radio green, 绿色 %&#125;</span><br><span class="line">&#123;% radio yellow, 黄色 %&#125;</span><br><span class="line">&#123;% radio cyan, 青色 %&#125;</span><br><span class="line">&#123;% radio blue, 蓝色 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class='checkbox'><input type="radio" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="radio" />            <p>支持自定义颜色</p>            </div><div class='checkbox green'><input type="radio" />            <p>绿色</p>            </div><div class='checkbox yellow'><input type="radio" />            <p>黄色</p>            </div><div class='checkbox cyan'><input type="radio" />            <p>青色</p>            </div><div class='checkbox blue'><input type="radio" />            <p>蓝色</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-9-时间轴-timeline">2.9 时间轴 timeline</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间线标题（可选）[,color] %&#125;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>title</code>:标题/时间线</li><li><code>color</code>:<code>timeline</code>颜色:default(留空) / blue / pink / red / purple / orange / green</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间轴样式,blue %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-07-24 [<span class="string">2.6.6 -&gt; 3.0</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 如果有 <span class="code">`hexo-lazyload-image`</span> 插件，需要删除并重新安装最新版本，设置 <span class="code">`lazyload.isSPA: true`</span>。</span><br><span class="line"><span class="bullet">2.</span> 2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <span class="code">`use_cdn: true`</span> 则需要删除。</span><br><span class="line"><span class="bullet">3.</span> 2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</span><br><span class="line"><span class="bullet">4.</span> 2.x 版本的置顶 <span class="code">`top: true`</span> 改为了 <span class="code">`pin: true`</span>，并且同样适用于 <span class="code">`layout: page`</span> 的页面。</span><br><span class="line"><span class="bullet">5.</span> 如果使用了 <span class="code">`hexo-offline`</span> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-05-15 [<span class="string">2.6.3 -&gt; 2.6.6</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6</span>) --&gt;</span><br><span class="line"></span><br><span class="line">不需要额外处理。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-04-20 [<span class="string">2.6.2 -&gt; 2.6.3</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 全局搜索 <span class="code">`seotitle`</span> 并替换为 <span class="code">`seo_title`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的索引规则有变，使用 group 组件的文章内，<span class="code">`group: group_name`</span> 对应的组件名必须是 <span class="code">`group_name`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的列表名优先显示文章的 <span class="code">`short_title`</span> 其次是 <span class="code">`title`</span>。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>时间轴样式</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-07-24 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases">2.6.6 -&gt; 3.0</a></p></div></div><div class='timeline-item-content'><ol><li>如果有 <code>hexo-lazyload-image</code> 插件，需要删除并重新安装最新版本，设置 <code>lazyload.isSPA: true</code>。</li><li>2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <code>use_cdn: true</code> 则需要删除。</li><li>2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</li><li>2.x 版本的置顶 <code>top: true</code> 改为了 <code>pin: true</code>，并且同样适用于 <code>layout: page</code> 的页面。</li><li>如果使用了 <code>hexo-offline</code> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-05-15 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6">2.6.3 -&gt; 2.6.6</a></p></div></div><div class='timeline-item-content'><p>不需要额外处理。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-04-20 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.6.2 -&gt; 2.6.3</a></p></div></div><div class='timeline-item-content'><ol><li>全局搜索 <code>seotitle</code> 并替换为 <code>seo_title</code>。</li><li>group 组件的索引规则有变，使用 group 组件的文章内，<code>group: group_name</code> 对应的组件名必须是 <code>group_name</code>。</li><li>group 组件的列表名优先显示文章的 <code>short_title</code> 其次是 <code>title</code>。</li></ol></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-10-链接卡片-link">2.10 链接卡片 link</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 标题, 链接, 图片链接（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 糖果屋教程贴, https://akilar.top/posts/615e2dec/, https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="tag link"><a class="link-card" title="糖果屋教程贴" href="https://akilar.top/posts/615e2dec/"><div class="left"><img src="https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico"/></div><div class="right"><p class="text">糖果屋教程贴</p><p class="url">https://akilar.top/posts/615e2dec/</p></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-11-按钮-btns">2.11 按钮 btns</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns 样式参数 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>圆角样式：rounded, circle</li><li>增加文字样式：可以在容器内增加 <code>&lt;b&gt;</code>标题<code>&lt;/b&gt;</code>和<code>&lt;p&gt;</code>描述文字<code>&lt;/p&gt;</code></li><li>布局方式：<br>默认为自动宽度，适合视野内只有一两个的情况。</li></ol><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>wide</td><td>宽一点的按钮</td></tr><tr><td>fill</td><td>填充布局，自动铺满至少一行，多了会换行</td></tr><tr><td>center</td><td>居中，按钮之间是固定间距</td></tr><tr><td>around</td><td>居中分散</td></tr><tr><td>grid2</td><td>等宽最多2列，屏幕变窄会适当减少列数</td></tr><tr><td>grid3</td><td>等宽最多3列，屏幕变窄会适当减少列数</td></tr><tr><td>grid4</td><td>等宽最多4列，屏幕变窄会适当减少列数</td></tr><tr><td>grid5</td><td>等宽最多5列，屏幕变窄会适当减少列数</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.如果需要显示类似「团队成员」之类的一组含有头像的链接</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle grid5 %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><p>2.或者含有图标的按钮</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns rounded grid5 %&#125;</span><br><span class="line">&#123;% cell 下载源码, /, fas fa-download %&#125;</span><br><span class="line">&#123;% cell 查看文档, /, fas fa-book-open %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><p>3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle center grid5 %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p red, 专业版 %&#125;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p green, 免费版 %&#125;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.如果需要显示类似「团队成员」之类的一组含有头像的链接</p><div class="btns circle grid5">            <a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>          </div>2.或者含有图标的按钮<div class="btns rounded grid5">            <a class="button" href='/' title='下载源码'><i class='fas fa-download'></i>下载源码</a><a class="button" href='/' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>          </div>3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中<div class="btns circle center grid5">            <a href='https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1'>  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p red'>专业版</p>  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png'></a><a href='https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1'>  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p green'>免费版</p>  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png'></a>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-12-github卡片-ghcard">2.12 github卡片 ghcard</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% ghcard 用户名, 其它参数（可选） %&#125;</span><br><span class="line">&#123;% ghcard 用户名/仓库, 其它参数（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>使用<code>,</code>分割各个参数。写法为：<code>参数名=参数值</code><br>以下只写几个常用参数值。</p><table><thead><tr><th><strong>参数名</strong></th><th>取值</th><th>释义</th></tr></thead><tbody><tr><td>hide</td><td>stars,commits,prs,issues,contribs</td><td>隐藏指定统计</td></tr><tr><td>count_private</td><td>true</td><td>将私人项目贡献添加到总提交计数中</td></tr><tr><td>show_icons</td><td>true</td><td>显示图标</td></tr><tr><td>theme</td><td>查阅:<a href="https://github.com/anuraghazra/github-readme-stats/blob/master/themes/README.md">Available Themes</a></td><td>主题</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.用户信息卡片</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| &#123;% ghcard fomalhaut1998 %&#125; | &#123;% ghcard fomalhaut1998, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=buefy %&#125; | &#123;% ghcard fomalhaut1998, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=onedark %&#125; | &#123;% ghcard fomalhaut1998, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=algolia %&#125; | &#123;% ghcard fomalhaut1998, theme=calm %&#125; |</span><br></pre></td></tr></table></figure><p>2.仓库信息卡片</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=buefy %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=onedark %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=algolia %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=calm %&#125; |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.用户信息卡片</p><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=calm&show_owner=true"/></a></td></tr></tbody></table><p>2.仓库信息卡片</p><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=calm&show_owner=true"/></a></td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-13-github徽标-ghbdage">2.13 github徽标 ghbdage</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage [right],[left],[logo]||[color],[link],[title]||[option] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>left</code>：徽标左边的信息，必选参数。</li><li><code>right</code>: 徽标右边的信息，必选参数，</li><li><code>logo</code>：徽标图标，图标名称详见<a href="https://simpleicons.org/">simpleicons</a>，可选参数。</li><li><code>color</code>：徽标右边的颜色，可选参数。</li><li><code>link</code>：指向的链接，可选参数。</li><li><code>title</code>：徽标的额外信息，可选参数。主要用于优化SEO，但<code>object</code>标签不会像<code>a</code>标签一样在鼠标悬停显示<code>title</code>信息。</li><li><code>option</code>：自定义参数，支持<a href="https://shields.io/">shields.io</a>的全部API参数支持，具体参数可以参看上文中的拓展写法示例。形式为<code>name1=value2&amp;name2=value2</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.基本参数,定义徽标左右文字和图标</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage Theme,Butterfly %&#125;</span><br><span class="line">&#123;% bdage Frame,Hexo,hexo %&#125;</span><br></pre></td></tr></table></figure><p>2.信息参数，定义徽标右侧内容背景色，指向链接</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage CDN,JsDelivr,jsDelivr||abcdef,https://metroui.org.ua/index.html,本站使用JsDelivr为静态资源提供CDN加速 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割</span><br><span class="line">&#123;% bdage Source,GitHub,GitHub||,https://github.com/ %&#125;</span><br></pre></td></tr></table></figure><p>3.拓展参数，支持shields的API的全部参数内容</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage Hosted,Vercel,Vercel||brightgreen,https://vercel.com/,本站采用双线部署，默认线路托管于Vercel||style=social&amp;logoWidth=20 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割</span><br><span class="line">&#123;% bdage Hosted,Vercel,Vercel||||style=social&amp;logoWidth=20&amp;logoColor=violet %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.基本参数,定义徽标左右文字和图标</p><p><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Butterfly-Theme-orange?logo=&color=orange&link=&"></object><br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Hexo-Frame-orange?logo=hexo&color=orange&link=&"></object></p><p>2.信息参数，定义徽标右侧内容背景色，指向链接</p><p><object class="ghbdage" style="margin-inline:5px" title="本站使用JsDelivr为静态资源提供CDN加速" standby="loading..." data="https://img.shields.io/badge/JsDelivr-CDN-orange?logo=jsDelivr&color=abcdef&link=https://metroui.org.ua/index.html&"></object><br>//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割<br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/GitHub-Source-orange?logo=GitHub&color=orange&link=https://github.com/&"></object></p><p>3.拓展参数，支持shields的API的全部参数内容</p><p><object class="ghbdage" style="margin-inline:5px" title="本站采用双线部署，默认线路托管于Vercel" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=brightgreen&link=https://vercel.com/&style=social&logoWidth=20"></object><br>//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割<br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=orange&link=&style=social&logoWidth=20&logoColor=violet"></object></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-14-网站卡片-sites">2.14 网站卡片 sites</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site xaoxuu, url=https://xaoxuu.com, screenshot=https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg, avatar=https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png, description=简约风格 %&#125;</span><br><span class="line">&#123;% site inkss, url=https://inkss.cn, screenshot=https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg, avatar=https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site MHuiG, url=https://blog.mhuig.top, screenshot=https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png, avatar=https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Colsrch, url=https://colsrch.top, screenshot=https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png, avatar=https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Linhk1606, url=https://linhk1606.github.io, screenshot=https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png, avatar=https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="site-card-group"><a class="site-card" href="https://fomalhaut1998.com"><div class="img"><img src="https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png"/><span class="title">fomalhaut1998</span><span class="desc">简约风格</span></div></a><a class="site-card" href="https://inkss.cn"><div class="img"><img src="https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg"/><span class="title">inkss</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://blog.mhuig.top"><div class="img"><img src="https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png"/><span class="title">MHuiG</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://colsrch.top"><div class="img"><img src="https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg"/><span class="title">Colsrch</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://linhk1606.github.io"><div class="img"><img src="https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png"/></div><div class="info"><img src="https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png"/><span class="title">Linhk1606</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-15-行内图片-inlineimage">2.15 行内图片 inlineimage</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% inlineimage 图片链接, height=高度（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>高度</code>：height=20px</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif %&#125; 一段话。</span><br><span class="line"></span><br><span class="line">这又是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif, height=40px %&#125; 一段话。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>这是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif" style="height:1.5em"/> 一段话。</p><p>这又是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif" style="height:40px;"/> 一段话。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-16-单张图片-image">2.16 单张图片 image</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image 链接, width=宽度（可选）, height=高度（可选）, alt=描述（可选）, bg=占位颜色（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>图片宽度高度：width=300px, height=32px</li><li>图片描述：alt=图片描述（butterfly需要在主题配置文件中开启图片描述）</li><li>占位背景色：bg=#f2f2f2</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.添加描述：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><p>2.指定宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px %&#125;</span><br></pre></td></tr></table></figure><p>3.指定宽度并添加描述：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><p>4.设置占位背景色：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, bg=#1D0C04, alt=优化不同宽度浏览的观感 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.添加描述：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div>2..指定宽度<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" style="width:400px;"/></div></div>3.指定宽度并添加描述：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。" style="width:400px;"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div>4.设置占位背景色：<div class="img-wrap"><div class="img-bg" style="background:#1D0C04"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="优化不同宽度浏览的观感" style="width:400px;"/></div><span class="image-caption">优化不同宽度浏览的观感</span></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-17-音频-audio">2.17 音频 audio</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio 音频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="audio"><audio controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-18-视频-video">2.18 视频 video</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video 视频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>对齐方向</code>：left, center, right</li><li><code>列数</code>：逗号后面直接写列数，支持 1 ～ 4 列。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.100%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br></pre></td></tr></table></figure><p>2.50%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 2 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><p>3.25%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 4 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.100%宽度</p><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>2.50%宽度<div class="videos" col='2'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div>3.25%宽度<div class="videos" col='4'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-19-相册-gallery">2.19 相册 gallery</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2.gallery 相册</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">markdown 圖片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ul><li>gallerygroup 相册图库</li></ul><table><thead><tr><th>参数名</th><th>释义</th></tr></thead><tbody><tr><td>name</td><td>图库名字</td></tr><tr><td>description</td><td>图库描述</td></tr><tr><td>link</td><td>链接到对应相册的地址</td></tr><tr><td>img-url</td><td>图库封面</td></tr></tbody></table><ul><li><p>gallery 相册</p><p>区别于旧版的Gallery相册,新的Gallery相册会自动根据图片长度进行排版，书写也更加方便，与markdown格式一样。可根据需要插入到相应的md。无需再自己配置长宽。<strong>建议在粘贴时故意使用长短、大小、横竖不一的图片</strong>，会有更好的效果。（尺寸完全相同的图片只会平铺输出，效果很糟糕）</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup MC 在Rikkaの六花服务器里留下的足迹 &#x27;/gallery/MC/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg %&#125;</span><br><span class="line">&#123;% galleryGroup Gundam 哦咧哇gundam哒！ &#x27;/gallery/Gundam/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png %&#125;</span><br><span class="line">&#123;% galleryGroup I-am-Akilar 某种意义上也算自拍吧 &#x27;/gallery/I-am-Akilar/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2.gallery 相册</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg</span>)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.gallerygroup 相册图库</p><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">MC</div>  <p>在Rikkaの六花服务器里留下的足迹</p>  <a href='/gallery/MC/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">Gundam</div>  <p>哦咧哇gundam哒！</p>  <a href='/gallery/Gundam/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">I-am-Akilar</div>  <p>某种意义上也算自拍吧</p>  <a href='/gallery/I-am-Akilar/'></a>  </figcaption>  </figure></div>2.gallery 相册<div class="fj-gallery"><p><img src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg" alt=""></p>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-20-折叠框-folding">2.20 折叠框 folding</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 参数（可选）, 标题 %&#125;</span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><!-- tab 参数配置 --><ol><li><p><code>颜色</code>：blue, cyan, green, yellow, red</p></li><li><p><code>状态</code>：状态填写 open 代表默认打开。</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 查看图片测试 %&#125;</span><br><span class="line"></span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;</span><br><span class="line"></span><br><span class="line">这是一个默认打开的折叠框。</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding green, 查看代码测试 %&#125;</span><br><span class="line">假装这里有代码块（代码块没法嵌套代码块）</span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding yellow, 查看列表测试 %&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> haha</span><br><span class="line"><span class="bullet">-</span> hehe</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding red, 查看嵌套测试 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding blue, 查看嵌套测试2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding 查看嵌套测试3 %&#125;</span><br><span class="line"></span><br><span class="line">hahaha <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png&#x27;</span> <span class="attr">style</span>=<span class="string">&#x27;height:24px&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><details class="folding-tag" ><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>              </div>            </details><details class="folding-tag" cyan open><summary> 查看默认打开的折叠框 </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details class="folding-tag" green><summary> 查看代码测试 </summary>              <div class='content'>              <p>假装这里有代码块（代码块没法嵌套代码块）</p>              </div>            </details><details class="folding-tag" yellow><summary> 查看列表测试 </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details><details class="folding-tag" red><summary> 查看嵌套测试 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 查看嵌套测试2 </summary>              <div class='content'>              <details class="folding-tag" ><summary> 查看嵌套测试3 </summary>              <div class='content'>              <p>hahaha <span><img src='https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span></p>              </div>            </details>              </div>            </details>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-21-分栏-tab">2.21 分栏 tab</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p>Unique name :</p><ul><li><p>选项卡块标签的唯一名称，不带逗号。</p></li><li><p>将在#id中用作每个标签及其索引号的前缀。</p></li><li><p>如果名称中包含空格，则对于生成#id，所有空格将由破折号代替。</p></li><li><p>仅当前帖子/页面的URL必须是唯一的！</p></li></ul></li><li><p>[index]:</p><ul><li><p>活动选项卡的索引号。</p></li><li><p>如果未指定，将选择第一个标签（1）。</p></li><li><p>如果index为-1，则不会选择任何选项卡。</p></li><li><p>可选参数。</p></li></ul></li><li><p>[Tab caption]:</p><ul><li><p>当前选项卡的标题。</p></li><li><p>如果未指定标题，则带有制表符索引后缀的唯一名称将用作制表符的标题。</p></li><li><p>如果未指定标题，但指定了图标，则标题将为空。</p></li><li><p>可选参数。</p></li></ul></li><li><p>[@icon]:</p><ul><li><p>FontAwesome图标名称（全名，看起来像“ fas fa-font”）</p></li><li><p>可以指定带空格或不带空格；</p></li><li><p>例如’Tab caption @icon’ 和 ‘Tab caption@icon’.</p></li><li><p>可选参数。</p></li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.Demo 1 - 预设选择第一个【默认】</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>2.Demo 2 - 预设选择tabs</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test2, 3 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>3.Demo 3 - 没有预设值</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test3, -1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>4.Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test4 %&#125;</span><br><span class="line">&lt;!-- tab 第一个Tab --&gt;</span><br><span class="line"><span class="strong">**tab名字为第一个Tab**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line"><span class="strong">**只有图标 没有Tab名字**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span><br><span class="line"><span class="strong">**名字+icon**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.Demo 1 - 预设选择第一个【默认】</p><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>2.Demo 2 - 预设选择tabs</p><div class="tabs" id="test2"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test2-1">test2 1</button></li><li class="tab"><button type="button" data-href="#test2-2">test2 2</button></li><li class="tab active"><button type="button" data-href="#test2-3">test2 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test2-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test2-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test2-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>3.Demo 3 - 没有预设值</p><div class="tabs" id="test3"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test3-1">test3 1</button></li><li class="tab"><button type="button" data-href="#test3-2">test3 2</button></li><li class="tab"><button type="button" data-href="#test3-3">test3 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>4.Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一个Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸弹</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字为第一个Tab</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有Tab名字</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-22-诗词标签-poem">2.22 诗词标签 poem</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><ol><li><code>title</code>：诗词标题</li><li><code>author</code>：作者，可以不写</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% poem 水调歌头,苏轼 %&#125;</span><br><span class="line">丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。</span><br><span class="line">明月几时有？把酒问青天。</span><br><span class="line">不知天上宫阙，今夕是何年？</span><br><span class="line">我欲乘风归去，又恐琼楼玉宇，高处不胜寒。</span><br><span class="line">起舞弄清影，何似在人间？</span><br><span class="line"></span><br><span class="line">转朱阁，低绮户，照无眠。</span><br><span class="line">不应有恨，何事长向别时圆？</span><br><span class="line">人有悲欢离合，月有阴晴圆缺，此事古难全。</span><br><span class="line">但愿人长久，千里共婵娟。</span><br><span class="line">&#123;% endpoem %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class='poem'><div class='poem-title'>水调歌头</div><div class='poem-author'>苏轼</div><p>丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。<br>明月几时有？把酒问青天。<br>不知天上宫阙，今夕是何年？<br>我欲乘风归去，又恐琼楼玉宇，高处不胜寒。<br>起舞弄清影，何似在人间？</p><p>转朱阁，低绮户，照无眠。<br>不应有恨，何事长向别时圆？<br>人有悲欢离合，月有阴晴圆缺，此事古难全。<br>但愿人长久，千里共婵娟。</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-23-阿里图标-icon">2.23 阿里图标 icon</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon [icon-xxxx],[font-size] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>icon-xxxx</code>：表示图标<code>font-class</code>,可以在自己的阿里矢量图标库项目的<code>font-class</code>引用方案内查询并复制。</li><li><code>font-size</code>：表示图标大小，直接填写数字即可，单位为<code>em</code>。图标大小默认值为<code>1em</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon icon-rat<span class="emphasis">_zi %&#125;&#123;% icon icon-rat,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-ox_</span>chou,3 %&#125;&#123;% icon icon-ox,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-tiger<span class="emphasis">_yin,5 %&#125;&#123;% icon icon-tiger,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rabbit_</span>mao,1 %&#125;&#123;% icon icon-rabbit,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dragon<span class="emphasis">_chen,3 %&#125;&#123;% icon icon-dragon,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-snake_</span>si,5 %&#125;&#123;% icon icon-snake,6 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-horse<span class="emphasis">_wu %&#125;&#123;% icon icon-horse,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-goat_</span>wei,3 %&#125;&#123;% icon icon-goat,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-monkey<span class="emphasis">_shen,5 %&#125;&#123;% icon icon-monkey,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rooster_</span>you %&#125;&#123;% icon icon-rooster,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dog<span class="emphasis">_xu,3 %&#125;&#123;% icon icon-dog,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-boar_</span>hai,5 %&#125;&#123;% icon icon-boar,6 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rat_zi"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rat"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-ox_chou"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-ox"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-tiger_yin"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-tiger"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rabbit_mao"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rabbit"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dragon_chen"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dragon"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-snake_si"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-snake"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-horse_wu"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-horse"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-goat_wei"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-goat"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-monkey_shen"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-monkey"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rooster_you"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rooster"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dog_xu"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dog"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-boar_hai"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-boar"></use></svg></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-24-特效标签wow">2.24 特效标签wow</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow [animete],[duration],[delay],[offset],[iteration] %&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endwow %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>animate</code>: 动画样式，效果详见<a href="https://animate.style/">animate.css参考文档</a></li><li><code>duration</code>: 选填项，动画持续时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>delay</code>: 选填项，动画开始的延迟时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>offset</code>: 选填项，开始动画的距离（相对浏览器底部）</li><li><code>iteration</code>: 选填项，动画重复的次数</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.flip动画效果。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>2.zoomIn动画效果，持续5s，延时5s，离底部100距离时启动，重复10次</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>3.slideInRight动画效果，持续5s，延时5s</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__slideInRight,5s,5s %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note orange &#x27;fas fa-car&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`slideInRight`动画效果，持续`5s`，延时`5s`。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>4.heartBeat动画效果，延时5s，重复10次。此处注意不用的参数位置要留空，用逗号间隔。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__heartBeat,,5s,,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note red &#x27;fas fa-battery-half&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`heartBeat`动画效果，延时`5s`，重复`10`次。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.flip动画效果。</p><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div><p>2.zoomIn动画效果，持续5s，延时5s，离底部100距离时启动，重复10次</p><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div><p>3.slideInRight动画效果，持续5s，延时5s</p><div class='wow animate__slideInRight' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='' ><div class="note orange icon-padding modern"><i class="note-icon fas fa-car"></i><p><code>slideInRight</code>动画效果，持续<code>5s</code>，延时<code>5s</code>。</p></div></div><p>4.heartBeat动画效果，延时5s，重复10次。此处注意不用的参数位置要留空，用逗号间隔。</p><div class='wow animate__heartBeat' data-wow-duration='' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='10' ><div class="note red icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p><code>heartBeat</code>动画效果，延时<code>5s</code>，重复<code>10</code>次。</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-25-进度条-progress">2.25  进度条 progress</h2><div class="note info flat"><p>进度条标签参考<a href="https://rongbuqiu.com/jdt.html">沂佰孜猫-给HEXO文章添加彩色进度条</a>。<br>源样式提取自<a href="https://zwying0814.gitbook.io/cuteen/">Cuteen</a>主题。</p></div><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress [width] [color] [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>width</code>: 0到100的阿拉伯数字</li><li><code>color</code>: 颜色，取值有red,yellow,green,cyan,blue,gray</li><li><code>text</code>:进度条上的文字内容</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress 10 red 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 30 yellow 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 50 green 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 70 cyan 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 90 blue 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 100 gray 进度条样式预览 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-red"  style="width: 10%" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-yellow"  style="width: 30%" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-green"  style="width: 50%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-cyan"  style="width: 70%" aria-valuenow="70" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-blue"  style="width: 90%" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-gray"  style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-26-注释-notation">2.26 注释 notation</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota [label] , [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p><code>label</code>: 注释词汇</p></li><li><p><code>text</code>: 悬停显示的注解内容</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota 把鼠标移动到我上面试试 ,可以看到注解内容出现在顶栏 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p><span class='nota' data-nota='可以看到注解内容出现在顶栏'>把鼠标移动到我上面试试</span></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-27-气泡注释-bubble">2.27 气泡注释 bubble</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bubble [content] , [notation] ,[background-color] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>content</code>: 注释词汇</li><li><code>notation</code>: 悬停显示的注解内容</li><li><code>background-color</code>: 可选，气泡背景色。默认为“#71a4e3”</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的&#123;% bubble 兄弟相邻选择器,&quot;例如 h1 + p &#123;margin-top:50px;&#125;&quot; %&#125;，&#123;% bubble flex布局,&quot;Flex 是 Flexible Box 的缩写，意为&quot;弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;,&quot;#ec5830&quot; %&#125;，&#123;% bubble transform变换,&quot;transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。&quot;,&quot;#1db675&quot; %&#125;，animation的&#123;% bubble 贝塞尔速度曲线,&quot;贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋&quot;,&quot;#de4489&quot; %&#125;写法，还有今天刚看到的&#123;% bubble clip-path,&quot;clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。&quot;,&quot;#868fd7&quot; %&#125;属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的<span class="bubble-content">兄弟相邻选择器</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#71a4e3;">例如 h1 + p {margin-top:50px;}</span></span>，<span class="bubble-content">flex布局</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">Flex 是 Flexible Box 的缩写，意为弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;</span></span>，<span class="bubble-content">transform变换</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#1db675;">transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。</span></span>，animation的<span class="bubble-content">贝塞尔速度曲线</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#de4489;">贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋</span></span>写法，还有今天刚看到的<span class="bubble-content">clip-path</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#868fd7;">clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。</span></span>属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-28-引用文献-reference">2.28 引用文献 reference</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% referto [id] , [literature] %&#125;</span><br><span class="line">&#123;% referfrom [id] , [literature] , [url] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p>referto 引用上标</p><ul><li><p><code>id</code>: 上标序号内容，需与referfrom标签的id对应才能实现跳转</p></li><li><p><code>literature</code>: 引用的参考文献名称</p></li></ul></li><li><p>referfrom 引用出处</p><ul><li><p><code>id</code>: 序号内容，需与referto标签的id对应才能实现 跳转</p></li><li><p><code>literature</code>: 引用的参考文献名称</p></li><li><p><code>url</code>: 引用的参考文献链接，可省略</p></li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Akilarの糖果屋(akilar.top)是一个私人性质的博客&#123;% referto &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27; %&#125;，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用Hexo框架&#123;% referto &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27; %&#125;，Butterfly主题&#123;% referto &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">本项目参考了Volantis&#123;% referto &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27; %&#125;的标签样式。引入<span class="code">`[tag].js`</span>，并针对<span class="code">`butterfly`</span>主题修改了相应的<span class="code">`[tag].styl`</span>。在此鸣谢<span class="code">`Volantis`</span>主题众开发者。</span><br><span class="line">主要参考内容包括各个volantis的内置标签插件文档&#123;% referto &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27; %&#125;</span><br><span class="line">Butterfly主题的各个衍生魔改&#123;% referto &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27; %&#125;&#123;% referto &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27; %&#125;&#123;% referto &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27; %&#125;&#123;% referto &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% referfrom &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27;,&#x27;https://jq.qq.com/?<span class="emphasis">_wv=1027&amp;k=pGLB2C0N&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27;,&#x27;https://hexo.io/zh-cn/docs/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27;,&#x27;https://butterfly.js.org/posts/21cfbf15/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27;,&#x27;https://volantis.js.org/v5/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27;,&#x27;https://volantis.js.org/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27;,&#x27;https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27;,&#x27;https://lovelijunyi.gitee.io/posts/c898.html&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27;,&#x27;https://github.com/l-lin/font-awesome-animation&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27;,&#x27;https://www.antmoe.com/posts/3b43914f/&#x27; %&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>Akilarの糖果屋(akilar.top)是一个私人性质的博客<span class="hidden-anchor" id="referto_[1]"></span><sup class="reference"><a href="#referfrom_[1]">[1]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Akilarの糖果屋群聊简介</span><span class="reference-title">参考资料</span></span></span>，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用Hexo框架<span class="hidden-anchor" id="referto_[2]"></span><sup class="reference"><a href="#referfrom_[2]">[2]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Hexo中文文档</span><span class="reference-title">参考资料</span></span></span>，Butterfly主题<span class="hidden-anchor" id="referto_[3]"></span><sup class="reference"><a href="#referfrom_[3]">[3]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档(一) 快速开始</span><span class="reference-title">参考资料</span></span></span></p><p>本项目参考了Volantis<span class="hidden-anchor" id="referto_[4]"></span><sup class="reference"><a href="#referfrom_[4]">[4]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">hexo-theme-volantis 标签插件</span><span class="reference-title">参考资料</span></span></span>的标签样式。引入<code>[tag].js</code>，并针对<code>butterfly</code>主题修改了相应的<code>[tag].styl</code>。在此鸣谢<code>Volantis</code>主题众开发者。<br>主要参考内容包括各个volantis的内置标签插件文档<span class="hidden-anchor" id="referto_[5]"></span><sup class="reference"><a href="#referfrom_[5]">[5]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Volantis文档:内置标签插件</span><span class="reference-title">参考资料</span></span></span><br>Butterfly主题的各个衍生魔改<span class="hidden-anchor" id="referto_[6]"></span><sup class="reference"><a href="#referfrom_[6]">[6]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档:标签外挂（Tag Plugins</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[7]"></span><sup class="reference"><a href="#referfrom_[7]">[7]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小弋の生活馆全样式预览</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[8]"></span><sup class="reference"><a href="#referfrom_[8]">[8]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">l-lin-font-awesome-animation</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[9]"></span><sup class="reference"><a href="#referfrom_[9]">[9]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小康的butterfly主题使用文档</span><span class="reference-title">参考资料</span></span></span></p><div class="reference-source"><span class="hidden-anchor" id="referfrom_[1]"></span><a class="reference-anchor" href="#referto_[1]">[1]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://jq.qq.com/?_wv=1027&k=pGLB2C0N">Akilarの糖果屋群聊简介</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[2]"></span><a class="reference-anchor" href="#referto_[2]">[2]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://hexo.io/zh-cn/docs/">Hexo中文文档</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[3]"></span><a class="reference-anchor" href="#referto_[3]">[3]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 安装文档(一) 快速开始</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[4]"></span><a class="reference-anchor" href="#referto_[4]">[4]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/v5/tag-plugins/">hexo-theme-volantis 标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[5]"></span><a class="reference-anchor" href="#referto_[5]">[5]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/tag-plugins/">Volantis文档:内置标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[6]"></span><a class="reference-anchor" href="#referto_[6]">[6]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">Butterfly 安装文档:标签外挂（Tag Plugins</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[7]"></span><a class="reference-anchor" href="#referto_[7]">[7]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://lovelijunyi.gitee.io/posts/c898.html">小弋の生活馆全样式预览</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[8]"></span><a class="reference-anchor" href="#referto_[8]">[8]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://github.com/l-lin/font-awesome-animation">l-lin-font-awesome-animation</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[9]"></span><a class="reference-anchor" href="#referto_[9]">[9]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://www.antmoe.com/posts/3b43914f/">小康的butterfly主题使用文档</a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-29-PDF展示">2.29 PDF展示</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pdf 文件路径 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>文件路径</code>: 可以是相对路径或者是在线链接</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 1.本地文件:在md文件路径下创建一个同名文件夹，其内放pdf文件名为xxx.pdf的文件</span></span><br><span class="line">&#123;% pdf xxx.pdf %&#125;</span><br><span class="line"><span class="section"># 2.在线链接</span></span><br><span class="line">&#123;% pdf https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/pdf/小作文讲义.pdf %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>2.在线链接(要放到最外层才能起作用)</p><pre><code>&lt;div class=&quot;row&quot;&gt;&lt;embed src=&quot;https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/pdf/小作文讲义.pdf&quot; width=&quot;100%&quot; height=&quot;550&quot; type=&quot;application/pdf&quot;&gt;&lt;/div&gt;</code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-30-Hexo-tag-map-插件">2.30 Hexo-tag-map 插件</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% + 标签值 + 经度 + 纬度 + 文本 + 缩放等级 + 宽 + 高 + 默认图层 + %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><table><thead><tr><th style="text-align:center">地图名</th><th style="text-align:center">标签值 &lt;必填&gt;</th><th style="text-align:center">宽 (默认 100%) / 高 (默认 360px)</th><th style="text-align:center">缩放等级 (默认 14)</th><th style="text-align:center">宽 (默认 100%) / 高 (默认 360px)</th><th style="text-align:center">默认图层 (默认 1)</th></tr></thead><tbody><tr><td style="text-align:center">混合地图</td><td style="text-align:center">map</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 3~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~7</td></tr><tr><td style="text-align:center">谷歌地图</td><td style="text-align:center">googleMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~20</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~3</td></tr><tr><td style="text-align:center">高德地图</td><td style="text-align:center">gaodeMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 3~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~3</td></tr><tr><td style="text-align:center">百度地图</td><td style="text-align:center">baiduMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 4~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~2</td></tr><tr><td style="text-align:center">Geoq 地图</td><td style="text-align:center">geoqMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~5</td></tr><tr><td style="text-align:center">openstreet 地图</td><td style="text-align:center">openstreetMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">不支持此参数</td></tr></tbody></table><ol><li>参数之间，用英文逗号相隔</li><li>参数必须按上述事例顺序输入，不得为空</li><li>同一个页面，同一组经纬度值，只能插入一个相同标签值的地图 (若有需要，可以将第二个地图上，经度或纬度末尾删除一两个数)</li><li>参数取值必须在上述范围内</li><li>默认图层：即地图叠加层的值，默认常规地图还是卫星地图，可按地图显示顺序取值</li><li>缩放等级，数字越大，地图比例尺越小，显示的越精细</li><li>除标签值外，其他参数选填，但 每个参数的左边的参数必填</li><li>谷歌地图需要外网才能加载查看</li></ol><p>坐标获取：<a href="https://lbs.amap.com/tools/picker">高德地图坐标拾取系统</a> 、<a href="https://api.map.baidu.com/lbsapi/getpoint/index.html">百度地图坐标拾取系统</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% map 120.101101,30.239119 %&#125;</span><br><span class="line">&#123;% googleMap 120.101101,30.239119, 这里是西湖灵隐寺，据说求姻缘很灵验哦！ %&#125;</span><br><span class="line">&#123;% geoqMap 120.101101,30.239119, 这里是西湖灵隐寺，据说求姻缘很灵验哦！, 13, 90%, 320px, 3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><link rel="stylesheet" href="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div class="map-box" style="margin: 0.8rem 0 1.6rem 0;"><div id="map-120.101101-30.239119" style="max-width:100%; height:360px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div></div><script type="text/javascript">var normalm=L.tileLayer.chinaProvider('GaoDe.Normal.Map',{maxZoom:20,minZoom:1,attribution:'高德地图'});var imgm=L.tileLayer.chinaProvider('GaoDe.Satellite.Map',{maxZoom:20,minZoom:1,attribution:'高德地图'});var imga=L.tileLayer.chinaProvider('GaoDe.Satellite.Annotion',{maxZoom:20,minZoom:1,attribution:'高德地图'});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:20,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'});routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1,attribution:'Google Maps'});var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:21,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm]),image=L.layerGroup([imgm,imga]);var baseLayers={"高德地图":normal,"智图地图":normalm1,"谷歌地图":normalMap,"高德卫星地图":imgm,"谷歌卫星地图":satelliteMap,"高德卫星标注":image,"谷歌卫星标注":routeMap};var mymap=L.map('map-120.101101-30.239119',{center:[30.239119,120.101101],zoom:14,layers:[normal],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);</script><br><link rel="stylesheet" href="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div id="googleMap-120.101101-30.239119" style="max-width:100%; height:360px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div><script type="text/javascript">var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:22,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:22,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:22,minZoom:1,attribution:'Google Maps'});var baseLayers={"谷歌地图":normalMap,"谷歌卫星图":satelliteMap,"谷歌卫星标注": routeMap};var overlayLayers={};var mymap=L.map("googleMap-120.101101-30.239119",{center:[30.239119,120.101101],zoom:14,layers:[normalMap],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.239119','120.101101']).addTo(mymap);marker.bindPopup("这里是西湖灵隐寺，据说求姻缘很灵验哦！").openPopup();</script><br><link rel="stylesheet" href="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div id="geoqMap-120.101101-30.239119" style="max-width:90%; height:320px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div><script type="text/javascript">var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm2=L.tileLayer.chinaProvider('Geoq.Normal.PurplishBlue',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm3=L.tileLayer.chinaProvider('Geoq.Normal.Gray',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm4=L.tileLayer.chinaProvider('Geoq.Normal.Warm',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm5=L.tileLayer.chinaProvider('Geoq.Theme.Hydro',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm1,normalm2,normalm3,normalm4,normalm5]);var baseLayers={"智图地图":normalm1,"午夜蓝":normalm2,"灰色":normalm3,"暖色":normalm4,"水系":normalm5};var mymap=L.map("geoqMap-120.101101-30.239119",{center:[30.239119,120.101101],zoom:13,layers:[normalm3],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.239119','120.101101']).addTo(mymap);marker.bindPopup("这里是西湖灵隐寺，据说求姻缘很灵验哦！").openPopup();</script><br><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-31-隐藏块">2.31 隐藏块</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>content：要隐藏的内容</li><li>display：展示前按钮显示的文字（可选）</li><li>bg：按钮的背景颜色（可选）</li><li>color：按钮显示的文字的颜色（可选）</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock 点我预览, blue %&#125;</span><br><span class="line">这里有张图片：</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://s1.vika.cn/space/2022/10/30/b35fce448bc9404a8d65c3ce1e6e46eb&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;image (1)&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:67%;&quot;</span> /&gt;</span></span></span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="hide-block"><button type="button" class="hide-button" style="background-color:  blue;">点我预览    </button><div class="hide-content"><p>这里有张图片：<br><img src="https://s1.vika.cn/space/2022/10/30/b35fce448bc9404a8d65c3ce1e6e46eb" alt="image (1)" style="zoom:67%;" /></p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 演示 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 外挂标签 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
